<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[黃志文的博客]]></title>
  
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://fire17643.github.io/blog//"/>
  <updated>2015-06-19T07:37:00.478Z</updated>
  <id>http://fire17643.github.io/blog//</id>
  
  <author>
    <name><![CDATA[黃志文]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[前端性能优化]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/前端优化总结/</id>
    <published>2015-06-19T07:37:00.478Z</published>
    <updated>2015-06-19T07:37:00.478Z</updated>
    <content type="html"><![CDATA[<p>目录：<br>[TOC]</p>
<blockquote>
<p>前端性能优化是一个很需要注重的问题，前端性能直接影响着用户体验！下面是我工作中“踩在巨人的肩膀上”总结的优化方式</p>
</blockquote>
<h3 id="1-字符串拼接">1.字符串拼接</h3><p>第一种，直接使用+进行字符串连接<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">	str += i+<span class="string">"&lt;br&gt;"</span>+<span class="string">"str"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种方式使用比较广泛，但是很多人会提倡下面这种写法<br>第二种，使用数组缓存字符串<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strBuffer = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;  </span><br><span class="line">	strBuffer[i]=i+<span class="string">"&lt;br&gt;"</span>+<span class="string">"str"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = strBuffer.<span class="keyword">join</span>(<span class="string">''</span>);</span><br></pre></td></tr></table></figure></p>
<p>经测试，在 IE8+下，2种方式执行速度相当，并没有差别。<br>Firefox、Chrome及webkit内核的浏览器都对字符串拼接操作进行了优化；在 Firefox和IE下，使用Array的join方式执行速度约比直接字符串拼接快30%。而webkit内核的浏览器上使用Array的join方式执行速度约比直接字符串拼接慢10%。<br>总结，移动端浏览器推荐使用+连接字符串。</p>
<h3 id="2-数组的遍历">2.数组的遍历</h3><p>对于数组的遍历，大家都会在for循环中对数组长度进行缓存，如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = 0,<span class="keyword">l</span>=<span class="keyword">list</span>.length; i &lt; <span class="keyword">l</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">list</span>[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面这种确实比较快，但是测试发现，较先进的浏览器中比如Chrome、opera和火狐中的表现和下面的速度相当甚至更差，不过推荐使用上面的那种<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">list</span> = <span class="keyword">new</span> <span class="keyword">Array</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">list</span>.length; i++) &#123;</span><br><span class="line">	<span class="keyword">list</span>[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-while和for循环">3.while和for循环</h3><p>IE中使用while更快(30%)，而其他浏览器(包括IE内核的QQ和360)使用for循环比较快(20%)<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> sum</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable"><span class="keyword">var</span> i</span> = <span class="number">0</span>;i <span class="type">&lt; 1000; i++) &#123;</span><br><span class="line">	sum += arr[i];</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
 <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">sum</span> = 0, </span><br><span class="line">	<span class="keyword">l</span> = 1000;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">l</span>--) &#123;</span><br><span class="line">	<span class="keyword">sum</span> += 1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-_3目运算符">4. 3目运算符</h3><p>IE8+下使用3目运算符相对慢30%，其他浏览器速度相当，可自由选择<br>`num = a &gt; b ? a : b;<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">a</span> &gt; b) &#123;</span><br><span class="line">    num = <span class="literal">a</span><span class="comment">;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    num = b<span class="comment">;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-setTimeout和setInterval">5.setTimeout和setInterval</h3><p>使用setInterval比setTimeout慢40%，在各个浏览器上表现基本相同，而移动端相差也比较明显，运行过多的话setInterval会使得页面崩溃，推荐使用setTimeout<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var timeoutTimes = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span><span class="params">()</span> &#123;</span></span><br><span class="line">  timeoutTimes++;</span><br><span class="line">  <span class="keyword">if</span> <span class="params">(timeoutTimes &lt; <span class="number">100</span>)</span> &#123;</span><br><span class="line">    setTimeout<span class="params">(timeout, <span class="number">10</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">timeout<span class="params">()</span>;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var intervalTimes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interval</span><span class="params">()</span> &#123;</span></span><br><span class="line">  intervalTimes++;</span><br><span class="line">  <span class="keyword">if</span> <span class="params">(intervalTimes &gt;= <span class="number">100</span>)</span> &#123;</span><br><span class="line">    clearInterval<span class="params">(interv)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var interv = setInterval<span class="params">(interval, <span class="number">10</span>)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="6-缓存重复的使用的变量值,速度提高50%">6.缓存重复的使用的变量值,速度提高50%</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> h1</span> = element1.clientHeight + num1;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> h2</span> = element1.clientHeight + num2;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> eleHeight</span> = element1.clientHeight;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> h1</span> = eleHeight + num1;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> h2</span> = eleHeight + num2;</span><br></pre></td></tr></table></figure>
<h3 id="7-使用直接量">7.使用直接量</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Array<span class="function"><span class="params">(param,param,...)</span> -&gt;</span> <span class="keyword">var</span> a = []</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Object<span class="function"><span class="params">()</span> -&gt;</span> <span class="keyword">var</span> foo = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> RegExp<span class="function"><span class="params">()</span> -&gt;</span> <span class="keyword">var</span> reg = <span class="pi">/.../</span></span><br></pre></td></tr></table></figure>
<h3 id="8-闭包中的循环引用导致内存泄露">8.闭包中的循环引用导致内存泄露</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'dom'</span>);</span><br><span class="line">	el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// el = null; 解决方法，质空el</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>
<p>init 在执行的时候，当前上下文我们叫做 context 。这个时候，context引用了 el，el 引用了 function，function 引用了 context。这时候形成<br>了一个循环引用。</p>
<p>第二种方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elClickHandler</span>(<span class="params"></span>) </span>&#123;……&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'MyElement'</span>);</span><br><span class="line">	el.onclick = elClickHandler;</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>
<p>把 function 抽到新的 context 中，这样， function 的 context 就不包含对 el 的引用，从而打断循环引用<br>使用闭包几种方式<br>1).</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> &#123;</span></span><br><span class="line">    var <span class="built_in">count</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">next</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">count</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">count</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">next</span>(); // <span class="number">1</span></span><br><span class="line"><span class="keyword">next</span>(); // <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>2).<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++count;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = next(); <span class="comment">// 1</span></span><br><span class="line">n(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<p>3).<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">	add:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ++count;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = next(); <span class="comment">// 1</span></span><br><span class="line">n.add(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="9-判断数组">9.判断数组</h3><p>到目前位置，见过网上判断数组大致有如下几种方法<br>1).使用构造器constructor<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArr</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> o.constructor === <span class="built_in">Array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2).使用比较新的方法<code>Array.isArray(o);</code><br>3).调用Object的原型中的方法<code>toString</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArr</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在网上看各位大牛力推第三种方法，javascript模式也用的第3种方法.可见过测试发现，第一种方法是最快的，比第三种快了将近60倍，而第二种也比第三种快了10倍</p>
<h3 id="10-高频执行事件/方法的防抖">10.高频执行事件/方法的防抖</h3><blockquote>
<p>通常，开发人员会在有用户交互参与的地方添加事件，而往往这种事件会被频繁触发。<br>想象一下窗口的resize事件或者是一个元素的onmouseover事件,他们触发时，执行的非常迅速，并且触发很多次。如果你的回调过重，你可能使浏览器死掉。 这就是为什么我们要引入防抖。 </p>
</blockquote>
<p>防抖可以限制一个方法在一定时间内执行的次数。以下代码是防抖示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取自 UnderscoreJS 实用框架  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> timeout;  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>;  </span><br><span class="line">        <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">            timeout = <span class="literal">null</span>;  </span><br><span class="line">            <span class="keyword">if</span> (!immediate) func.apply(context, args);  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;  </span><br><span class="line">        clearTimeout(timeout);  </span><br><span class="line">        timeout = setTimeout(later, wait);  </span><br><span class="line">        <span class="keyword">if</span> (callNow) func.apply(context, args);  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 添加resize的回调函数，但是只允许它每300毫秒执行一次  </span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, debounce(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 这里写resize过程  </span></span><br><span class="line">&#125;, <span class="number">300</span>));</span><br></pre></td></tr></table></figure></p>
<p>debounce方法返回一个方法，用来包住你的回调函数，限制他的执行频率。使用这个防抖方法，就可以让你写的频繁回调的方法不会妨碍用户的浏览器</p>
<h3 id="11-CSS动画">11.CSS动画</h3><p>很多的CSS动画是用GPU处理的，因此动画本身很流畅，当然你可以使用下面这个简单的CSS强制使你的硬件加速<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.myAnimation</span> <span class="rules">&#123;  </span><br><span class="line">    <span class="rule"><span class="attribute">animation</span>:<span class="value"> someAnimation <span class="number">1s</span></span></span>;  </span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>; <span class="comment">/* 强制硬件加速 */</span>  </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><code>tansform:transform(0,0,0)</code>在不会影响其他动画的同时将通话送入硬件加速</p>
<h3 id="12-使用事件委托">12.使用事件委托</h3><p>事件委托是在父级元素上添加一个事件监听，来替代在每一个子元素上添加事件监听。当事件被触发时，event.target会评估相应的措施是否需要被执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取元素，添加事件监听  </span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#parent-list'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// e.target 是一个被点击的元素!  </span></span><br><span class="line">    <span class="comment">// 如果它是一个列表元素  </span></span><br><span class="line">    <span class="keyword">if</span>(e.target &amp;&amp; e.target.tagName == <span class="string">'LI'</span>) &#123;  </span><br><span class="line">        <span class="comment">// 我们找到了这个元素，对他的操作可以写在这里。  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>当事件发生的时候，它没有轮询父节点去寻找匹配的元素或选择器，且它不支持基于选择器的查询（例如用class name，或者id来查询）。所有的JavaScript框架提供了委托选择器匹配。重点是，你避免了为每一个元素加载事件监听，而是在父元素上加一个事件监听。这样大大的增加了效率，并且减少了很多维护！</p>
<h3 id="13-使用索引对象">13.使用索引对象</h3><p>当我们想要获取一个用户时，我们就要遍历一次数组。那么更好的方法是创建一个新的对象，对每一个唯一的值建立一个索引，在上面这个例子中，用username作为索引，这个数组对象可以写成：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">user</span>Store = &#123;&#125;;  </span><br><span class="line">ajaxResult.users.<span class="keyword">for</span>Each(function(<span class="keyword">user</span>) &#123;  </span><br><span class="line">    <span class="keyword">user</span>Store[<span class="keyword">user</span>.username] = <span class="keyword">user</span>;  </span><br><span class="line">&#125;);  </span><br><span class="line">// 现在当你想要找一个用户对象时，我们可以直接通过索引找到这个对象</span><br><span class="line">var davidwalsh = <span class="keyword">user</span>Store.davidwalsh;  </span><br><span class="line">var techpro = <span class="keyword">user</span>Store[<span class="string">"tech-pro"</span>];</span><br></pre></td></tr></table></figure></p>
<p>这样的代码写起来更好一些，也很简便，通过索引搜索比起遍历整个数组更加快捷</p>
<h3 id="14-不要使用_eval">14.不要使用 eval</h3><p>eval 函数会在当前作用域中执行一段 JavaScript 代码字符串。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'foo = 3'</span>);</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 3</span></span><br><span class="line">foo; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>// 但是 eval 只在被直接调用并且调用函数就是 eval 本身时，才在当前作用域中执行。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="built_in">eval</span>;</span><br><span class="line">    bar(<span class="string">'foo = 3'</span>);</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 2</span></span><br><span class="line">foo; <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 译者注：上面的代码等价于在全局作用域中调用 eval，和下面两种写法效果一样：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一：直接调用全局作用域下的 foo 变量</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">window</span>.foo = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 2</span></span><br><span class="line">foo; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>绝对不要使用 eval，任何使用它的代码都会在它的工作方式，性能和安全性方面受到质疑。<br>同样，不要在setTimeout和setInterval中使用字符串形式</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span><span class="params">(<span class="number">1</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> &#123;</span></span><br><span class="line">        console.<span class="built_in">log</span><span class="params">(<span class="number">2</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout<span class="params">('foo<span class="params">()</span>', <span class="number">1000</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">bar<span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="15-命名空间（Namespaces）">15.命名空间（Namespaces）</h3><p>只有一个全局作用域导致的常见错误是命名冲突。在 JavaScript中，这可以通过 匿名包装器 轻松解决。<br>有一些其他的调用函数表达式的方法，比如下面的两种方式语法不同，但是效果一模一样。</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;&#125;</span><span class="params">()</span>);</span></span><br></pre></td></tr></table></figure>
<p>推荐使用匿名包装器（译者注：也就是自执行的匿名函数）来创建命名空间。这样不仅可以防止命名冲突， 而且有利于程序的模块化。</p>
<p>另外，使用全局变量被认为是不好的习惯。这样的代码倾向于产生错误和带来高的维护成本。</p>
<h3 id="16-处理_undefined_值的改变">16.处理 undefined 值的改变</h3><p>了避免可能对 undefined 值的改变，一个常用的技巧是使用一个传递到匿名包装器的额外参数。 在调用时，这个参数不会获取任何值。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> <span class="literal">undefined</span> = <span class="number">123</span>;</span><br><span class="line">(<span class="reserved">function</span>(something, foo, <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="regexp">//</span> 局部作用域里的 <span class="literal">undefined</span> 变量重新获得了 `<span class="javascript"><span class="literal">undefined</span></span>` 值</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="string">'Hello World'</span>, <span class="number">42</span>);</span><br></pre></td></tr></table></figure>
<p>另外一种达到相同目的方法是在函数内使用变量声明。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="number">123</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">(something, foo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;)(<span class="string">'Hello World'</span>, <span class="number">42</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="17-减少作用域链查找">17.减少作用域链查找</h3><p>前文谈到了作用域链查找问题，这一点在循环中是尤其需要注意的问题。如果在循环中需要访问非本作用域下的变量时请在遍历之前用局部变量缓存该变量，并在遍历结束后再重写那个变量，这一点对全局变量尤其重要，因为全局变量处于作用域链的最顶端，访问时的查找次数是最多的。<br>低效率的写法：<br> <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span><span class="params">(info)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">100000</span>; i--;)&#123;</span><br><span class="line">		<span class="comment">//每次访问globalVar都需要查找到作用域链最顶端，本例中需要访问100000次</span></span><br><span class="line">		globalVar += i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span><span class="params">(info)</span></span>&#123;</span><br><span class="line">	<span class="comment">//局部变量缓存全局变量</span></span><br><span class="line">	<span class="keyword">var</span> localVar = globalVar;</span><br><span class="line">	<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">100000</span>; i--;)&#123;</span><br><span class="line">		<span class="comment">//访问局部变量是最快的</span></span><br><span class="line">		localVar += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//本例中只需要访问2次全局变量</span></span><br><span class="line">	globalVar = localVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此外，要减少作用域链查找还应该减少闭包的使用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>目录：<br>[TOC]</p>
<blockquote>
<p>前端性能优化是一个很需要注重的问题，前端性能直接影响着用户体验！下面是我工作中“踩在巨人的肩膀上”总结的优化方式</p>
</blockquote>
<h3 id="1-字符串拼接">1.字符串拼接</h3>]]>
    </summary>
    
      <category term="性能优化" scheme="http://fire17643.github.io/blog/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown语法总结]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/markdown语法总结/</id>
    <published>2015-06-19T07:35:35.700Z</published>
    <updated>2015-06-19T07:35:35.700Z</updated>
    <content type="html"><![CDATA[<h1 id="h1">h1</h1><h2 id="h1-1">h1</h2><p>h2<br>=</p>
<blockquote>
<p>blockquote 快注释<br>   This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>sdf</p>
</blockquote>
<p><em>斜体</em>  *斜体<em><br><em>斜体</em><br><em>*粗体</em></em><br><strong>粗体</strong></p>
<p>Use the <code>printf()</code>function.<br><code>There is a literal backtick (`) here.</code><br><a href="http://example.com/" target="_blank" rel="external">http://example.com/</a><br><a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#97;&#x64;&#x64;&#114;&#101;&#115;&#115;&#x40;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#97;&#x64;&#x64;&#114;&#101;&#115;&#115;&#x40;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;</a></p>
<ol>
<li>item 1</li>
<li>item 2</li>
<li>item 3</li>
</ol>
<ul>
<li>item 4</li>
<li>item 4</li>
<li>item 4</li>
<li><ul>
<li>item 4</li>
</ul>
</li>
</ul>
<ul>
<li>1</li>
<li>2</li>
</ul>
<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>
<p>4 &lt; 5<br>&copy;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span>pppp<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span> ##pp <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>表格：<br>| Tables        | Are           | Cool  |<br>| ——————- |:——————-:| ——-:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>
<p><code>function fn(){
}</code></p>
<ul>
<li><p>A list item with a blockquote:</p>
<blockquote>
<p>This is a blockquote<br> inside a list item.</p>
</blockquote>
</li>
</ul>
<p>1986. What a great season.</p>
<pre><code>这是一个代码区块
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"footer"</span>&gt;
    &amp;<span class="keyword">copy</span>; <span class="number">2004</span> Foo Corporation
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p><a href="http://google.com/" target="_blank" rel="external">Google</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="h1">h1</h1><h2 id="h1-1">h1</h2><p>h2<br>=</p>
<blockquote>
<p>blockquote 快注释<br>   This is the first level of quoting.</p>
<blockqu]]>
    </summary>
    
      <category term="markdown" scheme="http://fire17643.github.io/blog/tags/markdown/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些常用的正则表达式]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/一些常用的正则表达式/</id>
    <published>2015-06-19T07:33:38.844Z</published>
    <updated>2015-06-19T07:33:38.844Z</updated>
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"^\d+$"</span>　　<span class="comment">//非负整数（正整数 + 0） </span></span><br><span class="line"><span class="string">"^[0-9]*[1-9][0-9]*$"</span>　　<span class="comment">//正整数 </span></span><br><span class="line"><span class="string">"^((-\d+)|(0+))$"</span>　　<span class="comment">//非正整数（负整数 + 0） </span></span><br><span class="line"><span class="string">"^-[0-9]*[1-9][0-9]*$"</span>　　<span class="comment">//负整数 </span></span><br><span class="line"><span class="string">"^-?\d+$"</span>　　　　<span class="comment">//整数 </span></span><br><span class="line"><span class="string">"^\d+(\.\d+)?$"</span>　　<span class="comment">//非负浮点数（正浮点数 + 0） </span></span><br><span class="line"><span class="string">"^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$"</span>　　<span class="comment">//正浮点数 </span></span><br><span class="line"><span class="string">"^((-\d+(\.\d+)?)|(0+(\.0+)?))$"</span>　　<span class="comment">//非正浮点数（负浮点数 + 0） </span></span><br><span class="line"><span class="string">"^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$"</span>　　<span class="comment">//负浮点数 </span></span><br><span class="line"><span class="string">"^(-?\d+)(\.\d+)?$"</span>　　<span class="comment">//浮点数 </span></span><br><span class="line">^<span class="comment">//w+((-//w+)|(//.//w+))*//@[A-Za-z0-9]+((//.|-)[A-Za-z0-9]+)*//.[A-Za-z0-9]+$ </span></span><br><span class="line">^#[a-fA-F0-<span class="number">9</span>]&#123;<span class="number">6</span>&#125;          <span class="comment">//颜色</span></span><br><span class="line">^http[s]?:<span class="comment">//////([//w-]+//.)+[//w-]+([//w-./?%&amp;=]*)?$ //链接</span></span><br><span class="line">^[<span class="comment">//u4E00-//u9FA5//uF900-//uFA2D]+$    //仅中文</span></span><br><span class="line">^[<span class="comment">//x00-//xFF]+$          //仅ACSII字符</span></span><br><span class="line">^<span class="comment">//d&#123;6&#125;$           //邮编</span></span><br><span class="line">^<span class="number">0</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;<span class="number">13</span>[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">9</span>&#125;$         <span class="comment">//手机^//d&#123;1,3&#125;//.//d&#123;1,3&#125;//.//d&#123;1,3&#125;.//d&#123;1,3&#125;$    //ip地址</span></span><br><span class="line">n^<span class="comment">//S+$           //非空</span></span><br><span class="line">(.*)<span class="comment">//.(jpg|bmp|gif|ico|pcx|jpeg|tif|png|raw|tga)$ //图片</span></span><br><span class="line">(.*)<span class="comment">//.(rar|zip|7zip|tgz)$        //压缩文件</span></span><br><span class="line">^<span class="comment">//d&#123;4&#125;(//-|///|/.)//d&#123;1,2&#125;//1//d&#123;1,2&#125;$"        //日期</span></span><br><span class="line"><span class="string">"^[A-Za-z]+$"</span>　　<span class="comment">//由26个英文字母组成的字符串 </span></span><br><span class="line"><span class="string">"^[A-Z]+$"</span>　　<span class="comment">//由26个英文字母的大写组成的字符串 </span></span><br><span class="line"><span class="string">"^[a-z]+$"</span>　　<span class="comment">//由26个英文字母的小写组成的字符串 </span></span><br><span class="line"><span class="string">"^[A-Za-z0-9]+$"</span>　　<span class="comment">//由数字和26个英文字母组成的字符串 </span></span><br><span class="line"><span class="string">"^\w+$"</span>　　<span class="comment">//由数字、26个英文字母或者下划线组成的字符串 </span></span><br><span class="line"><span class="string">"^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$"</span>　　　　<span class="comment">//email地址 </span></span><br><span class="line"><span class="string">"^[a-zA-z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$"</span>　　<span class="comment">//url </span></span><br><span class="line">/^(d&#123;<span class="number">2</span>&#125;|d&#123;<span class="number">4</span>&#125;)-((<span class="number">0</span>([<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">1</span>[<span class="number">1</span>|<span class="number">2</span>]))-(([<span class="number">0</span>-<span class="number">2</span>]([<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">3</span>[<span class="number">0</span>|<span class="number">1</span>]))$/ <span class="comment">// 年-月-日 </span></span><br><span class="line">/^((<span class="number">0</span>([<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">1</span>[<span class="number">1</span>|<span class="number">2</span>]))/(([<span class="number">0</span>-<span class="number">2</span>]([<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">3</span>[<span class="number">0</span>|<span class="number">1</span>]))/(d&#123;<span class="number">2</span>&#125;|d&#123;<span class="number">4</span>&#125;)$/ <span class="comment">// 月/日/年 </span></span><br><span class="line"><span class="string">"^([w-.]+)@(([[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.)|(([w-]+.)+))([a-zA-Z]&#123;2,4&#125;|[0-9]&#123;1,3&#125;)(]?)$"</span> <span class="comment">//Emil </span></span><br><span class="line"><span class="string">"(d+-)?(d&#123;4&#125;-?d&#123;7&#125;|d&#123;3&#125;-?d&#123;8&#125;|^d&#123;7,8&#125;)(-d+)?"</span> <span class="comment">//电话号码 </span></span><br><span class="line"><span class="string">"^(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5])$"</span> <span class="comment">//IP地址</span></span><br></pre></td></tr></table></figure>
<p>匹配中文字符的正则表达式： <code>[\u4e00-\u9fa5]</code><br>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code><br>匹配空行的正则表达式：<code>\n[\s| ]*\r</code><br>匹配HTML标记的正则表达式：<code>/&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;/</code><br>匹配首尾空格的正则表达式：<code>(^\s*)|(\s*$)</code><br>匹配Email地址的正则表达式：<code>\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</code><br>匹配网址URL的正则表达式：<code>^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$</code><br>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code><br>匹配国内电话号码：<code>(\d{3}-|\d{4}-)?(\d{8}|\d{7})?</code><br>匹配腾讯QQ号：<code>^[1-9]*[1-9][0-9]*$</code></p>
<p>```</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="l]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="正则" scheme="http://fire17643.github.io/blog/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[高亮显示搜索到的关键字]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%E6%90%9C%E7%B4%A2%E5%88%B0%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/高亮显示搜索到的关键字/</id>
    <published>2015-06-19T07:22:00.556Z</published>
    <updated>2015-06-19T07:22:00.556Z</updated>
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高亮显示搜索到的关键字</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeightLight</span>(<span class="params">Keyword</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//文本选择器</span></span><br><span class="line">  <span class="keyword">var</span> TextRange;</span><br><span class="line">  <span class="comment">//是否找到</span></span><br><span class="line">  <span class="keyword">var</span> Found=<span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//找到的次数</span></span><br><span class="line">  <span class="keyword">var</span> Count = <span class="number">0</span>;</span><br><span class="line">  TextRange = <span class="built_in">document</span>.body.createTextRange();</span><br><span class="line">  Found = TextRange.findText(Keyword);</span><br><span class="line">  <span class="keyword">if</span> (Found)&#123;</span><br><span class="line">  	Count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (Found &amp;&amp; Count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  	TextRange.pasteHTML(<span class="string">'&lt;span style="background:yellow"&gt;'</span> + Keyword + <span class="string">'&lt;/span&gt;'</span>);</span><br><span class="line">  	<span class="comment">//将滚动条定位到第一次查到的视口范围内</span></span><br><span class="line">  	<span class="keyword">if</span>(Count==<span class="number">1</span>)&#123;</span><br><span class="line">  		TextRange.scrollIntoView();</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="comment">//继续查找</span></span><br><span class="line">  	Found = TextRange.findText(Keyword);</span><br><span class="line">  	<span class="keyword">if</span> (!Found)&#123;</span><br><span class="line">  		Count = <span class="number">0</span>;</span><br><span class="line">  	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  		Count++;</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正则式法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highLight</span>(<span class="params">ele,keys</span>) </span>&#123; </span><br><span class="line">	<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + keys.replace(<span class="regexp">/,/</span>,<span class="string">"|"</span>) + <span class="string">")"</span>,<span class="string">"g"</span>); </span><br><span class="line">	ele.innerHTML = ele.innerHTML.replace(reg,<span class="string">"&lt;font color=\"red\"&gt;$1&lt;/font&gt;"</span>); </span><br><span class="line">&#125; 	 </span><br><span class="line">highLight(<span class="built_in">document</span>.body,keys);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="代码研究" scheme="http://fire17643.github.io/blog/tags/%E4%BB%A3%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mobile safari 下overflow:auto的解决方法]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/mobile-safari%E4%B8%8Boverflow-auto%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/mobile-safari下overflow-auto的解决方法/</id>
    <published>2015-06-19T06:58:33.488Z</published>
    <updated>2015-06-19T06:58:33.488Z</updated>
    <content type="html"><![CDATA[<p>这次有个项目需要完全支持ipad，中间还是遇到了不少的问题。今天有个div需要滚动条在ipad的safari下面失效，mobile safari因为多点触摸的缘故取消了局部区域的滚动条（为了防止和默认的拖动行为冲突）。首先排除了是不是本身布局问题造成的，为此建了一个简单的页面进行测试依然失效，google发现还真是有这样的问题，google reader上也是失效的，mobile safari为此需要使用两个手指才能完成滚动局部的行为。<br>为了解决这样的问题继续google，最后发现了上述的一篇文章，使用mobile safari的touchmove事件模拟滚动条的效果。废话不多说代码如下：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">isTouchDevice</span></span>()&#123;</span><br><span class="line"> try&#123;</span><br><span class="line">   document.createEvent(<span class="string">"TouchEvent"</span>);</span><br><span class="line">   <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;catch(e)&#123;</span><br><span class="line">   <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> touchScroll(id)&#123;</span><br><span class="line">  <span class="keyword">if</span>(isTouchDevice())&#123; </span><br><span class="line">    //<span class="keyword">if</span> touch events exist...</span><br><span class="line">    var el=document.getElementById(id);</span><br><span class="line">    var scrollStartPos=<span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    document.getElementById(id).addEventListener(<span class="string">"touchstart"</span>, <span class="keyword">function</span>(event) &#123;</span><br><span class="line">    	scrollStartPos=this.scrollTop+event.touches[<span class="number">0</span>].pageY;</span><br><span class="line">    	event.preventDefault();</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">     </span><br><span class="line">    document.getElementById(id).addEventListener(<span class="string">"touchmove"</span>, <span class="keyword">function</span>(event) &#123;</span><br><span class="line">    	this.scrollTop=scrollStartPos-event.touches[<span class="number">0</span>].pageY;</span><br><span class="line">    	event.preventDefault();</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//最后使用</span><br><span class="line">touchScroll(<span class="string">"MyElement"</span>); //将你需要overflow:auto的元素id调用这个方法即可。</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这次有个项目需要完全支持ipad，中间还是遇到了不少的问题。今天有个div需要滚动条在ipad的safari下面失效，mobile safari因为多点触摸的缘故取消了局部区域的滚动条（为了防止和默认的拖动行为冲突）。首先排除了是不是本身布局问题造成的，为此建了一个简单的页]]>
    </summary>
    
      <category term="mobile" scheme="http://fire17643.github.io/blog/tags/mobile/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[完美的全背景图片]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%85%A8%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/完美的全背景图片/</id>
    <published>2015-06-18T08:56:48.928Z</published>
    <updated>2015-06-18T08:56:48.928Z</updated>
    <content type="html"><![CDATA[<p>我们的目标是创建一张背景图，而且它能一直覆盖整个浏览器的窗口。我们看看它有什么特点：</p>
<blockquote>
<p>图片覆盖整个页面，没有白边<br>按需要缩放图片<br>保留图片比例（方向 比例）<br>图片居中<br>不产生滚动条<br>尽可能保证浏览器的兼容性<br>不使用Flash这样的小把戏</p>
</blockquote>
<h2 id="强劲_简单_先进的CSS3方式">强劲 简单 先进的CSS3方式</h2><p>鉴于css3中已经有了background-size 这个属性，那我们完全就可以使用css来实现了。使用html元素（不用body是因为至少html的height总是浏览器窗口的高度）。我们设置background为fixed和center，再使用background-size来适应大小<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123; </span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(images/bg.jpg) no-repeat center center fixed</span></span>; </span><br><span class="line">	<span class="rule"><span class="attribute">-webkit-background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-moz-background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-o-background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>可用于：<br>Safari 3+<br>Chrome Whatever+<br>IE 9+<br>Opera 10+ (Opera 9.5 支持background-size 但不是这个关键字)<br>Firefox 3.6+ (Firefox 4 支持没有前缀的版本)<br>更新：<br>感谢Goltzman 在评论中提出了IE的兼容方式：<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">filter</span>:<span class="value"> progid:DXImageTransform.Microsoft.<span class="function">AlphaImageLoader</span>(src=<span class="string">'.myBackground.jpg'</span>, sizingMethod=<span class="string">'scale'</span>)</span></span>; <span class="rule"><span class="attribute">-ms-filter</span>:<span class="value"> <span class="string">"progid:DXImageTransform.Microsoft.AlphaImageLoader(src='myBackground.jpg', sizingMethod='scale')"</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>注意，读者 Pierre Orsander提出他们尝试使用这种方式时候发现页面在关闭时会出现一些问题。<br>更新：Matt Litherland任何人尝试使用上述IE的filter，在滚动条、死链、或其他地方出现问题时，就不该在html或body元素上添加样式，而是使用一个position为fixed的，width、height均为100%的div代替。</p>
<h2 id="纯CSS方式_#1">纯CSS方式 #1</h2><p>同样，非常感谢<a href="http://dougneiner.com/" target="_blank" rel="external">Doug Neiner</a> 提供的另一个版本。这里我们使用一个inline的img标签，这就可以在任何浏览器里都能改变大小。设置一个min-height来保证能够在垂直方向上填充浏览器，设置width 100%保证水平填充。同时给img设置min-width来保证图片永远不会比它本身还小。<br>这里可用到的特殊技巧就是使用media query来检查是否浏览器比图片还要小，使用left和margin-left的组合来保证图片居中。<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">img</span><span class="class">.bg</span> <span class="rules">&#123;</span><br><span class="line"> <span class="comment">/* Set rules to fill background */</span></span><br><span class="line"> <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">1024px</span></span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Set up proportionate scaling */</span></span><br><span class="line"> <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Set up positioning */</span></span><br><span class="line"> <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line">	</span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (max-width: <span class="number">1024px</span>) </span>&#123; <span class="comment">/* Specific to this particular image */</span></span><br><span class="line">  <span class="tag">img</span><span class="class">.bg</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">512px</span></span></span>;   <span class="comment">/* 50% */</span></span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="纯CSS方式_#2">纯CSS方式 #2</h2><p>另一种简单的实现方式是在页面上放一个inline的img标签，通过position:fixed定位于左上角,ming-width和min-height为100%，保留其长宽比</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/bg.jpg"</span> <span class="attribute">id</span>=<span class="value">"bg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#bg</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Preserve aspet ratio */</span></span><br><span class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然而，这样没有使图片居中。那我们就把它设为fixed，同时包裹于div内，而且这个div是浏览器窗口宽高的200%。那么图片就能居中定位，同时保留长宽比。<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"bg"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/bg.jpg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#bg</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> -<span class="number">50%</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">50%</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200%</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#bg</span> <span class="tag">img</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>可用于：<br>Safari / Chrome / Firefox (最近版本都是可行的)<br>IE 8+<br>Opera (任何版本) 以及 IE 都以相同方式崩溃(定位错误，具体原因不明)[最新的webkit内核的可行]<br>Peter VanWylen 提到：如果你是通过js添加的图片，那么在IE8 9 10 中img需要设置 width: auto; and height: auto;</p>
<h2 id="绝对定位方式">绝对定位方式</h2> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/bg.jpg"</span> <span class="attribute">id</span>=<span class="value">"bg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#bg</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0.2</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="jQuery方式">jQuery方式</h2><p>如果我们知道一张图品的宽高比是大于还是小于浏览器的窗口，那事情就变得容易多了。若果小，那我们只需要设置width 100%，那它就能把宽高填充。如果图片要高我们只需要设置height 100%就能达到同样效果。<br>上述想法可以通过js实现，我更倾向于jQuery。<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/bg.jpg"</span> <span class="attribute">id</span>=<span class="value">"bg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#bg</span> <span class="rules">&#123; <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>; <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.bgwidth</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.bgheight</span> <span class="rules">&#123; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> theWindow = $(<span class="built_in">window</span>),</span><br><span class="line">        $bg = $(<span class="string">"#bg"</span>),</span><br><span class="line">	aspectRatio = $bg.width() / $bg.height();			    		</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resizeBg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( (theWindow.width() / theWindow.height()) &lt; aspectRatio ) &#123;</span><br><span class="line">	    $bg.removeClass().addClass(<span class="string">'bgheight'</span>);</span><br><span class="line">	 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             $bg.removeClass().addClass(<span class="string">'bgwidth'</span>);</span><br><span class="line">	&#125;				</span><br><span class="line">     &#125;</span><br><span class="line">     theWindow.resize(resizeBg).trigger(<span class="string">"resize"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>我们的目标是创建一张背景图，而且它能一直覆盖整个浏览器的窗口。我们看看它有什么特点：</p>
<blockquote>
<p>图片覆盖整个页面，没有白边<br>按需要缩放图片<br>保留图片比例（方向 比例）<br>图片居中<br>不产生滚动条<br>尽可能保证浏览器的兼容]]>
    </summary>
    
      <category term="技巧" scheme="http://fire17643.github.io/blog/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Hack代码与浏览兼容总结]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/CSS-Hack%E4%BB%A3%E7%A0%81%E4%B8%8E%E6%B5%8F%E8%A7%88%E5%85%BC%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/CSS-Hack代码与浏览兼容总结/</id>
    <published>2015-06-18T08:54:27.201Z</published>
    <updated>2015-06-18T08:54:27.201Z</updated>
    <content type="html"><![CDATA[<h3 id="IE条件注释法，微软官方推荐的hack方式。">IE条件注释法，微软官方推荐的hack方式。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只在IE下生效 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span><br><span class="line">这段文字只在IE浏览器上显示</span><br><span class="line">&lt;!--[endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只在IE6下生效 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span><br><span class="line">这段文字只在IE6浏览器上显示</span><br><span class="line">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只在IE6以上版本生效--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gt IE 6]&gt;</span><br><span class="line">这段文字只在IE6以上版本IE浏览器上显示</span><br><span class="line">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只在IE7上不生效 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if ! IE 7]&gt;</span><br><span class="line">这段文字在非IE7浏览器上显示</span><br><span class="line">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 非IE浏览器生效 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if !IE]&gt;</span><br><span class="line">这段文字只在非IE浏览器上显示</span><br><span class="line">&lt;!--&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.常用的IE hack<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.csshack</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>:blue;</span><br><span class="line">	<span class="attribute">background</span>:blue\<span class="number">9</span>; <span class="comment">/*all ie*/</span></span><br><span class="line">	<span class="attribute">background</span>:blue\<span class="number">0</span>/; <span class="comment">/*ie8-ie9*/</span></span><br><span class="line">	<span class="attribute">background<span class="comment">/*\**/</span></span>: blue\<span class="number">9</span>; <span class="comment">/* ie7-ie8*/</span></span><br><span class="line">	*<span class="attribute">background</span>:blue;<span class="comment">/* or #background: blue */</span> <span class="comment">/*ie6-ie7*/</span>    </span><br><span class="line">	+<span class="attribute">background</span>:blue; <span class="comment">/*ie7*/</span></span><br><span class="line">	<span class="attribute">_background</span>:blue; <span class="comment">/*ie6*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="pseudo">:root</span> <span class="class">.csshack</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>:blue; <span class="comment">/*大于等于ie9*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* IE9, IE10 */</span></span><br><span class="line"><span class="at_rule">@media</span> screen and (<span class="attribute">min-width</span>:<span class="number">0</span>\<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="class">.csshack</span> &#123; <span class="tag">color</span>: <span class="tag">red</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* IE 10+ */</span></span><br><span class="line">@<span class="tag">media</span> <span class="tag">screen</span> <span class="tag">and</span> (<span class="attribute">-ms-high-contrast</span>: active), (<span class="attribute">-ms-high-contrast</span>: none) &#123;</span><br><span class="line">   <span class="id">#veintiun</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* saf3+, chrome1+ */</span></span><br><span class="line"><span class="at_rule">@media</span> screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>:<span class="number">0</span>) &#123;</span><br><span class="line">   <span class="id">#diez</span>  &#123; <span class="tag">color</span>: <span class="tag">red</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iPhone / mobile webkit */</span></span><br><span class="line">@<span class="tag">media</span> <span class="tag">screen</span> <span class="tag">and</span> (<span class="attribute">max-device-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="id">#veintiseis</span> &#123; <span class="tag">color</span>: <span class="tag">red</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Firefox only. 1+ */</span></span><br><span class="line"><span class="id">#veinticuatro</span>,  <span class="tag">x</span><span class="pseudo">:-moz-any-link</span>  &#123; <span class="tag">color</span>: <span class="tag">red</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Firefox 3.0+ */</span></span><br><span class="line"><span class="id">#veinticinco</span>,  <span class="tag">x</span><span class="pseudo">:-moz-any-link</span>, <span class="tag">x</span><span class="pseudo">:default</span>  &#123; <span class="tag">color</span>: <span class="tag">red</span>  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* FF 3.5+ */</span></span><br><span class="line"><span class="tag">body</span><span class="pseudo">:not</span>(<span class="pseudo">:-moz-handler-blocked</span>) <span class="id">#cuarenta</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure></p>
<p>3.IE CSS Media，来自这里<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @media hacks */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE6/7 only (via Keith Clarke) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen\<span class="number">9</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE6/7/8 (via Keith Clarke) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> \<span class="number">0s</span>creen\,screen\<span class="number">9</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE8 (via Keith Clarke) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> \<span class="number">0s</span>creen </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE8/9/10 */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen\<span class="number">0</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE9/10 */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">0</span>\<span class="number">0</span>) </span>&#123;</span><br><span class="line">    <span class="tag">body</span> <span class="rules">&#123; <span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>; &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="IE条件注释法，微软官方推荐的hack方式。">IE条件注释法，微软官方推荐的hack方式。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="li]]>
    </summary>
    
      <category term="browser" scheme="http://fire17643.github.io/blog/tags/browser/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[放弃jQuery改用原生JS编程]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/remove-jQuery/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/remove-jQuery/</id>
    <published>2015-06-18T08:44:03.079Z</published>
    <updated>2015-06-18T08:44:03.079Z</updated>
    <content type="html"><![CDATA[<h2 id="一-Ajax请求">一.Ajax请求</h2><h3 id="1-get请求">1.get请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.getJSON(<span class="string">'/my/url'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">'GET'</span>, <span class="string">'/my/url'</span>, <span class="literal">true</span>);</span><br><span class="line">request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">    <span class="comment">// Success!</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// We reached our target server, but it returned an error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// There was a connection error of some sort</span></span><br><span class="line">&#125;;</span><br><span class="line">request.send();</span><br></pre></td></tr></table></figure>
<h3 id="2-POST请求">2.POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'/my/url'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">'POST'</span>, <span class="string">'/my/url'</span>, <span class="literal">true</span>);</span><br><span class="line">request.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>);</span><br><span class="line">request.send(data);</span><br></pre></td></tr></table></figure>
<h2 id="二-Class操作">二.Class操作</h2><h3 id="1-添加">1.添加</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).addClass(className);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">if</span> (el.classList)</span><br><span class="line">  el.classList.add(className);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  el.className += <span class="string">' '</span> + className;</span><br></pre></td></tr></table></figure>
<h3 id="2-删除">2.删除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).removeClass(className);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">if</span> (el.classList)</span><br><span class="line">  el.classList.remove(className);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  el.className = el.className.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\b)'</span> + className.split(<span class="string">' '</span>).join(<span class="string">'|'</span>) + <span class="string">'(\\b|$)'</span>, <span class="string">'gi'</span>), <span class="string">' '</span>);</span><br></pre></td></tr></table></figure>
<h3 id="3-检查">3.检查</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).hasClass(className);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">if</span> (el.classList)</span><br><span class="line">  el.classList.contains(className);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| )'</span> + className + <span class="string">'( |$)'</span>, <span class="string">'gi'</span>).test(el.className);</span><br></pre></td></tr></table></figure>
<h2 id="三-DOM操作">三.DOM操作</h2><h3 id="1-插入节点before,after,append">1.插入节点before,after,append</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).after(htmlString);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.insertAdjacentHTML(<span class="string">'afterend'</span>, htmlString);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(parent).append(el);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">parent.appendChild(el);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).before(htmlString);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.insertAdjacentHTML(<span class="string">'beforebegin'</span>, htmlString);</span><br></pre></td></tr></table></figure>
<h3 id="2-查找、遍历、筛选、删除、替换节点">2.查找、遍历、筛选、删除、替换节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).children();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">el.children||el.childNodes</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).siblings();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.filter.call(el.parentNode.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> child !== el;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.contains(el, child);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el !== child &amp;&amp; el.contains(child);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(elements, <span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(selector).filter(filterFn);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.filter.call(<span class="built_in">document</span>.querySelectorAll(selector), filterFn);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).parent();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.parentNode</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(parent).prepend(el);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">parent.insertBefore(el, parent.firstChild);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).remove();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.parentNode.removeChild(el)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).replaceWith(string);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.outerHTML = string;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).next();</span><br><span class="line">$(el).prev();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">el.nextElementSibling</span><br><span class="line">el.previousElementSibling</span><br></pre></td></tr></table></figure>
<h3 id="3-复制节点">3.复制节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).clone();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.cloneNode(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h3 id="4-属性节点读写">4.属性节点读写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).attr(<span class="string">'tabindex'</span>);</span><br><span class="line">$(el).attr(<span class="string">'tabindex'</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.getAttribute(<span class="string">'tabindex'</span>);</span><br><span class="line">el.setAttribute(<span class="string">'tabindex'</span>, <span class="string">""</span>);</span><br></pre></td></tr></table></figure>
<h3 id="5-CSS样式读写">5.CSS样式读写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).css(ruleName);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">getComputedStyle(el)[ruleName];</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).toggleClass(className);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">if</span> (el.classList) &#123;</span><br><span class="line">  el.classList.toggle(className);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> classes = el.className.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">var</span> existingIndex = classes.indexOf(className);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (existingIndex &gt;= <span class="number">0</span>)</span><br><span class="line">    classes.splice(existingIndex, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    classes.push(className);</span><br><span class="line"></span><br><span class="line">  el.className = classes.join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-获取节点值">6.获取节点值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).text();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">el.textContent</span><br></pre></td></tr></table></figure>
<h3 id="7-节点判断">7.节点判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).is($(otherEl));</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el === otherEl</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).is(<span class="string">'.my-class'</span>);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> matches = <span class="function"><span class="keyword">function</span>(<span class="params">el, selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);</span><br><span class="line">&#125;;</span><br><span class="line">matches(el, <span class="string">'.my-class'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="8-节点坐标定位">8.节点坐标定位</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).offset();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">var</span> rect = el.getBoundingClientRect()</span><br><span class="line">&#123;</span><br><span class="line">  top: rect.top + <span class="built_in">document</span>.body.scrollTop,</span><br><span class="line">  left: rect.left + <span class="built_in">document</span>.body.scrollLeft</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).offsetParent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.offsetParent || el</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).outerHeight();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.offsetHeight</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).position();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">&#123;left: el.offsetLeft, top: el.offsetTop&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四-事件监听">四.事件监听</h2><h3 id="1-绑定事件">1.绑定事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).on(eventName, eventHandler);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.addEventListener(eventName, eventHandler,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-触发事件">2.触发事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).trigger(<span class="string">'my-event'</span>, &#123;some: <span class="string">'data'</span>&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.CustomEvent) &#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(<span class="string">'my-event'</span>, &#123;detail: &#123;some: <span class="string">'data'</span>&#125;&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'CustomEvent'</span>);</span><br><span class="line">  event.initCustomEvent(<span class="string">'my-event'</span>, <span class="literal">true</span>, <span class="literal">true</span>, &#123;some: <span class="string">'data'</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">el.dispatchEvent(event);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.proxy(fn, context);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">fn.bind(context);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).trigger(<span class="string">'change'</span>);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="comment">// For a full list of event types: https://developer.mozilla.org/en-US/docs/Web/API/document.createEvent</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'HTMLEvents'</span>);</span><br><span class="line">event.initEvent(<span class="string">'change'</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">el.dispatchEvent(event);</span><br></pre></td></tr></table></figure>
<h2 id="五-数组和对象操作">五.数组和对象操作</h2><h3 id="1-遍历数组">1.遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.each(array, <span class="function"><span class="keyword">function</span>(<span class="params">i, item</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, i</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.map(array, <span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2-扩展对象">2.扩展对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.extend(<span class="literal">true</span>, &#123;&#125;, objA, objB);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">var</span> deepExtend = <span class="function"><span class="keyword">function</span>(<span class="params">out</span>) </span>&#123;</span><br><span class="line">  out = out || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (!obj)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span>)</span><br><span class="line">          deepExtend(out[key], obj[key]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          out[key] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">deepExtend(&#123;&#125;, objA, objB);</span><br></pre></td></tr></table></figure>
<h3 id="3-数组判断和值检测">3.数组判断和值检测</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.inArray(item, array);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">array.indexOf(item)</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.isArray(arr);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr)</span><br></pre></td></tr></table></figure>
<h3 id="4-对象判断和检测">4.对象判断和检测</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.type(obj);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj).replace(<span class="regexp">/^\[object (.+)\]$/</span>, <span class="string">"$1"</span>).toLowerCase();</span><br></pre></td></tr></table></figure>
<h2 id="六-其他">六.其他</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.now();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Date</span>.now()</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.parseHTML(htmlString);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> parseHTML = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="built_in">document</span>.implementation.createHTMLDocument();</span><br><span class="line">  tmp.body.innerHTML = str;</span><br><span class="line">  <span class="keyword">return</span> tmp.body.children;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">parseHTML(htmlString);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.trim(string);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">string.trim();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一-Ajax请求">一.Ajax请求</h2><h3 id="1-get请求">1.get请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="lin]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript在IE和Firefox中的不同语法]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/javascript%E5%9C%A8IE%E5%92%8CFirefox%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E8%AF%AD%E6%B3%95/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/javascript在IE和Firefox中的不同语法/</id>
    <published>2015-06-18T08:34:13.082Z</published>
    <updated>2015-06-18T08:34:13.082Z</updated>
    <content type="html"><![CDATA[<h2 id="一-元素查找问题">一.元素查找问题</h2><ol>
<li><p>document.all[name]<br>(1)现有问题：Firefox不支持<code>document.all[name]</code><br>(2)解决方法：使用getElementsByName(name)，getElementById(id)等来替代。</p>
</li>
<li><p>集合类对象问题<br>(1)现有问题：IE中对许多集合类对象取用时可以用 ()，但在Firefox只能用[]。<br>   如：IE中可以使用<code>document.forms(&quot;formName&quot;)</code>来返回名字为”formName”的Form，但在Firefox却行不通。<br>(2)解决方法：使用[]，上例中可以改为<code>document.forms[&quot;formName&quot;]</code></p>
</li>
<li><p>HTML元素的ID在JavaScript可见<br>(1)现有问题：IE中HTML元素中的ID可以作为document的下属对象变量名直接使用。在Firefox中不能。<br>(2)解决方法：使用<code>getElementById(&quot;idName&quot;)</code>代替idName作为对象变量使用。</p>
</li>
<li><p>eval(idName)取得对象<br>(1)现有问题：在IE中，利用<code>val(idName)</code>可以取得ID为idName的HTML对象，在Firefox中不能。<br>(2)解决方法：用 <code>getElementById(idName)</code> 代替 <code>eval(idName)</code>。</p>
</li>
<li><p>变量名与某HTML对象ID相同<br>(1)现有问题：在Firefox中，因为对象ID不作为HTML对象的名称，所以可以使用与HTML对象id相同的变量名，IE中不能。<br>(2)解决方法：在声明变量时，一律加上var，以避免歧义，这样在IE中亦可正常运行。此外，最好不要取与HTML对象id相同的变量名，以减少错误。</p>
<p>注：3、4和5都属于同一类的问题。</p>
</li>
<li><p>Frame<br>(1)现有问题：在IE中可以用<code>window.top.frameId</code>和<code>window.top</code>.frameName来得到该Frame所代表的Window，Firefox中只能用<code>window.top.frameName</code>。<br>(2)解决方法：将Frame的Id和Name设置成相同，使用<code>window.top.frameName</code>来访问Frame。</p>
</li>
</ol>
<h2 id="二、DOM操作">二、DOM操作</h2><ol>
<li><p>设置元素的文本内容。<br>(1)现有问题：IE使用innerText，而Firefox使用textContent来设置元素文本内容。<br>(2)解决方法：如果文本内容不包含”&lt;”和”&gt;;”等特殊字符，可以使用innerHTML。否则，可以使用：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var child = elem.firstChild;</span><br><span class="line"><span class="keyword">if</span> <span class="params">(child != null)</span> elem.removeChild<span class="params">(child)</span>;</span><br><span class="line">   elem.appendChild<span class="params">(document.createTextNode<span class="params">(content)</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>parentElement，parent.children<br>(1)现有问题：IE可以使用parentElement获得父结点，parent.children得到结点的所有孩子结点。Firefox不支持。<br>(2)解决方法：使用parentNode和parent.childNodes。</p>
</li>
<li><p>对childNodes的解释。<br>(1)现有问题：IE和Firefox中对childNodes的解释不同，IE不会包含空白文本结点，而Firefox会包含。<br>(2)解决方法：使用childNodes过滤文本结点，如下：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">children</span> = elem.childNodes;</span><br><span class="line">    <span class="keyword">for</span> <span class="params">(i = <span class="number">0</span>; i &lt; children.length; i++)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="params">(children[i].nodeType != <span class="number">3</span>)</span> &#123; </span><br><span class="line">         <span class="comment">// 过滤文本结点</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对<code>document.getElementsByName</code>的解释。<br>(1)现有问题：IE中getElementsByName只会检查<code>&lt;input&gt;</code>;和<code>&lt;img&gt;</code>;元素，而在Firefox下会检查所有元素。<br>(2)解决方法：不要使用getElementsByName检查除<code>&lt;input&gt;</code>;和<code>&lt;img&gt;</code>之外的元素，如果要获得单个元素，尽量使用<code>getElementById</code>。</p>
</li>
<li><p>对<code>document.getElementById</code>的解释。<br>(1)现有问题：IE中getElementById不仅检查Id属性，也会检查Name属性，当Name属性匹配参数时也会返回该元素。而在Firefox中只会检查Id属性。<br>(2)解决方法：尽量保持Id和Name相同，不要让一个元素name属性和另一个元素的id属性相同。</p>
</li>
</ol>
<h2 id="三、事件">三、事件</h2><ol>
<li><p>event.x与event.y问题<br>(1)现有问题：在IE中，event对象有x,y 属性，Firefox中没有。<br>(2)解决方法：在Firefox中，与event.x 等效的是 event.pageX。可以使用：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mX = <span class="keyword">event</span>.x ? <span class="keyword">event</span>.x : <span class="keyword">event</span>.pageX;</span><br></pre></td></tr></table></figure>
</li>
<li><p>window.event<br>(1)现有问题：使用window.event无法在Firefox上运行<br>(2)解决方法： </p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evt = evt ? evt : (<span class="keyword">window</span>.<span class="keyword">event</span> ? <span class="keyword">window</span>.<span class="keyword">event</span> : null);</span><br></pre></td></tr></table></figure>
</li>
<li><p>attachEvent和addEventListener<br>(1)现有问题：IE中使用attachEvent来添加事件，Firefox中使用addEventListener。<br>(2)解决方法：如下，注意事件参数的区别，一个是click，一个是onclick。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) <span class="built_in">document</span>.attachEvent(<span class="string">"onclick"</span>, clickHandler);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>,clickHandler,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>四、语法</p>
<ol>
<li><p>const<br>(1)现有问题：在IE中不能使用const关键字。如<code>const constVar = 32;</code>在IE中这是语法错误。<br>(2)解决方法：不使用const，以var代替。</p>
</li>
<li><p>多余的逗号<br>(1)现有问题：firefox中对象文字常量容许多余的逗号，在IE中不允许。下面语句在IE中非法。<br>   <code>var obj = { &#39;key&#39; : &#39;aaa&#39;, }</code><br>(2)解决方法：去掉多余逗号。</p>
</li>
</ol>
<p>五、XML</p>
<ol>
<li>创建XMLHttpRequest<br>(1)现有问题：Firefox使用XMLHttpRequest，IE使用ActiveXObject。<br>(2)解决方法:<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">  req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">	req = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>创建DOM<br>(1)现有问题：Firefox和IE创建DOM的方式不同。<br>(2)解决方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXmlDom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> oXmlDom;</span><br><span class="line">	<span class="keyword">if</span> (Window.ActiveXObject) &#123; <span class="comment">// IE</span></span><br><span class="line">	  oXmlDom = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XmlDom"</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;  <span class="comment">// Firefox</span></span><br><span class="line">	  oXmlDom = <span class="built_in">document</span>.implementation.createDocument(<span class="string">""</span>, <span class="string">""</span>, <span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载XML<br>(1)现有问题：如果要加载外部文件IE和Firefox都可以用:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oXmlDom.<span class="keyword">async</span>=<span class="keyword">false</span>;      <span class="comment">// 这在Firefox中是必须的</span></span><br><span class="line">oXmlDom.load(<span class="string">"test.xml"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>但是它们加载xml字符串的方式不一样，IE中直接可以使用<code>oXmlDom.loadXML(&quot;&lt;root&gt;;&lt;child/&gt;;&lt;/root&gt;;&quot;)</code>，而Firefox要使用<code>DOMParser</code>:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> oParser</span> = new DOMParser();</span><br><span class="line"><span class="variable"><span class="keyword">var</span> oXmlDom</span> = oParser.parseFromString(<span class="string">"&lt;root/&gt;;"</span>, <span class="string">"text/xml"</span>);</span><br></pre></td></tr></table></figure></p>
<p>  (2)解决方法：比较好的方法是给Firefox产生的XMLDom加上loadXML方法：<br>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFirefox) &#123; <span class="comment">// 需要浏览器检测</span></span><br><span class="line">    Document.prototype.loadXML = <span class="function"><span class="keyword">function</span><span class="params">(sXml)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> oParser = <span class="keyword">new</span> DOMParser();</span><br><span class="line">      <span class="keyword">var</span> oXmlDom = oParser.parseFromString(sXml, <span class="string">"text/xml"</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">this</span>.firstChild) <span class="keyword">this</span>.removeChild(<span class="keyword">this</span>.firstChild); </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oXmlDom.childNodes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> oNewNode = <span class="keyword">this</span>.importNode(oXmlDom.childNodes[i], <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.appendChild(oNewNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>  这样在IE和Firefox就可以调用loadXML方法了。 </p>
<ol>
<li><p>XPath支持<br>(1)现有问题：IE中可以直接用XmlDOM的selectNodes来根据XPath表示式来选择结点，Firefox则比较复杂，需要使用XPathEvaluator。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IE: </span></span><br><span class="line"><span class="keyword">var</span> lstNodes = oXmlDom.documentElement.selectNodes(<span class="string">"employee/name"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lstNodes.length; i++) &#123;</span><br><span class="line">  alert(lstNodes[i].firstChild.nodeValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Firefox: </span></span><br><span class="line"><span class="keyword">var</span> oEvaluator = <span class="keyword">new</span> XPathEvaluator();</span><br><span class="line"><span class="keyword">var</span> oResult = oEvaluator.evaluate(<span class="string">"employee/name"</span>, oXmlDom.documentElement, <span class="literal">null</span>, XPathResult.ORDERED_NODE_ITERATOR_TYPE, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> oElement = oResult.iterateNext();</span><br><span class="line"><span class="keyword">while</span> (oElement) &#123;</span><br><span class="line">  alert(oElement.firstChild.nodeValue);</span><br><span class="line">  oElement = oResult.iterateNext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2)解决方法：比较好的方法给Firefox的Element添加selectNodes方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (isFirefox) &#123; <span class="comment">// 需要浏览器检测</span></span><br><span class="line">    Element.prototype.selectNodes = <span class="function"><span class="keyword">function</span>(<span class="params">sXPath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oEvaluator = <span class="keyword">new</span> XPathEvaluator();</span><br><span class="line">      <span class="keyword">var</span> oResult = oEvaluator.evaluate(sXPath, <span class="keyword">this</span>, <span class="literal">null</span>, XPathResult.ORDERED_NODE_ITERATOR_TYPE,<span class="literal">null</span>); </span><br><span class="line">      <span class="keyword">var</span> aNodes = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">      <span class="keyword">if</span> (oResult != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> oElement = oResult.iterateNext();</span><br><span class="line">        <span class="keyword">while</span> (oElement) &#123;</span><br><span class="line">          aNodes.push(oElement);</span><br><span class="line">          oElement = oResult.iterateNext();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> aNodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这样在IE和Firefox中就都可以调用selectNodes方法了。 </p>
<ol>
<li><p>XSLT支持<br>(1)现有问题：IE中可以使用XmlDOM的transferNode方法将其转换成html，而Firefox需要使用XSLTProcessor。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IE:</span></span><br><span class="line">oXmlDom.load(<span class="string">"employee.xml"</span>);</span><br><span class="line">oXslDom.load(<span class="string">"employee.xslt"</span>);</span><br><span class="line"><span class="variable"><span class="keyword">var</span> sResult</span>=oXmlDom.transformNode(oXslDom);</span><br><span class="line"><span class="comment">//Firefox:</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> oProcessor</span> = new XSLTProcessor();</span><br><span class="line">oProcessor.importStylesheet(oXslDom);</span><br><span class="line"><span class="variable"><span class="keyword">var</span> oResultDom</span> = oProcessor.transformToDocument(oXmlDom);        </span><br><span class="line"><span class="variable"><span class="keyword">var</span> oSerializer</span> = new XMLSerializer();</span><br><span class="line"><span class="variable"><span class="keyword">var</span> sXml</span> = oSerializer.serializeToString(oResultDom, <span class="string">"text/xml"</span>);</span><br><span class="line">alert(sXml);</span><br></pre></td></tr></table></figure>
<p>(2)解决方法：比较好的方法给Firefox的Node添加transferNode方法。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFirefox) &#123; </span><br><span class="line">	<span class="comment">// 需要浏览器检测</span></span><br><span class="line">	Node.prototype.transformNode = <span class="function"><span class="keyword">function</span><span class="params">(oXslDom)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> oProcessor = <span class="keyword">new</span> XSLTProcessor();</span><br><span class="line">	  oProcessor.importStylesheet(oXslDom);</span><br><span class="line">	  <span class="keyword">var</span> oResultDom = oProcessor.transformToDocument(oXmlDom);</span><br><span class="line">	  </span><br><span class="line">	  <span class="keyword">var</span> oSerializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line">	  <span class="keyword">var</span> sXml = oSerializer.serializeToString(oResultDom, <span class="string">"text/xml"</span>);</span><br><span class="line">	  </span><br><span class="line">	  <span class="keyword">return</span> sXml;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在IE和Firefox中就都可以调用transferNode方法了。</p>
</li>
</ol>
<h2 id="其他：">其他：</h2><p>1.窗体的高度和宽度    </p>
<p>IE：<code>document.body.offsetWidth</code>和<code>document.body.offsetHeight</code>。注意：此时页面一定要有body标签。<br>FF：<code>window.innerWidth和window.innerHegiht</code>，<br>以及<code>document.documentElement.clientWidth</code>和<code>document.documentElement.clientHeight</code>。<br>通用：<code>document.body.clientWidth</code>和<code>document.body.clientHeight</code>。    </p>
<p>2.标签的自定义属性   </p>
<p>IE：如果给标签div1定义了一个属性value，可以div1.value和div1[“value”]取得该值。<br>FF：不能用div1.value和div1[“value”]取。<br>通用：div1.getAttribute(“value”)。    </p>
<p>3.用idName字符串取得对象的问题<br>(1)现有问题<br>     在IE中，利用 eval(idName) 可以取得 id 为 idName 的 HTML 对象，在MF 中不能。<br>(2)解决方法<br>     用 getElementById(idName) 代替 eval(idName)。   </p>
<p>4.变量名与某 HTML 对象 id 相同的问题<br>(1)现有问题<br>    在 MF 中，因为对象 id 不作为 HTML 对象的名称，所以可以使用与 HTML 对象 id 相同的变量名，IE 中不能。<br>(2)解决方法<br>    在声明变量时，一律加上 var ，以避免歧义，这样在 IE 中亦可正常运行。<br>    此外，最好不要取与 HTML 对象 id 相同的变量名，以减少错误。   </p>
<p>5.<code>document.getElementsByName()</code> 和 <code>document.all[name]</code> 的问题<br>现有问题：在 IE 中，getElementsByName()、document.all[name] 均不能用来取得 div 元素<br>（是否还有其它不能取的元素还不知道）。<br>//document.all<br>Firefox可以兼容document.all， 但会生成一条警告。可以用getElementById(“<em>“)<br>或者 getElementByTagName(“</em>“)来代替<br>不过对于document.all.length等属性，则完全不兼容   </p>
<p>6.input.type属性问题<br>说明:IE下input.type属性为只读;但是Firefox下input.type属性为读写   </p>
<p>7.frame问题<br>以下面的frame为例：<br><code>&lt;frame src=&quot;xxx.html&quot; mce_src=&quot;xxx.html&quot; id=&quot;frameId&quot; name=&quot;frameName&quot; /&gt;</code><br>(1)访问frame对象:<br>IE:使用window.frameId或者window.frameName来访问这个frame对象. frameId和frameName可以同名。<br>FF:只能使用window.frameName来访问这个frame对象.<br>另外，在IE和Firefox中都可以使用window.document.getElementById(“frameId”)来访问这个frame对象.<br>(2)切换frame内容:<br>在IE和Firefox中都可以使用<code>window.document.getElementById(&quot;testFrame&quot;).src = &quot;xxx.html&quot;</code><br>或<code>window.frameName.location = &quot;xxx.html&quot;</code>来切换frame的内容.<br>如果需要将frame中的参数传回父窗口(注意不是opener,而是parent frame)，可以在frme中使用parent来访问父窗口。<br>例如：<code>window.parent.document.form1.filename.value=&quot;Aqing&quot;</code>;    </p>
<p>8.事件委托方法<br>IE：<code>document.body.onload = inject; //Function inject()</code>在这之前已被实现<br>FF：<code>document.body.onload = inject();</code>    </p>
<p>9.innerText在IE中能正常工作，但是innerText在FireFox中却不行. 需用textContent   </p>
<p>10.父节点、子节点和删除节点<br>IE：<code>parentElement</code>、<code>parement.children</code>，<code>element.romoveNode(true)</code>。<br>FF：<code>parentNode</code>、<code>parentNode.childNodes</code>，<code>node.parentNode.removeChild(node)</code>。    </p>
<p>11.对select的options集合操作<br>枚举元素除了[]外，<code>SelectName.options.item()</code>也是可以的, 另外<code>SelectName.options.length</code>,<br><code>SelectName.options.add/remove</code>都可以在两种浏览器上使用。<br>注意在add后赋值元素，否则会失败<br>动态删除select中的所有options：<br>       <code>document.getElementById(&quot;ddlResourceType&quot;).options.length=0;</code><br>动态删除select中的某一项option：<br>       <code>document.getElementById(&quot;ddlResourceType&quot;).options.remove(indx);</code><br>动态添加select中的项option:<br>       <code>document.getElementById(&quot;ddlResourceType&quot;).options.add(new Option(text,value));</code><br>IE FF 动态删除通用方法：<br><code>document.getElementById(&quot;ddlResourceType&quot;).options[indx] = null;</code>  </p>
<p>12.捕获事件<br>问题：<br>FF没有setCapture()、releaseCapture()方法<br>解决方法：<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE:    </span></span><br><span class="line">obj.setCapture<span class="params">()</span>;    </span><br><span class="line">obj.releaseCapture<span class="params">()</span>;    </span><br><span class="line"><span class="comment">// FF:    </span></span><br><span class="line">window.captureEvents<span class="params">(Event.MOUSEMOVE|Event.MOUSEUP)</span>;    </span><br><span class="line">window.releaseEvents<span class="params">(Event.MOUSEMOVE|Event.MOUSEUP)</span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="params">(!window.captureEvents)</span> &#123;    </span><br><span class="line">	o.setCapture<span class="params">()</span>;    </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;    </span><br><span class="line">	window.captureEvents<span class="params">(Event.MOUSEMOVE|Event.MOUSEUP)</span>;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">if</span> <span class="params">(!window.captureEvents)</span> &#123;    </span><br><span class="line">	o.releaseCapture<span class="params">()</span>;    </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;    </span><br><span class="line">	window.releaseEvents<span class="params">(Event.MOUSEMOVE|Event.MOUSEUP)</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13.禁止选取网页内容<br>问题：<br>FF需要用CSS禁止，IE用JS禁止<br>解决方法：<br>IE: <code>obj.onselectstart = function() {return false;}</code><br>FF: <code>-moz-user-select:none;</code><br>1４. CSS “float” 值<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"header"</span>).style.styleFloat = <span class="string">"left"</span>; <span class="comment">//IE</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"header"</span>).style.cssFloat = <span class="string">"left"</span>; <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１５. 元素的推算样式<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"header"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myStyle</span> = myObject.currentStyle.backgroundColor; <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"header"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myComputedStyle</span> = document.defaultView.getComputedStyle(myObject, <span class="literal">null</span>); </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myStyle</span> = myComputedStyle.backgroundColor;  <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１６. 访问元素的”class”<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"header"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myAttribute</span> = myObject.getAttribute(<span class="string">"className"</span>); <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"header"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myAttribute</span> = myObject.getAttribute(<span class="string">"class"</span>); <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１７. 访问<code>&lt;label&gt;</code>标签中的”for”<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"myLabel"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myAttribute</span> = myObject.getAttribute(<span class="string">"htmlFor"</span>); <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span></span> = document.getElementById(<span class="string">"myLabel"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myAttribute</span> = myObject.getAttribute(<span class="string">"for"</span>); <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１８. 获取鼠标指针的位置<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCursorPosition = [<span class="number">0</span>, <span class="number">0</span>];   </span><br><span class="line">myCursorPosition[<span class="number">0</span>] = <span class="keyword">event</span>.clientX;   </span><br><span class="line">myCursorPosition[<span class="number">1</span>] = <span class="keyword">event</span>.clientY; <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myCursorPosition = [<span class="number">0</span>, <span class="number">0</span>];   </span><br><span class="line">myCursorPosition[<span class="number">0</span>] = <span class="keyword">event</span>.pageX;   </span><br><span class="line">myCursorPosition[<span class="number">1</span>] = <span class="keyword">event</span>.pageY; <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１９. 获取可见区域、窗口的大小<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBrowserSize = [<span class="number">0</span>, <span class="number">0</span>];   </span><br><span class="line">myBrowserSize[<span class="number">0</span>] = <span class="built_in">document</span>.documentElement.clientWidth;   </span><br><span class="line">myBrowserSize[<span class="number">1</span>] = <span class="built_in">document</span>.documentElement.clientHeight; <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myBrowserSize = [<span class="number">0</span>, <span class="number">0</span>];   </span><br><span class="line">myBrowserSize[<span class="number">0</span>] = <span class="built_in">window</span>.innerWidth;   </span><br><span class="line">myBrowserSize[<span class="number">1</span>] = <span class="built_in">window</span>.innerHeight;<span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一-元素查找问题">一.元素查找问题</h2><ol>
<li><p>document.all[name]<br>(1)现有问题：Firefox不支持<code>document.all[name]</code><br>(2)解决方法：使用getElementsB]]>
    </summary>
    
      <category term="browser" scheme="http://fire17643.github.io/blog/tags/browser/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript定义类的几种方式]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/JavaScript%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/JavaScript定义类的几种方式/</id>
    <published>2015-06-18T08:20:41.145Z</published>
    <updated>2015-06-18T08:20:41.145Z</updated>
    <content type="html"><![CDATA[<h2 id="1-工厂方式">1.工厂方式</h2><p>javaScript中创建自己的类和对象，我们应该是必须掌握的，我们都知道javaScript中对象的属性可以在对象创建后动态定义，比如下面的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oCar = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">oCar.color = <span class="string">"red"</span>;</span><br><span class="line">oCar.doors = <span class="number">4</span>;</span><br><span class="line">oCar.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">oCar.showColor();</span><br></pre></td></tr></table></figure></p>
<p>我们很容易使用oCar对象，但是我们创就是想创建多个Car实例。我们可以使用一个函数来封装上面的代码来实现<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oCar = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    oCar.color = <span class="string">"red"</span>;</span><br><span class="line">    oCar.doors = <span class="number">4</span>;</span><br><span class="line">    oCar.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ocar1 = createCar();</span><br><span class="line"><span class="keyword">var</span> ocar2 = createCar();</span><br><span class="line">ocar1.color = <span class="string">"black"</span>;</span><br><span class="line">ocar1.showColor();</span><br><span class="line">ocar2.showColor();</span><br></pre></td></tr></table></figure></p>
<p>顺便说一下，javaScript对象默认成员属性都是public 的。这种方式我们称为工厂方式，我们创造了能创建并返回特定类型的对象的工厂。这样做有点意思了，但是在面向对象中我们经常使用创建对象的方法是：Car car=new Car();使用new 关键字已经深入人心，因此我们使用上面的方法去定义总感觉别扭，并且每次调用时都去创建新的属性以及函数，功能上也不实际。下来我们看看构造函数的形式定义类。</p>
<h2 id="2．构造函数">2．构造函数</h2><p>这种方式看起来有点象工厂函数。具体表现如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color, doors</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.doors = doors;</span><br><span class="line">    <span class="keyword">this</span>.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.color);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car(<span class="string">"red"</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> car2 = <span class="keyword">new</span> Car(<span class="string">"blue"</span>, <span class="number">4</span>);</span><br><span class="line">car1.showColor();</span><br><span class="line">car2.showColor();</span><br></pre></td></tr></table></figure></p>
<p>看起来效果很明显，有差别了吧。感觉有点意思了。在构造函数内部创造对象使用this 关键字，使用new 运算符创建对象感觉非常亲切。但是也有点问题：每次new 对象时都会创建所有的属性，包括函数的创建，也就是说多个对象完全独立，我们定义类的目的就是为了共享方法以及数据，但是car1对象与car2对象都是各自独立的属性与函数，最起码我们应该共享方法。这就是原形方式的优势所在。</p>
<h2 id="3．原型方式">3．原型方式</h2><p>利用对象的prototype属性，可把它看出创建新对象所依赖的原型。方法如下：<br> <figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span><span class="params">()</span> &#123;</span>&#125;;</span><br><span class="line">Car.prototype.<span class="built_in">color</span> = <span class="string">"red"</span>;</span><br><span class="line">Car.prototype.doors = <span class="number">4</span>;</span><br><span class="line">Car.prototype.drivers = new Array<span class="params">(<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>)</span>;</span><br><span class="line">Car.prototype.showColor = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    alert<span class="params">(this.color)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line">var car1 = new Car<span class="params">()</span>;</span><br><span class="line">var car2 = new Car<span class="params">()</span>;</span><br><span class="line">car1.showColor<span class="params">()</span>;</span><br><span class="line">car2.showColor<span class="params">()</span>;</span><br><span class="line">alert<span class="params">(car1.drivers)</span>;</span><br><span class="line">car1.drivers.push<span class="params">(<span class="string">"stephen"</span>)</span>;</span><br><span class="line">alert<span class="params">(car1.drivers)</span>; <span class="comment">//结果：Tom,Jerry,stephen</span></span><br><span class="line">alert<span class="params">(car2.drivers)</span>; <span class="comment">//结果：Tom,Jerry,stephen</span></span><br><span class="line"><span class="comment">//可以用json方式简化prototype的定义:</span></span><br><span class="line">Car.prototype = &#123;</span><br><span class="line">    <span class="built_in">color</span>: <span class="string">"red"</span>,</span><br><span class="line">    doors: <span class="number">4</span>,</span><br><span class="line">    drivers: [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>,'safdad'],</span><br><span class="line">    showColor: <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">        alert<span class="params">(this.color)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先这段代码的构造函数，其中没有任何代码，接下来通过对象的prototype属性添加属性定义Car对象的属性。这种方法很好，但是问题是Car的对象指向的是Array指针，Car的两个对象都指向同一个Array数组，其中一个对象car1改变属性对象的引用（数组Array）时，另一个对象car2也同时改变，这是不允许的。同时该问题也表现在原型不能带任何初始化参数，导致构造函数无法正常初始化。这需要另一种方式来解决：那就是混合的构造函数/原型模式。</p>
<h2 id="4-_混合的构造函数/原型模式">4. 混合的构造函数/原型模式</h2><p>联合使用构造函数和原型方式，定义类就非常方便。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,doors</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color=color;</span><br><span class="line">    <span class="keyword">this</span>.doors=doors;</span><br><span class="line">    <span class="keyword">this</span>.drivers=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Tom"</span>,<span class="string">"Jerry"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Car.prototype.showColor=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line"><span class="keyword">var</span> car1=<span class="keyword">new</span> Car(<span class="string">'red'</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> car2=<span class="keyword">new</span> Car(<span class="string">'blue'</span>,<span class="number">4</span>);</span><br><span class="line">car1.showColor();</span><br><span class="line">car2.showColor();</span><br><span class="line">alert(car1.drivers);</span><br><span class="line">car1.drivers.push(<span class="string">"stephen"</span>);</span><br><span class="line">alert(car1.drivers); <span class="comment">//结果：Tom,Jerry,stephen</span></span><br><span class="line">alert(car2.drivers); <span class="comment">//结果：Tom,Jerry</span></span><br><span class="line">alert(car1 <span class="keyword">instanceof</span> Car);</span><br></pre></td></tr></table></figure></p>
<p>该方法是把属性放在内部定义，把方法放在外边利用prototype进行定义。解决了第三种方法的问题。<br>这种方法其实应该来说非常友好了，但是比起java的语法来，应该有一些不和谐，感觉比较凌乱，对C++来说，我们就没有那么麻烦的感觉了，可是开发C++的研发人员一般情况下很少涉及javaScript，而对J2EE的研发人员来说，这种方式总有一些别扭。总感觉不是友好的封装，其实只不过是视觉上封装效果不是很好而已，要想达到视觉封装效果而又能达到这种方法的效果的也可以以，个人认为其实比较麻烦。那就是动态原型法。</p>
<h2 id="5-动态原型">5.动态原型</h2><p>对于习惯使用其他语言的开发者来说，使用混合的构造函数/原型方式感觉不那么和谐。毕竟，定义类时，大多数面向对象语言都对属性和方法进行了视觉上的封装。考虑下面的C#类：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> color = <span class="string">"red"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> doors = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mpg = <span class="number">23</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span>(<span class="params"><span class="keyword">string</span> color, <span class="keyword">int</span> doors, <span class="keyword">int</span> mpg</span>) <span class="comment">//constructor</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.doors = doors;</span><br><span class="line">        <span class="keyword">this</span>.mpg = mpg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C#很好的打包了Car类的所有属性和方法，因此看见这段代码就知道它要实现什么功能，它定义了一个对象的信息。批评混合的构造函数/原型方式的人认为，在构造函数内存找属性，在其外部找方法的做法不合逻辑。因此，他们设计了动态原型方法，以提供更友好的编码风格。<br>动态原型方法的基本想法与混合的构造函数/原型方式相同，即在构造函数内定义非函数属性，而函数属性则利用原型属性定义。唯一的区别是赋予对象方法的位置。下面是用动态原型方法重写的Car类：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">"red"</span>;</span><br><span class="line">    <span class="keyword">this</span>.doors = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">this</span>.drivers = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> Car._initialized == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        Car.prototype.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.color);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Car._initialized = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>直到检查typeof Car._initialized是否等于”undefined”之前，这个构造函数都未发生变化。这行代码是动态原型方法中最重要的部分。如果这个值未定义，构造函数将用原型方式继续定义对象的方法，然后把Car._initialized设置为true。如果这个值定义了（它的值为true时，typeof的值为Boolean），那么就不再创建该方法。简而言之，该方法使用标志（_initialized）来判断是否已给原型赋予了任何方法。该方法只创建并赋值一次，为取悦传统的OOP开发者，这段代码看起来更像其他语言中的类定义了。</p>
<h2 id="6_混合工厂方式">6  混合工厂方式</h2><p>这种方式通常是在不能应用前一种方式时的变通方法。它的目的是创建假构造函数，只返回另一种对象的新实例。这段代码看来与工厂函数非常相似：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> oTempCar = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">   oTempCar.color=<span class="string">"red"</span>;</span><br><span class="line">   oTempCar.doors=<span class="number">4</span>;</span><br><span class="line">   oTempCar.mpg=<span class="number">23</span>;</span><br><span class="line">   oTempCar.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       alert(<span class="keyword">this</span>.color);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> oTempCar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>与经典方式不同，这种方式使用new运算符，使它看起来像真正的构造函数：<br>var oCar = new Car();<br>由于在Car()构造函数内部调用了new运算符，所以将忽略第二个new运算符（位于构造函数之外）。在构造函数内部创建的对象被传递回变量var。这种方式在对象方法的内部管理方面与经典方式有着相同的问题。强烈建议：除非万不得已（请参阅第15章），还是避免使用这种方式。<br>总结：（采用哪种方式)<br>目前使用最广泛的是混合的构造函数/原型方式。此外，动态原型方法也很流行，在功能上与构造函数/原型方式等价。可以采用这两种方式中的任何一种。不过不要单独使用经典的构造函数或原型方式，因为这样会给代码引入问题。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static class (1:function)</span></span><br><span class="line">    <span class="keyword">var</span> CarCollection = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _carCollection = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//global,private</span></span><br><span class="line">        <span class="keyword">this</span>.Add = <span class="function"><span class="keyword">function</span>(<span class="params">objCar</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'Add'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.Get = <span class="function"><span class="keyword">function</span>(<span class="params">carid</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'Get'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//static class (2:json)</span></span><br><span class="line">    <span class="keyword">var</span> Car = &#123;</span><br><span class="line">        color: <span class="string">'red'</span>,</span><br><span class="line">        doors: <span class="number">4</span>,</span><br><span class="line">        showColor: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.color); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Car.showColor();</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-工厂方式">1.工厂方式</h2><p>javaScript中创建自己的类和对象，我们应该是必须掌握的，我们都知道javaScript中对象的属性可以在对象创建后动态定义，比如下面的代码<br><figure class="highlight javascri]]>
    </summary>
    
      <category term="原型" scheme="http://fire17643.github.io/blog/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript浮点数相乘]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/Javascript%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9B%B8%E4%B9%98/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/Javascript中的浮点数相乘/</id>
    <published>2015-06-18T07:11:30.751Z</published>
    <updated>2015-06-18T07:11:30.751Z</updated>
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> FxF(f1, f2) &#123;</span><br><span class="line">    f1 += <span class="string">''</span>;</span><br><span class="line">    f2 += <span class="string">''</span>;</span><br><span class="line">    var f1Len = f1.split(<span class="string">'.'</span>)[<span class="number">1</span>].length,</span><br><span class="line">        f2Len = f2.split(<span class="string">'.'</span>)[<span class="number">1</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (f1Len) &#123;</span><br><span class="line">        f1 = f1.replace(<span class="string">'.'</span>, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f2Len) &#123;</span><br><span class="line">        f2 = f2.replace(<span class="string">'.'</span>, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> f1 * f2 / Math.pow(<span class="number">10</span>, f1Len + f2Len);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class=]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript 小经验]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/Javascript%20%E5%B0%8F%E7%BB%8F%E9%AA%8C/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/Javascript 小经验/</id>
    <published>2015-06-18T05:58:12.829Z</published>
    <updated>2015-06-18T05:58:12.829Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>在创建img时，src不要设置为空或者#，否则会对页面再次发生请求，建议设置为about:blank;</p>
</li>
<li><p>逻辑运算符&amp;&amp;和||的”短路”原理，如&amp;&amp;中第一个表达式为假就不会去处理第二个表达式，而||正好相反。在js中有意思的是它们的返回值：<br>例：var attr = true &amp;&amp; 4 &amp;&amp; “aaa”;那么运行的结果attr就不是简单的true或这false，而是”aaa” 。<br>例：var Yahoo = Yahoo||{};经常用来判断一个变量是否已定义，如果没有定义就给他一个初始值。<br>那么，可以这样优化代码：if(a &gt;=5){alert(“你好”);}可以写成：a &gt;= 5 &amp;&amp; alert(“你好”);<br>注：js中||和&amp;&amp;的特性帮我们精简了代码的同时，也带来了代码可读性的降低</p>
</li>
<li><p>当发出的请求未收到response时，刷新页面，firefox和chrome会自动中断请求，而IE不会，所以在模拟长连接时多次刷新页面就会因为积累太多请求而遇到IE并发请求数的瓶颈，需要在触发beforeunload事件时手动abort请求来解决</p>
</li>
<li><p>Android 2.2 webkit新APIs：navigator.connection.type可以判断当前网络连接的类型；navigator.onLine检测设备是否联网；navigator.isApplicationInstalled检测是否安装某一个本地应用</p>
</li>
<li><p>Keep in mind that primitive operations can be faster than function calls. Use VanillaJS.<br>For example, instead of using…</p>
  <figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var min = Math.min(a,b)<span class="comment">; </span></span><br><span class="line"><span class="keyword">A</span>.push(v)<span class="comment">;</span></span><br><span class="line">// use:</span><br><span class="line">var min = a &lt; b ? a : b<span class="comment">; </span></span><br><span class="line"><span class="keyword">A</span>[<span class="keyword">A</span>.length] = v<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属于数组的’join’进行字符串拼接</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span><span class="params">(messages)</span> &#123;</span></span><br><span class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">length</span>; i++) &#123;</span><br><span class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages<span class="matrix">[i].</span>message + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span><span class="params">(messages)</span> &#123;</span></span><br><span class="line">  items = <span class="matrix">[]</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">length</span>; i++) &#123;</span><br><span class="line">    items<span class="matrix">[i]</span> = messages<span class="matrix">[i].</span>message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;&lt;li&gt;'</span> + <span class="transposed_variable">items.</span>join(<span class="string">'&lt;/li&gt;&lt;li&gt;'</span>) + <span class="string">'&lt;/li&gt;&lt;/ul&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Assign methods to the prototype object, instead of overwriting the prototype with a new object. Overwriting the prototype makes inheritance impossible: by resetting the prototype you’ll overwrite the base!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Jedi</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'new jedi'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">Jedi.prototype = &#123;</span><br><span class="line">  fight: <span class="keyword">function</span> <span class="function"><span class="title">fight</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'fighting'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  block: <span class="keyword">function</span> <span class="function"><span class="title">block</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'blocking'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">Jedi.prototype.fight = <span class="keyword">function</span> <span class="function"><span class="title">fight</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'fighting'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.block = <span class="keyword">function</span> <span class="function"><span class="title">block</span></span>() &#123;</span><br><span class="line">  console.log(<span class="string">'blocking'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>在创建img时，src不要设置为空或者#，否则会对页面再次发生请求，建议设置为about:blank;</p>
</li>
<li><p>逻辑运算符&amp;&amp;和||的”短路”原理，如&amp;&amp;中第一个表达式为假就不会去处理第二个表达式，]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[js缓动效果]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/js%E7%BC%93%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/js缓动效果/</id>
    <published>2015-06-18T02:13:33.274Z</published>
    <updated>2015-06-18T02:13:33.274Z</updated>
    <content type="html"><![CDATA[<h2 id="没有加速度的线性运动">没有加速度的线性运动</h2><p>数学公式为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span>=x</span><br></pre></td></tr></table></figure></p>
<p>js实现如下</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AnimationTimer.makeLinear = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(percentComplete)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> percentComplete;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="逐渐加速的缓入运动">逐渐加速的缓入运动</h2><p>数学公式为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span>=x2</span><br></pre></td></tr></table></figure></p>
<p>js实现如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AnimationTimer.makeEaseIn = <span class="function"><span class="keyword">function</span> (<span class="params">strength</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">percentComplete</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.pow(percentComplete, strength*<span class="number">2</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="逐渐减速的缓出运动">逐渐减速的缓出运动</h2><p>数学公式为<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f<span class="list">(<span class="keyword">x</span>)</span>=1-<span class="list">(<span class="number">1</span>-x)</span><span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>js实现如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AnimationTimer.makeEaseOut = <span class="function"><span class="keyword">function</span> (<span class="params">strength</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">percentComplete</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.pow(<span class="number">1</span> - percentComplete, strength*<span class="number">2</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="缓入缓出运动">缓入缓出运动</h2><p>数学公式为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span><span class="params">(x)</span></span>=<span class="function"><span class="title">x-sin</span><span class="params">(x*<span class="number">2</span>π)</span></span>/(<span class="number">2</span>π)</span><br></pre></td></tr></table></figure></p>
<p>js实现如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AnimationTimer.makeEaseInOut = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">percentComplete</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> percentComplete - <span class="built_in">Math</span>.sin(percentComplete*<span class="number">2</span>*<span class="built_in">Math</span>.PI) / (<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="弹簧运动">弹簧运动</h2><p>数学公式为<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f<span class="list">(<span class="keyword">x</span>)</span>=<span class="list">(<span class="number">1</span>-cos<span class="list">(<span class="keyword">x*Npasses</span> <span class="variable">* π) *</span> <span class="list">(<span class="number">1</span>-π)</span>)</span>+x</span></span><br></pre></td></tr></table></figure></p>
<p>Npassed表示运动物体穿越中轴的次数。</p>
<p>js实现如下<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AnimationTimer.makeElastic = <span class="function"><span class="keyword">function</span> <span class="params">(passes)</span> &#123;</span></span><br><span class="line">   passes = passes || <span class="number">3</span>;</span><br><span class="line">   return <span class="function"><span class="keyword">function</span> <span class="params">(percentComplete)</span> &#123;</span></span><br><span class="line">       return <span class="params">(<span class="params">(<span class="number">1</span>-Math.cos<span class="params">(percentComplete * Math.<span class="literal">PI</span> * passes)</span>)</span> *</span><br><span class="line">               <span class="params">(<span class="number">1</span> - percentComplete)</span>)</span> + percentComplete;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="弹跳运动">弹跳运动</h2><p>Nbounces表示运动物体被弹起的总次数，</p>
<p>弹起的次数为偶数的时候，数学公式为：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f<span class="list">(<span class="keyword">x</span>)</span>=<span class="list">(<span class="number">1</span>=cos<span class="list">(<span class="keyword">x</span> <span class="variable">* Nbounces *</span> π)</span> <span class="variable">* (1-π))+x</span></span></span><br></pre></td></tr></table></figure></p>
<p>弹起的次数为奇数的时候，数学公式为：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f<span class="list">(<span class="keyword">x</span>)</span>=2-<span class="list">(<span class="list">(<span class="list">(<span class="number">1</span>-cos<span class="list">(<span class="keyword">x</span> <span class="variable">* π *</span> Nbounces)</span>)</span> <span class="variable">* (1-x)+x)</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>js实现如下<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AnimationTimer.makeBounce = <span class="function"><span class="keyword">function</span> <span class="params">(bounces)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> fn = AnimationTimer.makeElastic(bounces);</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(percentComplete)</span> </span>&#123;</span><br><span class="line">      percentComplete = fn(percentComplete);</span><br><span class="line">      <span class="keyword">return</span> percentComplete &lt;= <span class="number">1</span> ? percentComplete : <span class="number">2</span>-percentComplete;</span><br><span class="line">   &#125;; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="没有加速度的线性运动">没有加速度的线性运动</h2><p>数学公式为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</spa]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[读读高中古文]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/17/%E9%82%A3%E4%BA%9B%E9%AB%98%E4%B8%AD%E6%97%B6%E6%9B%BE%E7%BB%8F%E8%83%8C%E5%BE%97%E7%83%82%E7%86%9F%E7%9A%84%E5%8F%A4%E6%96%87%E5%86%8D%E4%B8%80%E6%AC%A1%E8%AF%BB%E8%AF%BB%E5%90%A7%EF%BC%8C%E6%85%A2%E6%85%A2%E7%9A%84%E8%AF%BB,%E5%BE%88%E4%BA%AB%E5%8F%97/"/>
    <id>http://fire17643.github.io/blog/2015/06/17/那些高中时曾经背得烂熟的古文再一次读读吧，慢慢的读,很享受/</id>
    <published>2015-06-17T09:10:03.490Z</published>
    <updated>2015-06-17T09:10:03.490Z</updated>
    <content type="html"><![CDATA[<p></p><h2 style="text-align: center;">滕王阁序</h2><p></p>
<h3 style="text-align: center;">王勃</h3><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;南昌故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云，千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层台耸翠，上出重霄；飞阁翔丹，下临无地。鹤汀凫渚，穷岛屿之萦回，桂殿兰宫，列冈峦之体势。披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸艦迷津，青雀黄龙之轴。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。<br>遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，指吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？<br>嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见几，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志，酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空怀报国之情；阮籍猖狂，岂效穷途之哭？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;勃三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，爱宗慤之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？<br>呜呼！地不常，盛筵难再。兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引，一言均赋，四韵俱成。请洒潘江，各倾陆海云尔！<br><h2 style="text-align: center;">六国论</h2><br><h3 style="text-align: center;">苏洵</h3><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;六国破灭，非兵不利，战不善，弊在赂秦。赂秦而力亏，破灭之道也。或曰：“六国互丧，率赂秦耶？”曰：“不赂者以赂者丧，盖失强援，不能独完。故曰‘弊在赂秦’也！”。秦以攻取之外，小则获邑，大则得城，较秦之所得，与战胜而得者，其实百倍；诸侯之所亡，与战败而亡者，其实亦百倍。则秦国之所大欲，诸侯之所大患，固不在战矣。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;思厥先祖父，暴霜露，斩荆棘，以有尺寸之地。子孙视之不甚惜，举以予人，如弃草芥。今日割五城，明日割十城，然后得一夕安寝。起视四境，而秦兵又至矣。然则诸侯之地有限，暴秦之欲无厌，奉之弥繁，侵之愈急。故不战而强弱胜负已判矣。至于颠覆，理固宜然。古人云：“以地事秦，犹抱薪救火，薪不尽火不灭。”此言得之。<br>齐人未尝赂秦，终继五国迁灭，何哉？与嬴而不助五国也。五国既丧，齐亦不免矣。燕赵之君，始有远略，能守其土，义不赂秦。是故燕虽小国而后亡，斯用兵之效也。至丹以荆卿为计，始速祸焉。赵尝五战于秦，二败而三胜。后秦击赵者再，李牧连却之。洎牧以谗诛，邯郸为郡，惜其用武而不终也。且燕赵处秦革灭殆尽之际可谓智力孤危，战败而亡，诚不得已。向使三国各爱其地，齐人勿附于秦，刺客不行，良将犹在，则胜负之数，存亡之理，当与秦相较，或未易量。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;呜呼！以赂秦之地封天下之谋臣，以事秦之心，礼天下之奇才，并力西向，则吾恐秦人食之不得下咽也。悲夫！有如此之势，而为秦人积威之所劫，日削月割，以趋于亡。为国者，无使为积威之所劫哉！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;夫六国与秦皆诸侯，其势弱于秦，而犹有可以不赂而胜之之势；苟以天下之大，而从六国破亡之故事，是又在六国下矣。<br><br><h2 style="text-align: center;">兵车行</h2><br><h3 style="text-align: center;">杜甫</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;车辚辚，马萧萧，行人弓箭各在腰。耶娘妻子走相送，尘埃不见咸阳桥。牵衣顿足拦道哭，哭声直上干云霄。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;道旁过者问行人，行人但云“点行频。或从十五北防河，便至四十西营田。去时里正与裹头，归来头白还戍边。边庭流血成海水，武皇开边意未已。君不闻汉家山东二百州，千村万落生荆杞。纵有健妇把锄犁，禾生陇亩无东西。况复秦兵耐苦战，被驱不异犬与鸡。长者虽有问，役夫敢伸恨？且如今年冬，未休关西卒。县官急索租，租税从何出？信知生男恶，反是生女好。生女犹得嫁比邻，生男埋没随百草。<br>君不见青海头，古来白骨无人收。新鬼烦怨旧鬼哭，天阴雨湿声啾啾。”</p>
<p></p><h2 style="text-align: center;">陈情表</h2><p></p>
<h3 style="text-align: center;">李密</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;臣密言：臣以险衅，夙遭闵凶，生孩六月，慈父见背，行年四岁，舅夺母志。祖母刘悯臣孤弱，躬亲抚养。臣少多疾病，九岁不行，零丁孤苦，至于成立。既无叔伯，终鲜兄弟，门衰祚薄，晚有儿息。外无期功强近之亲，内无应门五尺之僮，茕茕孑立，形影相吊。而刘夙婴疾病，常在床蓐，臣侍汤药，未曾废离。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;逮奉圣朝，沐浴清化。前太守臣逵，察臣孝廉；后刺史臣荣，举臣秀才。臣以供养无主，辞不赴命。诏书特下，拜臣郎中，寻蒙国恩，除臣洗马。猥以微贱，当侍东宫，非臣陨首所能上报。臣具以表闻，辞不就职。诏书切峻，责臣逋慢；郡县逼迫，催臣上道；州司临门，急于星火。臣欲奉诏奔驰，则刘病日笃，欲苟顺私情，则告诉不许。臣之进退，实为狼狈。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;伏惟圣朝以孝治天下，凡在故老，犹蒙矜育，况臣孤苦，特为尤甚。且臣少仕伪朝，历职郎署，本图宦达，不矜名节。今臣亡国贱俘，至微至陋，过蒙拔擢，宠命优渥，岂敢盘桓，有所希冀！但以刘日薄西山，气息奄奄，人命危浅，朝不虑夕。臣无祖母，无以至今日，祖母无臣，无以终余年，祖孙二人，更相为命，是以区区不能废远。臣密今年四十有四，祖母刘今年九十有六，是臣尽节于陛下之日长，报刘之日短也。乌鸟私情，愿乞终养。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;臣之辛苦，非独蜀之人士及二州牧伯所见明知，皇天后土，实所共鉴。愿陛下矜愍愚诚，听臣微志。庶刘侥幸，保卒余年。臣生当陨首，死当结草。臣不胜犬马怖惧之情，谨拜表以闻。</p>
<p></p><h2 style="text-align: center;">赤壁赋</h2><p></p>
<h3 style="text-align: center;">苏轼</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;壬戌之秋，七月既望，苏子与客泛舟游于赤壁之下。清风徐来，水波不兴。举酒属客，诵明月之诗，歌窈窕之章。少焉，月出于东山之上，徘徊于斗牛之间。白露横江，水光接天。纵一苇之所如，凌万顷之茫然。浩浩乎如冯虚御风，而不知其所止；飘飘乎如遗世独立，羽化而登仙。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是饮酒乐甚，扣舷而歌之。歌曰：“桂棹兮兰桨，击空明兮溯流光；渺渺兮予怀，望美人兮天一方。”客有吹洞箫者，倚歌而和之。其声呜呜然，如怨如慕，如泣如诉；余音袅袅，不绝如缕，舞幽壑之潜蛟，泣孤舟之嫠妇。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;苏子愀然，正襟危坐，而问客曰：“何为其然也？”客曰：“‘月明星稀，乌鹊南飞’，此非曹孟德之诗乎？西望夏口，东望武昌，山川相缪，郁乎苍苍，此非孟德之困于周郎者乎？方其破荆州，下江陵，顺流而东也，舳舻千里，旌旗蔽空，酾酒临江，横槊赋诗，固一世之雄也，而今安在哉？况吾与子渔樵于江渚之上，侣鱼虾而友麋鹿，驾一叶之扁舟，举匏樽以相属。寄蜉蝣于天地，渺沧海之一粟，哀吾生之须臾，羡长江之无穷。挟飞仙以遨游，抱明月而长终。知不可乎骤得，托遗响于悲风。”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;苏子曰：“客亦知夫水与月乎？逝者如斯，而未尝往也；盈虚者如彼，而卒莫消长也。盖将自其变者而观之，则天地曾不能以一瞬；自其不变者而观之，则物与我皆无尽也，而又何羡乎？且夫天地之间，物各有主，苟非吾之所有，虽一毫而莫取，惟江上之情风，与山间之明月，耳得之而为声，目遇之而成色；取之无禁，用之不竭。是造物者之无尽藏也，而吾与子之所共适。”<br>客喜而笑，洗盏更酌。肴核既尽，杯盘狼藉。相与枕藉乎舟中，不知东方之既白。</p>
<p></p><h2 style="text-align: center;">触龙说赵太后</h2><p></p>
<h3 style="text-align: center;">《战国策》</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;赵太后新用事，秦急攻之。赵氏求救于齐，齐曰：“必以长安君为质，兵乃出。”太后不肯，大臣强谏。太后明谓左右：“有复言令长安君为质者，老妇必唾其面。”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;左师触詟愿见太后，太后盛气而揖之。入而徐趋，至而自谢，曰：“老臣病足，曾不能疾走，不得见久矣，窃自恕，而恐太后玉体之有所郄也，故愿望见太后。”太后曰：“老妇恃辇而行。”曰：“日食饮得无衰乎？”曰：“恃鬻耳。”曰：“老臣今者殊不欲食，乃自强步，日三四里，少益嗜食，和于身。”太后曰：“老妇不能。”太后之色稍解。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;左师公曰：“老臣贱息舒祺，最少，不肖；而臣衰，窃爱怜之。愿令得补黑衣之数，以卫王宫。没死以闻。”太后曰：“敬诺。年几何矣？”对曰：“十五岁矣。虽少，愿及未填沟壑而托之。”太后曰：“丈夫亦爱怜其少于乎？”对曰：“甚于妇人。”太后笑曰：“妇人异甚。”对曰：“老臣窃以为媪之爱燕后，贤于长安君。”曰：“君过矣！不若长安君之甚。”左师公曰：“父母之爱子，则为之计深远。媪之送燕后也，持其踵，为之泣，念悲其远也，亦哀之矣。已行，非弗思也，祭祀必祝之，祝曰：‘必勿使反。’岂非计久长，有子孙相继为王也哉？”太后曰：“然。”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;左师公曰：“今三世以前，至于赵之为赵，赵主之子孙侯者，其继有在者乎？”曰：“无有。”曰：“微独赵，诸侯有在者乎？”曰：“老妇不闻也。”“此其近者祸及身，远者及其子孙。岂人主之子孙则必不善哉？位尊而无功，奉厚而无劳，而挟重器多也。今媪尊长安君之位，而封之以膏腴之地，多予之重器，而不及今令有功于国，—旦山陵崩，长安君何以自托于赵？龙臣以媪为长安君计短也，故以为其爱不若燕后。”太后曰：“诺，恣君之所使之。”于是为长安君约车百乘，质于齐，齐兵乃出。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;子义闻之，曰：“人主之于也，骨肉之亲也，犹不能恃无功之尊，无劳之奉，而守金玉之重也，况人臣乎！”</p>
<p></p><h2 style="text-align: center;">寡人之于国也</h2><p></p>
<h3 style="text-align: center;">《孟子》</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;梁惠王曰：“寡人之于国也，尽心焉耳矣。河内凶，则移其民于河东，移其粟于河内。河东凶亦然。察邻国之政，无如寡人之用心者。邻国之民不加少，寡人之民不加多，何也？”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;孟子对曰：“王好战，请以战喻。填然鼓之，兵刃既接，弃甲曳兵而走，或百步而后止，或五十步而后止。以五十步笑百步，则何如？”曰：“不可。直不百步耳，是亦走也。”曰：“王如知此，则无望民之多于邻国也。不违农时，谷不可胜食也。数罟不入洿池，鱼鳖不可胜食也。斧斤以时入山林，材木不可胜用也。谷与鱼鳖不可胜食，材木不可胜用，是使民养生丧死无憾也。养生丧死无憾，王道之始也。五亩之宅，树之以桑，五十者可以衣帛矣。鸡豚狗彘之畜，无失其时，七十者可以食肉矣；百亩之田，勿夺其时，数口之家可以无饥矣；谨庠序之教，申之以孝悌之义，颁白者不负戴于道路矣。七十者衣帛食肉，黎民不饥不寒，然而不王者，未之有也。狗彘食人食而不知检，途有饿殍而不知发。人死，则曰：‘非我也，岁也。’是何异于刺人而杀之，曰：‘非我也，兵也。’王无罪岁，斯天下之民至焉。”</p>
<p></p><h2 style="text-align: center;">归去来兮辞</h2><p></p>
<h3 style="text-align: center;">陶潜</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;归去来兮，田园将芜胡不归！既自以心为形役，奚惆怅而独悲？悟已往之不谏，知来者之可追。实迷途其未远，觉今是而昨非。舟遥遥以轻飏，风飘飘而吹衣。问征夫以前路，恨晨光之熹微。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;乃瞻衡宇，载欣载奔。僮仆欢迎，稚子候门。三径就荒，松菊犹存。携幼入室，有酒盈樽。引壶觞以自酌，眄庭柯以怡颜。倚南窗以寄傲，审容膝之易安。园日涉以成趣，门虽设而常关。策扶老以流憩，时矫首而遐观。云无心以出岫，鸟倦飞而知还。景翳翳以将入，抚孤松而盘桓。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;归去来兮，请息交以绝遊。世与我而相违，复驾言兮焉求？悦亲戚之情话，乐琴书以消忧。农人告余以春及，将有事于西畴。或命巾车，或棹孤舟。既窈窕以寻壑，亦崎岖而经邱。木欣欣以向荣，泉涓涓而始流。善万物之得时，感吾生之行休。<br>已矣乎！寓形宇内复几时！曷不委心任去留？胡为乎遑遑欲何之？富贵非吾愿，帝乡不可期。怀良辰以孤往，或植杖而耘耔。登东皋以舒啸，临清流而赋诗。聊乘化以归尽，乐天天命复奚疑！</p>
<p></p><h2 style="text-align: center;">过秦论</h2><p></p>
<h3 style="text-align: center;">贾谊</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;秦孝公据殽函之固，拥雍州之地，君臣固守以窥周室，有席卷天下，包举宇内，囊括四海之意，并吞八荒之心。当是时也，商君佐之，内立法度，务耕织，修守战之具，外连衡而斗诸侯。于是秦人拱手而取西河之外。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;孝公既没，惠文、武、昭襄蒙故业，因遗策，南取汉中，西举巴、蜀，东割膏腴之地，北收要害之郡。诸侯恐惧，会盟而谋弱秦，不爱珍器重宝肥饶之地，以致天下之士，合从缔交，相与为一。当此之时，齐有孟尝，赵有平原，楚有春申，魏有信陵。此四君者皆明智而忠信，宽厚而爱人，尊贤而重士，约从离衡，兼韩、魏、燕、楚、齐、赵、宋、卫、中山之众。于是六国之士，有宁越、徐尚、苏秦、杜赫之属为之谋；齐明、周最、陈轸、召滑、楼缓、翟景、苏厉、乐毅之徒通其意；吴起、孙膑、带佗、倪良、王廖、田忌、廉颇、赵奢之伦制其兵。尝以十倍之地，百万之师，叩关而攻秦。秦人开关延敌，九国之师，逡巡而不敢进。秦无亡矢遗镞之费，而天下诸侯已困矣。于是从散约败，争割地而赂秦。秦有余力而制其弊，追亡逐北，伏尸百万，流血漂橹；因利乘便，宰割天下，分裂山河。强国请服，弱国入朝。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;延及孝文王、庄襄王，享国之日浅，国家无事。及至始皇，奋六世之余烈，振长策而御宇内，吞二周而亡诸侯，履至尊而制六合，执敲扑而鞭笞天下，威振四海。南取百越之地，以为桂林、象郡，百越之君，俛首系颈，委命下吏。乃使蒙恬北筑长城而守藩篱，却匈奴七百余里；胡人不敢南下而牧马，士不敢弯弓而报怨。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是废先王之道，焚百家之言，以愚黔首；隳名城，杀豪杰；收天下之兵，聚之咸阳，销锋镝，铸以为金人十二，以弱天下之民。然后践华为城，因河为池，据亿丈之城，临不测之渊以为固。良将劲弩守要害之处，信臣精卒陈利兵而谁何。天下已定，始皇之心，自以为关中之固，金城千里，子孙帝王万世之业也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;始皇既没，余威震于殊俗。陈涉，瓮牖绳枢之子，氓隶之人，而迁徙之徒也，才能不及中人，非有仲尼，墨翟之贤，陶朱、猗顿之富；蹑足行伍之间，而倔起阡陌之中，率疲弊之卒，将数百之众，转而攻秦；斩木为兵，揭竿为旗，天下云合而响应，赢粮而景从。山东豪俊遂并起而亡秦族矣。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;且夫天下非小弱也，雍州之地，崤函之固，自若也。陈涉之位，非尊于齐、楚、燕、赵、韩、魏、宋、卫、中山之君也；锄耰棘矜，非铦于钩戟长铩也；谪戍之众，非抗于九国之师也；深谋远虑，行军用兵之道，非及向时之士也。然而成败异变，功业相反也。试使山东之国与陈涉度长絜大，比权量力，则不可同年而语矣。然秦以区区之地，致万乘之势，序八州而朝同列，百有余年矣；然后以六合之家，崤函为宫；一夫作难而七庙隳，身死人手，为天下笑者，何也？仁义不施而攻守之势异也。</p>
<p></p><h2 style="text-align: center;">谏太宗十思疏</h2><p></p>
<h3 style="text-align: center;">魏徵</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;臣闻求木之长者，必固其根本；欲流之远者，必浚其泉源；思国之安者，必积其德义。源不深而望流之远，根不固而求木之长，德不厚而思国之安，臣虽下愚，知其不可，而况于明哲乎？人君当神器之重，居域中之大，不念居安思危，戒奢以俭，斯亦伐根以求木茂，塞源而欲流长也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;凡百元首，承天景命，善始者实繁，克终者盖寡。岂取之易守之难乎？盖在殷忧必竭诚以待下，既得志则纵情以傲物；竭诚则胡越为一体，傲物则骨肉为行路。虽董之以为严刑，振之以威怒，终苟免而不怀仁，貌恭而不心服。怨不在大，可畏惟人；载舟覆舟，所宜深慎。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;诚能见可欲则思知足以自戒，将有作则思知止以安人，念高危则思谦冲而自牧，惧满溢则思江海下百川，乐盘游则思三驱以为度，忧懈怠则思慎始而敬终，虑壅蔽则思虚心以纳下，惧谗邪则思正身以黜恶，恩所加则思无因喜以谬赏，罚所及则思无因怒而滥刑：总此十思，宏兹九德，简能而任之，择善而从之，则智者尽其谋，勇者竭其力，仁者播其惠，信者效其忠；文武并用，垂拱而治。何必劳神苦思，代百司之职役哉？</p>
<p></p><h2 style="text-align: center;">兰亭集序</h2><p></p>
<h3 style="text-align: center;">王羲之</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;永和九年，岁在癸丑，暮春之初，会于会稽山阴之兰亭，修禊事也。群贤毕至，少长咸集。此地有崇山峻岭，茂林修竹，又有清流激湍，映带左右，引以为流觞曲水，列坐其次，虽无丝竹管弦之盛，一觞一咏，亦足以畅叙幽情。是日也，天朗气清，惠风和畅。仰观宇宙之大，俯察品类之盛，所以游目骋怀，足以极视听之娱，信可乐也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;夫人之相与，俯仰一世，或取诸怀抱，晤言一室之内；或因寄所托，放浪形骸之外。虽取舍万殊，静躁不同，当其欣于所遇，暂得于己，快然自足，曾不知老之将至。及其所之既倦，情随事迁，感慨系之矣！向之所欣，俯仰之间，已为陈迹，犹不能不以之兴怀，况修短随化，终期于尽！古人云：“死生亦大矣”，岂不痛哉！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每览昔人兴感之由，若合一契，未尝不临文嗟悼，不能喻之于怀。固知一死生为虚诞，齐彭殇为妄作，后之视今，亦犹今之视昔，悲夫！故列叙时人，录其所述，虽世殊事异，所以兴怀，其致一也。后之览者，亦将有感于斯文。</p>
<p></p><h2 style="text-align: center;">梦游天姥吟留别</h2><p></p>
<h3 style="text-align: center;">李白</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;海客谈瀛洲，烟涛微茫信难求，越人语天姥，云霞明灭或可睹。天姥连天向天横，势拔五岳掩赤城。天台一万八千丈，对此欲倒东南倾。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我欲因之梦吴越，一夜飞渡镜湖月。湖月照我影，送我至剡溪。谢公宿外今尚在，渌水荡漾清猿啼。脚著谢公屐，身登青云梯。半壁见海日，空中闻天鸡。千岩万转路不定，迷花倚石忽已暝。熊咆龙吟殷岩泉，栗深林兮惊层巅。云青青兮欲雨，水澹澹兮生烟。列缺霹雳，丘峦崩摧，洞天石扉，訇然中开。青冥浩荡不见底，日月照耀金银台。霓为衣兮风为马，云之君兮纷纷而来下。虎鼓瑟兮鸾回车，仙之人兮列如麻。忽魂悸以魄动，怳惊起而长嗟。惟觉时之枕席，失向来之烟霞。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;世间行乐亦如此，古来万事东流水。别君去兮何时还？且放白鹿青崖间，须行即骑访名山。安能摧眉折腰事权贵，使我不得开心颜！</p>
<p></p><h2 style="text-align: center;">屈原列传（节选）</h2><p></p>
<h3 style="text-align: center;">司马迁</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;屈原者，名平，楚之同姓也。为楚怀王左徒。博闻强志，明于治乱，娴于辞令。入则与王图议国事，以出号令；出则接遇宾客，应对诸侯。王甚任之。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上官大夫与之同列，争宠而心害其能。怀王使屈原造为宪令，屈平属草稿未定，上官大夫见而欲夺之，屈平不与。因谗之曰：“王使屈平为令，众莫不知。每一令出，平伐其功，曰：以为‘非我莫能为’也。”王怒而疏屈平。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;屈平疾王听之不聪也，谗谄之蔽明也，邪曲之害公也，方正之不容也，故忧愁幽思而作《离骚》。“离骚”者，犹离忧也。夫天者，人之始也；父母者，人之本也。人穷则反本，故劳苦倦极，未尝不呼天也；疾痛惨怛，未尝不呼父母也。屈平正道直行，竭忠尽智，以事其君，谗人间之，可谓穷矣。信而见疑，忠而被谤，能无怨乎？屈平之作《离骚》，盖自怨生也。上称帝喾，下道齐桓，中述汤、武，以刺世事。明道德之广崇，治乱之条贯，靡不毕见。其文约，其辞微，其志洁，其行廉。其称文小而其指极大，举类迩而见义远。其志洁，故其称物芳；其行廉，故死而不容。自疏濯淖污泥之中，蝉蜕于浊秽，以浮游尘埃之外，不获世之滋垢，皭然泥而不滓者也。推此志也，虽与日月争光可也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;屈平既绌，其后秦欲伐齐，齐与楚从亲。惠王患之，乃令张仪佯去秦，厚币委质事楚，曰：“秦甚憎齐，齐与楚从亲，楚诚能绝齐，秦愿献商于之地六百里。”楚怀王贪而信张仪，遂绝齐，使使如秦受地。张仪诈之曰：“仪与王约六里，不闻六百里。”楚使怒去，归告怀王。怀王怒，大兴师伐秦。秦发兵击之，大破楚师于丹、淅，斩首八万，虏楚将屈匄，遂取楚之汉中地。怀王乃悉发国中兵，以深入击秦，战于蓝田。魏闻之，袭楚至邓。楚兵惧，自秦归。而齐竟怒不救楚，楚大困。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;明年，秦割汉中地与楚以和。楚王曰：“不愿得地，愿得张仪而甘心焉。”张仪闻，乃曰：“以一仪而当汉中地，臣请往如楚。”如楚，又因厚币用事者臣靳尚，而设诡辩于怀王之宠姬郑袖。怀王竟听郑袖，复释去张仪。是时屈平既疏，不复在位，使于齐，顾反，谏怀王曰：“何不杀张仪？”怀王悔，追张仪，不及。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其后诸侯共击楚，大破之，杀其将唐眜。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时秦昭王与楚婚，欲与怀王会。怀王欲行，屈平曰：“秦，虎狼之国，不可信。不如毋行。”怀王稚子子兰劝王行：“奈何绝秦欢？”怀王卒行。入武关，秦伏兵绝其后，因留怀王以求割地。怀王怒，不听。亡走赵，赵不内。复之秦，竟死于秦而归葬。长子顷襄王立，以其第子兰为令尹。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;楚人既咎子兰以劝怀王入秦而不反也；屈平既嫉之，虽放流，眷顾楚国，系心怀王，不忘欲反；冀幸君之一悟，俗之一改也。其存君兴国而欲反复之，一篇之中三致志焉。然终无可奈何，故不可以反。卒以此见怀王之终不悟也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人君无愚、智、贤、不肖，莫不欲求忠以自为，举贤以自佐；然亡国破家相随属，而圣君治国累世而不见者，其所谓忠者不忠，而所谓贤者不贤也。怀王以不知忠臣之分，故内惑于郑袖，外欺于张仪，疏屈平而信上官大夫、令尹子兰。兵挫地削，亡其六郡，身客死于秦，为天下笑。此不知人祸也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;令尹子兰闻之，大怒，卒使上官大夫短屈原于顷襄王，顷襄王怒而迁之。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;屈原至于江滨，被发行吟泽畔，颜色憔悴，形容枯槁。渔父见而问之曰：“子非三闾大夫欤？何故而至此？”屈原曰：“举世混浊而我独清，众人皆醉而我独醒，是以见放。”渔父曰：“夫圣人者，不凝滞于物，而能与世推移。举世混浊，何不随其流而扬其波？众人皆醉，何不餔其糟而啜其醨？何故怀瑾握瑜，而自令见放为？”屈原曰：“吾闻之，新沐者必弹冠，新浴者必振衣。人又谁能以身人察察，受物之汶汶者乎？宁赴常流而葬乎江鱼腹中耳，又安能以皓皓之白，而蒙世之温蠖乎？”乃作《怀沙》之赋，于是怀石，遂自投汩罗以死。</p>
<p></p><h2 style="text-align: center;">劝学</h2><p></p>
<h3 style="text-align: center;">《荀子》</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;君子曰：学不可以已。青，取之于蓝而青于蓝；冰，水为之而寒于水。本直中绳，輮以为轮，其曲中规；虽有槁暴，不复挺者，輮使之然也。故木受绳则直，金就砺则利，君子博学而日参省乎己，则知明而行无过矣。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故不登高山，不知天之高也；不临深谿，不知地之厚也；不闻先王之遗言，不知学问之大也。干越夷貉之子，生而同声，长而异俗，教使之然也。《诗》曰：“嗟尔君子，无恒安息。靖共尔位，好是正直。神之听之，介尔景福。”神莫大于化道，福莫长于无祸。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非如长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;积土成山，风雨兴焉；积水成渊，蛟龙生焉；积善成德，而神明自得，圣心备焉。故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；驽马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利，筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。是故无冥冥之志者，无昭昭之明；无惛惛之事者，无赫赫之功。行衢道者不至，事两君者不容。目不能两视而明，耳不能两听而聪。螣蛇无足而飞，鼫鼠五技而穷。《诗》曰：“尸鸠在桑，其子七兮。淑人君子，其仪一兮。其仪一兮，心如结兮！”故君子结于一也。</p>
<p></p><h2 style="text-align: center;">师说</h2><p></p>
<h3 style="text-align: center;">韩愈</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;古人学者必有师，师者，所以传道受业解惑也。人非生而知之者，孰能无惑？惑而不从师，其为惑也，终不解矣。生乎吾前，其闻道也固先乎吾，吾从而师之，生乎吾后，其闻道也亦先乎吾，吾从而师之。吾师道也，夫庸知其年之后生于吾乎？是故，无贵无贱，无长无少，道之所存，师之所存也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;嗟乎！师道之不传也久矣！欲人之无惑也难矣！古之圣人，其也人也远矣，犹且从师而问焉；今之众人，其下圣人也亦远矣，而耻学于师。是古圣益圣，愚益愚。圣人之所以为圣，愚人之所以为愚，其皆出于此乎？爱其子，择师而教之；于其身也，则耻师焉，惑矣！。彼童子之师，授之书而习其句读者，非吾所谓传其解其惑者也。句读之不知，惑之不解，或师焉，或不焉，小学而大遗，吾未见其明也。巫医，乐师百工之人，不耻相师。士大夫之族，日师日弟子云者，则群聚而笑之。问之，则曰：“彼与彼年相若也，道相似也，位卑则足羞，官盛则近庚。呜呼！师道之不复，可知矣。巫医乐师百工之人，君子不齿，今其智乃反不能及，其可怪也欤！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;圣人无常师。孔子师郯子、苌弘、师襄、老聘。郯子之陡，其贤不及孔子。孔子曰：三人行，必有我师。是故弟子不必不如师，师不必贤于弟子，闻道有先之后，术业有专攻，如是而已。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;李氏子蟠，年比，如古文，六艺经传皆通习之，不拘于时，学于余。余嘉其能行古道，作《师说》以贻之。</p>
<p></p><h2 style="text-align: center;">蜀道难</h2><p></p>
<h3 style="text-align: center;">李白</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;噫，吁嚱，危乎高哉！蜀道之难，难于上青天！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;蚕丛及鱼凫，开国何茫然！尔来四万八千岁，不与秦塞通人烟。西当太白有鸟道，可以横绝峨嵋巅。地崩山摧壮士死，然后天梯石栈方钩连。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上有六龙回日之高标，下有冲波逆折之回川。黄鹤之飞尚不得过，猿猱欲度愁攀援。青泥何盘盘，百步九折萦岩峦。扪参历井仰胁息，以手抚膺坐长叹。问君西游何时还？畏途巉岩不可攀。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但见悲鸟号古木，雄飞从雌绕林间。又闻子规啼夜月，愁空山。蜀道之难，难于上青天，使人听此凋朱颜。连峰去天不盈尺，枯松倒挂倚绝壁。飞湍瀑流争喧豗，砯崖转石万壑雷。其险也若此，嗟尔远道之人，胡为乎来哉。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;剑阁峥嵘而崔嵬，一夫当关，万夫莫开。所守或匪亲，化为狼与豺。朝避猛虎，夕避长蛇，磨牙吮血，杀人如麻。锦城虽云乐，不如早还家。<br>蜀道之难，难于上青天，侧身西望长咨嗟。</p>
<p></p><h2 style="text-align: center;">卫风·氓</h2><p></p>
<h3 style="text-align: center;">《诗经》</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;氓之蚩蚩，抱布贸丝。匪来贸丝，来即我谋。送子涉淇，至于顿丘。匪我愆期，子无良媒。将予无怒，秋以为期。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;乘彼垝垣，以望复关。不见复关，泣涕涟涟。既见复关，载笑载言。尔卜尔筮，体无咎言。以尔车来，以我贿迁。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;桑之未落，其叶沃若。于嗟鸠兮，无食桑葚。于嗟女兮，无与士耽。士之耽兮，犹可说也。女之耽兮，不可说也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;桑之落矣，其黄而陨。自我徂尔，三岁食贫。淇水汤汤，渐车帷裳。女也不爽，士贰其行。士也罔极，二三其德。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;三岁为妇，靡室劳矣，夙兴夜寐，靡有朝矣。言既遂矣，至于暴矣。兄弟不知，咥其笑矣。静言思之，躬自悼矣。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;及尔偕老，老使我怨。淇则有岸，隰则有伴。总角之宴，言笑晏晏。信誓旦旦，不思其反。反是不思，亦已焉哉。</p>
<p></p><h2 style="text-align: center;">游褒禅山记</h2><p></p>
<h3 style="text-align: center;">王安石</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;褒禅山亦谓之华山，唐浮图慧褒始舍於其址，而卒葬之；以故其後名之曰“褒禅”。今所谓慧空禅院者，褒之庐冢也。距其院东五里，所谓华阳洞者，以其乃华山之阳名之也。距洞百馀步，有碑仆道，其文漫灭，独其为文犹可识曰“花山”。今言“华”如“华实”之“华”者，盖音谬也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其下平旷，有泉侧出，而记游者甚众，──所谓前洞也。由山以上五六里，有穴窈然，入之甚寒，问其深，则其虽好游者不能穷也，──谓之後洞。余与四人拥火以入，入之愈深，其进愈难，而其见愈奇。有怠而欲出者，曰：“不出，火且尽”；遂与之俱出。盖余所至，比好游者尚不能十一，然视其左右，来而记之者已少。盖其又深，则其至又加少矣。方是时，予之力尚足以入，火尚足以明也。既其出，则或咎其欲出者，而余亦悔其随之，而不得极夫游之乐也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;於是余有叹焉：古人之观於天地、山川、草木、虫鱼、鸟兽，往往有得，以其求思之深，而无不在也。夫夷以近，则游者众；险以远，则至者少。而世之奇伟、瑰怪、非常之观，常在於险远，而人之所罕至焉，故非有志者不能至也。有志矣，不随以止也，然力不足者亦不能至也。有志与力，而又不随以怠，至於幽暗昏惑而无物以相之，亦不能至也。然力足以至焉而不至，於人为可讥，而在己为有悔；尽吾志也，而不能至者，可以无悔矣，其孰能讥之乎？此余之所得也！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;余於仆碑，又以悲夫古书之不存，后世之谬其传而莫能名者，何可胜道也哉！此所以学者不可以不深思而慎取之也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;四人者：庐陵萧君圭君玉，长乐王回深父，余弟安国平父、安上纯父。至和元年七月某日，临川王某记。</p>
<p></p><h2 style="text-align: center;">醉翁亭记</h2><p></p>
<h3 style="text-align: center;">欧阳修</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;环滁皆山也。其西南诸峰，林壑尤美。望之蔚然而深秀者，琅琊也。山行六七里，渐闻水声潺潺，而泄出于两峰之间者，酿泉也。峰回路转，有亭翼然临于泉上者，醉翁亭也。作亭者谁？山之僧智仙也。名之者谁？太守自谓也。太守与客来饮于此，饮少辄醉，而年又最高，故自号曰“醉翁”也。醉翁之意不在酒，在乎山水之间也。山水之乐，得之心而寓之酒也。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;若夫日出而林霏开，云归而岩穴暝，晦明变化者，山间之朝暮也。野芳发而幽香，佳木<br>秀而繁阴，风霜高洁，水落而石出者，山间之四时也。朝而往，暮而归，四时之景不同，而<br>乐亦无穷也。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至于负者歌于滁，行者休于树，前者呼，后者应，伛偻提携，往来而不绝者，滁人游<br>也。临溪而渔，溪深而鱼肥；酿泉为酒，泉香而酒冽；山肴野蔌，杂然而前陈者，太守宴<br>也。宴酣之乐，非丝非竹，射者中，弈者胜，觥筹交错，坐起而喧哗者，众宾欢也。苍然白<br>发，颓乎其中者，太守醉也。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;已而夕阳在山，人影散乱，太守归而宾客从也。树林阴翳，鸣声上下，游人去而禽鸟乐<br>也。然而禽鸟知山林之乐，而不知人之乐；人知从太守游而乐，而不知太守之乐其乐也。醉<br>能同其乐，醒能述其文者，太守也。太守谓谁？庐陵欧阳修也。</p>
<p></p><h2 style="text-align: center;">邹忌讽齐王纳谏</h2><p></p>
<h3 style="text-align: center;">《战国策》</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;邹忌修八尺有余，而形貌昳丽。朝服衣冠，窥镜，谓其妻曰：“我孰与城北徐公美？”其妻曰：“君美甚，徐公何能及君也？”城北徐公，齐国之美丽者也。忌不自信，而复问其妾曰：“吾孰与徐公美？”妾曰：“徐公何能及君也？”旦曰，客从外来，与坐谈，问之：“吾与徐公孰美？”客曰：“徐公不若君之美也。”明日，徐公来，孰视之，自以为不如；窥镜而自视，又弗如远甚。暮寝而思之，曰：“吾妻之美我者，私我也；妾之美我者，畏我也；客之美我者，欲有求于我也。”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是入朝见威王，曰：“臣诚知不如徐公美。臣之妻私臣，臣之妾畏臣，臣之客欲有求于臣，皆以美于徐公。今齐地方千里，百二十城，宫妇左右莫不私王，朝廷之臣莫不畏王，四境之内莫不有求于王：由此观之，王之蔽甚矣。”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;王曰：“善。”乃下令：“群臣吏民能面刺寡人之过者，受上赏；上书谏寡人者，受中赏；能谤讥于市朝，闻寡人之耳者，受下赏。”令初下，群臣进谏，门庭若市；数月之后，时时而间进；期年之后，虽欲言，无可进者。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;燕、赵、韩、魏闻之，皆朝于齐。此所谓战胜于朝廷。</p>
<p></p><h2 style="text-align: center;">阿房宫赋</h2><p></p>
<h3 style="text-align: center;">杜牧</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;六王毕，四海一。蜀山兀，阿房出。覆压三百余里，隔离天日。骊山北构而西折，直走咸阳。二川溶溶，流入宫墙。五步一楼，十步一阁；廊腰缦回，檐牙高啄；各抱地势，钩心斗角。盘盘焉，囷囷焉，蜂房水涡，矗不知其几千万落。长桥卧波，未云何龙？复道行空，不霁何虹？高低冥迷，不知西东。歌台暖响，春光融融；舞殿冷袖，风雨凄凄。一日之内，一宫之间，而气候不齐。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;妃嫔媵嫱，王子皇孙，辞楼下殿，辇来于秦。朝歌夜弦，为秦宫人。明星荧荧，开妆镜也；绿云扰扰，梳晓鬟也；渭流涨腻，弃脂水也；烟斜雾横，焚椒兰也。雷霆乍惊，宫车过也；辘辘远听，杳不知其所之也。一肌一容，尽态极妍，缦立远视，而望幸焉。有不得见者，三十六年。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;燕赵之收藏，韩魏之经营，齐楚之精英，几世几年，剽掠其人，倚叠如山。一旦不能有，输来其间。鼎铛玉石，金块珠砾，弃掷逦迤，秦人视之，亦不甚惜。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;嗟乎！一人之心，千万人之心也。秦爱纷奢，人亦念其家。奈何取之尽锱铢，用之如泥沙？使负栋之柱，多于南亩之农夫；架梁之椽，多于机上之工女；钉头磷磷，多于在庾之粟粒；瓦缝参差，多于周身之帛缕；直栏横槛，多于九土之城郭；管弦呕哑，多于市人之言语。使天下之人，不敢言而敢怒。独夫之心，日益骄固。戍卒叫，函谷举，楚人一炬，可怜焦土！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;呜呼！灭六国者六国也，非秦也；族秦者秦也，非天下也。嗟夫！使六国各爱其人，则足以拒秦；使秦复爱六国之人，则递三世可至万世而为君，谁得而族灭也？秦人不暇自哀，而后人哀之；后人哀之而不鉴之，亦使后人而复哀后人也。</p>
<p></p><h2 style="text-align: center;">逍遥游</h2><p></p>
<h3 style="text-align: center;">《庄子》</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;北冥有鱼，其名为鲲。鲲之大，不知其几千里也；化而为鸟，其名为鹏。鹏之背，不知其几千里也；怒而飞，其翼若垂天之云。是鸟也，海运则将徙于南冥。南冥者，天池也。《齐谐》者，志怪者也。《谐》之言曰：“鹏之徙于南冥也，水击三千里，抟扶摇而上者九万里，去以六月息者也。”野马也，尘埃也，生物之以息相吹也。天之苍苍，其正色邪？其远而无所至极邪？其视下也，亦若是则已矣。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;且夫水之积也不厚，则其负大舟也无力。覆杯水于坳堂之上，则芥为之舟，置杯焉则胶，水浅而舟大也。风之积也不厚，则其负大翼也无力。故九万里，则风斯在下矣，而后乃今培风；背负青天，而莫之夭阏者，而后乃今将图南。 　　蜩与学鸠笑之曰：“我决起而飞，抢榆枋而止，时则不至，而控于地而已矣，奚以之九万里而南为？”适莽苍者，三餐而反，腹犹果然；适百里者，宿舂粮；适千里者，三月聚粮。之二虫又何知！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;小知不及大知，小年不及大年。奚以知其然也？朝菌不知晦朔，蟪蛄不知春秋，此小年也。楚之南有冥灵者，以五百岁为春，五百岁为秋；上古有大椿者，以八千岁为春，八千岁为秋 ，此大年也。而彭祖乃今以久特闻，众人匹之，不亦悲乎？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;汤之问棘也是已：“穷发之北，有冥海者，天池也。有鱼焉，其广数千里，未有知其修者，其名为鲲。有鸟焉，其名为鹏，背若泰山，翼若垂天之云，抟扶摇羊角而上者九万里，绝云气，负青天，然后图南，且适南冥也。斥鴳笑之曰：‘彼且奚适也？我腾跃而上，不过数仞而下，翱翔蓬蒿之间，此亦飞之至也。而彼且奚适也？’”此小大之辩也。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;故夫知效一官、行比一乡、德合一君、而征一国者，其自视也，亦若此矣。而宋荣子犹然笑之。且举世誉之而不加劝，举世非之而不加沮，定乎内外之分，辩乎荣辱之境，斯已矣。彼其于世，未数数然也。虽然，犹有未树也。夫列子御风而行，泠然善也，旬有五日而后反。彼于致福者，未数数然也。此虽免乎行，犹有所待者也。若夫乘天地之正，而御六气之辩，以游无穷者，彼且恶乎待哉？故曰：至人无己，神人无功，圣人无名。</p>
<p></p><h2 style="text-align: center;">石钟山记</h2><p></p>
<h3 style="text-align: center;">苏轼</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;《水经》云：“彭蠡之口有石钟山焉。”郦元以为下临深潭，微风鼓浪，水石相搏，声如洪钟。是说也，人常疑之。今以钟磬置水中，虽大风浪不能鸣也，而况石乎！至唐李渤始访其遗踪，得双石于潭上，扣而聆之，南声函胡，北音清越，桴止响腾，余韵徐歇。自以为得之矣。然是说也，余尤疑之。石之铿然有声者，所在皆是也，而此独以钟名，何哉？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;元丰七年六月丁丑，余自齐安舟行适临汝，而长子迈将赴饶之德兴尉，送之至湖口，因得观所谓石钟者。寺僧使小童持斧，于乱石间择其一二扣之，硿硿焉。余固笑而不信也。至莫夜月明，独与迈乘小舟至绝壁下。大石侧立千尺，如猛兽奇鬼，森然欲搏人；而山上栖鹘，闻人声亦惊起，磔磔云霄间；又有若老人咳且笑于山谷中者，或曰此鹳鹤也。余方心动欲还，而大声发于水上，噌吰如钟鼓不绝。舟人大恐。徐而察之，则山下皆石穴罅，不知其浅深，微波入焉，涵淡澎湃而为此也。舟回至两山间，将入港口，有大石当中流，可坐百人，空中而多窍，与风水相吞吐，有窾坎镗鞳之声，与向之噌吰者相应，如乐作焉。因笑谓迈曰：“汝识之乎？噌吰者，周景王之无射也；窾坎镗鞳者，魏庄子之歌钟也。古之人不余欺也！”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事不目见耳闻，而臆断其有无，可乎？郦元之所见闻，殆与余同，而言之不详；士大夫终不肯以小舟夜泊绝壁之下，故莫能知；而渔工水师虽知而不能言。此世所以不传也。而陋者乃以斧斤考击而求之，自以为得其实。余是以记之，盖叹郦元之简，而笑李渤之陋也。</p>
<p></p><h2 style="text-align: center;">前出师表</h2><p></p>
<h3 style="text-align: center;">诸葛亮</h3>



<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;臣亮言：先帝创业未半，而中道崩殂；今天下三分，益州疲敝，此诚危急存亡之秋也。然侍卫之臣，不懈于内；忠志之士，忘身于外者：盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。宫中府中，俱为一体；陟罚臧否，不宜异同：若有作奸犯科，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。侍中、侍郎郭攸之、费依、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下：愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰“能”，是以众议举宠为督：愚以为营中之事，事无大小，悉以咨之，必能使行阵和穆，优劣得所也。亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也！侍中、尚书、长史、参军，此悉贞亮死节之臣也，愿陛下亲之、信之，则汉室之隆，可计日而待也。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;臣本布衣，躬耕南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，谘臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间：尔来二十有一年矣。先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧虑，恐付托不效，以伤先帝之明；故五月渡泸，深入不毛。今南方已定，甲兵已足，当奖帅三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都：此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、依、允等之任也。愿陛下托臣以讨贼兴复之效，不效则治臣之罪，以告先帝之灵；若无兴复之言，则责攸之、依、允等之咎，以彰其慢。陛下亦宜自谋，以谘诹善道，察纳雅言，深追先帝遗诏。臣不胜受恩感激！今当远离，临表涕泣，不知所云。</p>
<p></p><h2 style="text-align: center;">后出师表</h2><p></p>
<h3 style="text-align: center;">诸葛亮</h3><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先帝虑汉、贼不两立，王业不偏安，故托臣以讨贼也。以先帝之明，量臣之才，故知臣伐贼，才弱敌强也。然不伐贼，王业亦亡。惟坐而待亡，孰与伐之？是故托臣而弗疑也。臣受命之日，寝不安席，食不甘味；思惟北征，宜先入南：故五月渡泸，深入不毛，并日而食。——臣非不自惜也：顾王业不可偏安于蜀都，故冒危难以奉先帝之遗意。而议者谓为非计。今贼适疲于西，又务于东，兵法“乘劳”：此进趋之时也。谨陈其事如左：<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;高帝明并日月，谋臣渊深，然涉险被创，危然后安；今陛下未及高帝，谋臣不如良、平，而欲以长策取胜，坐定天下：此臣之未解一也。刘繇、王朗，各据州郡，论安言计，动引圣人，群疑满腹，众难塞胸；今岁不战，明年不征，使孙策坐大，遂并江东：此臣之未解二也。曹操智计，殊绝于人，其用兵也，仿怫孙、吴，然困于南阳，险于乌巢，危于祁连，逼于黎阳，几败北山，殆死潼关，然后伪定一时耳；况臣才弱，而欲以不危而定之：此臣之未解三也。曹操五攻昌霸不下，四越巢湖不成，任用李服而李服图之，委任夏侯而夏侯败亡，先帝每称操为能，犹有此失；况臣弩下，何能必胜：此臣之未解四也。自臣到汉中，中间期年耳，然丧赵云、阳群、马玉、阎芝、丁立、白寿、刘合、邓铜等，及驱长屯将七十余人，突将无前，丛叟、青羌，散骑武骑一千余人，此皆数十年之内，所纠合四方之精锐，非一州之所有；若复数年，则损三分之二也。——当何以图敌：此臣之未解五也。今民穷兵疲，而事不可息；事不可息，则住与行，劳费正等；而不及今图之，欲以一州之地，与贼持久：此臣之未解六也。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;夫难平者，事也。昔先帝败军于楚，当此时，曹操拊手，谓天下已定。——然后先帝东连吴、越，西取巴、蜀，举兵北征，夏侯授首：此操之失计，而汉事将成也。——然后吴更违盟，关羽毁败，秭归蹉跌，曹丕称帝：凡事如是，难可逆见。臣鞠躬尽瘁，死而后已；至于成败利钝，非臣之明所能逆睹也。<br><br><h2 style="text-align: center;">琵琶行</h2><br><h3 style="text-align: center;">白居易</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浔阳江头夜送客，枫叶荻花秋瑟瑟。主人下马客在船，举酒欲饮无管弦。 醉不成欢惨将别，别时茫茫江浸月。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;忽闻水上琵琶声，主人忘归客不发。寻声暗问弹者谁，琵琶声停欲语迟。移船相近邀相见，添酒回灯重开宴。 千呼万唤始出来，犹抱琵琶半遮面。转轴拨弦三两声，未成曲调先有情。 弦弦掩抑声声思，似诉平生不得志。低眉信手续续弹，说尽心中无限事。 轻拢慢捻抹复挑，初为《霓裳》后《六幺》。大弦嘈嘈如急雨，小弦切切如私语。 嘈嘈切切错杂弹，大珠小珠落玉盘。间关莺语花底滑，幽咽泉流冰下难。 冰泉冷涩弦凝绝，凝绝不通声暂歇。别有幽愁暗恨生，此时无声胜有声。 银瓶乍破水浆迸，铁骑突出刀枪鸣。曲终收拨当心画，四弦一声如裂帛。 东船西舫悄无言，唯见江心秋月白。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;沉吟放拨插弦中，整顿衣裳起敛容。 自言本是京城女，家在虾蟆陵下住。十三学得琵琶成，名属教坊第一部。 曲罢曾教善才服，妆成每被秋娘妒。五陵年少争缠头，一曲红绡不知数。 钿头银篦击节碎，血色罗裙翻酒污。今年欢笑复明年，秋月春风等闲度。 弟走从军阿姨死，暮去朝来颜色故。门前冷落鞍马稀，老大嫁作商人妇。 商人重利轻别离，前月浮梁买茶去。去来江口守空船，绕船月明江水寒。 夜深忽梦少年事，梦啼妆泪红阑干。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我闻琵琶已叹息，又闻此语重唧唧。 同是天涯沦落人，相逢何必曾相识。我从去年辞帝京，谪居卧病浔阳城。 浔阳小处无音乐，终岁不闻丝竹声。住近湓江地低湿，黄芦苦竹绕宅生。 其间旦暮闻何物？杜鹃啼血猿哀鸣。春江花朝秋月夜，往往取酒还独倾。 岂无山歌与村笛？呕哑嘲哳难为听。今夜闻君琵琶语，如听仙乐耳暂明。 莫辞更坐弹一曲，为君翻作琵琶行。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感我此言良久立，却坐促弦弦转急。 凄凄不似向前声，满座重闻皆掩泣。座中泣下谁最多？江州司马青衫湿。</p>
<p></p><h2 style="text-align: center;">爱莲说</h2><p></p>
<h3 style="text-align: center;">周敦颐</h3><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;水陆草木之花，可爱者甚蕃。晋陶渊明独爱菊；自李唐来，世人甚爱牡丹；予独爱莲之出淤泥而不染，濯清涟而不妖，中通外直，不蔓不枝，香远益清，亭亭净植，可远观而不可亵玩焉。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;予谓菊，花之隐逸者也；牡丹，花之富贵者也；莲，花之君子者也。噫！菊之爱，陶后鲜有闻。莲之爱，同予者何人？牡丹之爱，宜乎众矣！<br><h2 style="text-align: center;">陋室铭</h2><br><h3 style="text-align: center;">刘禹锡</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;山不在高，有仙则名。水不在深，有龙则灵。斯是陋室，惟吾德馨。苔痕上阶绿，草色入帘青。谈笑有鸿儒，往来无白丁。可以调素琴，阅金经。无丝竹之乱耳，无案牍之劳形。南阳诸葛庐，西蜀子云亭。孔子云：“何陋之有？”</p>
<p></p><h2 style="text-align: center;">将（qiāng）进酒</h2><p></p>
<h3 style="text-align: center;">李白</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;君不见，黄河之水天上来，奔流到海不复回!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;君不见，高堂明镜悲白发，朝如青丝暮成雪!<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人生得意须尽欢，莫使金樽（zūn）空对月。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;天生我材必有用，千金散尽还（huán）复来。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;烹羊宰牛且为乐，会须一饮三百杯。（会须：应当）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;岑（cén）夫子，丹丘生，将（qiāng）进酒，杯莫停。.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与君歌一曲，请君为我侧耳听。(注：人教版高中教材也可作“倾耳听”)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;钟鼓馔（zhuàn）玉何足贵（注：此处也可作“不足贵”），但愿长醉不复醒。(注：也有版本为但愿长醉不用醒,新课标人教版高中课本为但愿长醉不愿醒。)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;古来圣贤皆寂寞，惟有饮者留其名。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;陈王昔时宴平乐（lè），斗酒十千恣(zì)欢谑（xuè）。（里面的乐也可以读（yuè））<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主人何为言少钱（注：此处也可作“言钱少”) ? 径（jìng）须沽（gū）取对君酌（zhuó）。（径须：直截了当。）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;五花马，千金裘（qiú），呼儿将（jiāng）出换美酒，与尔同销万古愁。</p>
<p></p><h2 style="text-align: center;">项脊轩志</h2><p></p>
<h3 style="text-align: center;">归有光</h3>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项脊轩，旧南阁子也。室仅方丈，可容一人居。百年老屋，尘泥渗漉，雨泽下注；每移案，顾视无可置者。又北向，不能得日，日过午已昏。余稍为修葺，使不上漏。前辟四窗，垣墙周庭，以当南日，日影反照，室始洞然。又杂植兰桂竹木于庭，旧时栏楯，亦遂增胜。借书满架，偃仰啸歌，冥然兀坐，万籁有声；而庭阶寂寂，小鸟时来啄食，人至不去。三五之夜，明月半墙，桂影斑驳，风移影动，珊珊可爱。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然余居于此，多可喜，亦多可悲。先是,庭中通南北为一。迨诸父异爨，内外多置小门，墙往往而是。东犬西吠，客逾庖而宴，鸡栖于厅。庭中始为篱，已为墙，凡再变矣。家有老妪， 尝居于此。妪，先大母婢也，乳二世，先妣抚之甚厚。室西连于中闺，先妣尝一至。妪每谓余曰：“某所，而母立于兹。”妪又曰：“汝姊在吾怀，呱呱而泣；娘以指叩门扉曰：‘儿寒乎？欲食乎？’吾从板外相为应答。”语未毕， 余泣，妪亦泣。余自束发读书轩中，一日，大母过余曰：“吾儿，久不见若影，何竟日默默在此，大类女郎也？”比去，以手阖门，自语曰：“吾家读书久不效，儿之成，则可待乎！”顷之，持一象笏至，曰：“此吾祖太常公宣德间执此以朝，他日汝当用之！”瞻顾遗迹，如在昨日，令人长号不自禁。<br>轩东故尝为厨，人往，从轩前过。余扃牖而居，久之，能以足音辨人。轩凡四遭火，得不焚，殆有神护者。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项脊生曰：“蜀清守丹穴，利甲天下，其后秦皇帝筑女怀清台；刘玄德与曹操争天下，诸葛孔明起陇中。方二人之昧昧于一隅也，世何足以知之，余区区处败屋中，方扬眉、瞬目，谓有奇景。人知之者，其谓与坎井之蛙何异？”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;余既为此志，后五年，吾妻来归，时至轩中，从余问古事，或凭几学书。 吾妻归宁，述诸小妹语曰：“闻姊家有阁子，且何谓阁子也？”其后六年，吾妻死，室坏不修。其后二年，余久卧病无聊，乃使人复葺南阁子，其制稍异于前。然自后余多在外，不常居。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;庭有枇杷树，吾妻死之年所手植也，今已亭亭如盖矣。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p></p><h2 style="text-align: center;">滕王阁序</h2><p></p>
<h3 style="text-align: center;">王勃</h3><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp]]>
    </summary>
    
      <category term="智慧" scheme="http://fire17643.github.io/blog/tags/%E6%99%BA%E6%85%A7/"/>
    
      <category term="生活" scheme="http://fire17643.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每一天都是特别的日子]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/17/%E6%AF%8F%E4%B8%80%E5%A4%A9%E9%83%BD%E6%98%AF%E7%89%B9%E5%88%AB%E7%9A%84%E6%97%A5%E5%AD%90/"/>
    <id>http://fire17643.github.io/blog/2015/06/17/每一天都是特别的日子/</id>
    <published>2015-06-17T06:26:12.113Z</published>
    <updated>2015-06-17T06:26:12.113Z</updated>
    <content type="html"><![CDATA[<p>多年前我跟一位同学谈话。那时他太太刚去世不久，他告诉我说，他在整理他太太的东西的时候，发现了一条丝质的围巾，那是他们去纽约旅游时，在一家名牌店买的。那是一条雅致、漂亮的名牌围巾，高昂的价格卷标还挂在上面，他太太一直舍不得用，她想等一个特殊的日子才用。讲到这里，他停住了，我也没接话，好一会儿后他说：“再也不要把好东西留到特别的日子才用，你活着的每一天都是特别的日子。”</p>
<p>以后，每当想起这几句话时，我常会把手边的杂事放下，找一本小说，打开音响，躺在沙发上，抓住一些自己的时间。我会从落地窗欣赏淡水河的景色，不去管玻璃上的灰尘，我会拉着家人到外面去吃饭，不管家里的饭菜该怎么处理。生活应当是我们珍惜的一种经验，而不是要捱过去的日子。</p>
<p>我曾将这段谈话与一位朋友分享。后来见面时，她告诉我她现在已不像从前那样，把美丽的瓷具放在酒柜里了。以前她也以为要留到特别的日子才拿出来用，后来发现那一天从未到来。“将来”、“总有一天”已经不存在于她的字典里了。如果有什么值得高兴的事，有什么得意的事，她现在就要听到，就要看到。</p>
<p>其实每天早上我们睁开眼睛时，都要告诉自己这是特别的一天。每一天，每一分钟都是那么可贵。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>多年前我跟一位同学谈话。那时他太太刚去世不久，他告诉我说，他在整理他太太的东西的时候，发现了一条丝质的围巾，那是他们去纽约旅游时，在一家名牌店买的。那是一条雅致、漂亮的名牌围巾，高昂的价格卷标还挂在上面，他太太一直舍不得用，她想等一个特殊的日子才用。讲到这里，他停住了，我也]]>
    </summary>
    
      <category term="智慧" scheme="http://fire17643.github.io/blog/tags/%E6%99%BA%E6%85%A7/"/>
    
      <category term="生活" scheme="http://fire17643.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[左栏固定，右栏自适应布局的几种方式]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/17/%E5%B7%A6%E6%A0%8F%E5%9B%BA%E5%AE%9A%EF%BC%8C%E5%8F%B3%E6%A0%8F%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://fire17643.github.io/blog/2015/06/17/左栏固定，右栏自适应布局的几种方式/</id>
    <published>2015-06-17T06:21:36.671Z</published>
    <updated>2015-06-17T06:21:36.671Z</updated>
    <content type="html"><![CDATA[<p></p><h2>一、使用margin实现左固定右自适应</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#left &#123;</span></span><br><span class="line">  width: <span class="number">250</span>px;</span><br><span class="line">  height: <span class="number">250</span>px;</span><br><span class="line">  background: rgb(<span class="number">0</span>, <span class="number">214</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="built_in">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#right &#123;</span></span><br><span class="line">  height: <span class="number">200</span>px;</span><br><span class="line">  background: rgb(<span class="number">76</span>, <span class="number">129</span>, <span class="number">207</span>);</span><br><span class="line">  margin-left:<span class="number">110</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p></p><h2>二、使用position:absolute实现的左固定右自适应</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#left &#123;</span></span><br><span class="line">  width: <span class="number">250</span>px;</span><br><span class="line">  height: <span class="number">250</span>px;</span><br><span class="line">  background: rgb(<span class="number">0</span>, <span class="number">214</span>, <span class="number">255</span>);</span><br><span class="line">  position:absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#right &#123;</span></span><br><span class="line">  height: <span class="number">200</span>px;</span><br><span class="line">  background: rgb(<span class="number">76</span>, <span class="number">129</span>, <span class="number">207</span>);</span><br><span class="line">  margin-left:<span class="number">110</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p></p><h2>三、使用overflow:hidden实现的左固定右自适应</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#left &#123;</span></span><br><span class="line">  <span class="built_in">float</span>:left;</span><br><span class="line">  width: <span class="number">250</span>px;</span><br><span class="line">  height: <span class="number">250</span>px;</span><br><span class="line">  background: rgb(<span class="number">0</span>, <span class="number">214</span>, <span class="number">255</span>);</span><br><span class="line">  margin-right:<span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#right &#123;</span></span><br><span class="line">  height: <span class="number">200</span>px;</span><br><span class="line">  background: rgb(<span class="number">76</span>, <span class="number">129</span>, <span class="number">207</span>);</span><br><span class="line">  overflow:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
]]></content>
    <summary type="html">
    <![CDATA[<p></p><h2>一、使用margin实现左固定右自适应</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><spa]]>
    </summary>
    
      <category term="页面布局" scheme="http://fire17643.github.io/blog/tags/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[将人民币数字转换成大写形式]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/17/%E5%B0%86%E4%BA%BA%E6%B0%91%E5%B8%81%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E6%88%90%E5%A4%A7%E5%86%99%E5%BD%A2%E5%BC%8F/"/>
    <id>http://fire17643.github.io/blog/2015/06/17/将人民币数字转换成大写形式/</id>
    <published>2015-06-17T06:19:05.040Z</published>
    <updated>2015-06-17T06:19:05.040Z</updated>
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> convertCurrency(currencyDigits) &#123;  </span><br><span class="line">// Constants:  </span><br><span class="line"> var MAXIMUM_NUMBER = <span class="number">99999999999.99</span>;   </span><br><span class="line"> var CN_ZERO = <span class="string">"零"</span>;  </span><br><span class="line"> var CN_ONE = <span class="string">"壹"</span>;  </span><br><span class="line"> var CN_TWO = <span class="string">"贰"</span>;  </span><br><span class="line"> var CN_THREE = <span class="string">"叁"</span>;  </span><br><span class="line"> var CN_FOUR = <span class="string">"肆"</span>;  </span><br><span class="line"> var CN_FIVE = <span class="string">"伍"</span>;  </span><br><span class="line"> var CN_SIX = <span class="string">"陆"</span>;  </span><br><span class="line"> var CN_SEVEN = <span class="string">"柒"</span>;  </span><br><span class="line"> var CN_EIGHT = <span class="string">"捌"</span>;  </span><br><span class="line"> var CN_NINE = <span class="string">"玖"</span>;  </span><br><span class="line"> var CN_TEN = <span class="string">"拾"</span>;  </span><br><span class="line"> var CN_HUNDRED = <span class="string">"佰"</span>;  </span><br><span class="line"> var CN_THOUSAND = <span class="string">"仟"</span>;  </span><br><span class="line"> var CN_TEN_THOUSAND = <span class="string">"万"</span>;  </span><br><span class="line"> var CN_HUNDRED_MILLION = <span class="string">"亿"</span>;  </span><br><span class="line"> var CN_SYMBOL = <span class="string">"￥"</span>;  </span><br><span class="line"> var CN_DOLLAR = <span class="string">"圆"</span>;  </span><br><span class="line"> var CN_TEN_CENT = <span class="string">"角"</span>;  </span><br><span class="line"> var CN_CENT = <span class="string">"分"</span>;  </span><br><span class="line"> var CN_INTEGER = <span class="string">"整"</span>;  </span><br><span class="line">   </span><br><span class="line">// Variables:  </span><br><span class="line"> var integral; // Represent integral part of digit number.  </span><br><span class="line"> var decimal; // Represent decimal part of digit number.  </span><br><span class="line"> var outputCharacters; // The output result.  </span><br><span class="line"> var parts;  </span><br><span class="line"> var digits, radices, bigRadices, decimals;  </span><br><span class="line"> var zeroCount;  </span><br><span class="line"> var i, p, d;  </span><br><span class="line"> var quotient, modulus;  </span><br><span class="line">   </span><br><span class="line">// Validate input string:  </span><br><span class="line"> currencyDigits = currencyDigits.toString();  </span><br><span class="line"> <span class="keyword">if</span> (currencyDigits == <span class="string">""</span>) &#123;  </span><br><span class="line"> 	alert(<span class="string">"Empty input!"</span>);  </span><br><span class="line">	<span class="built_in">return</span> <span class="string">""</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">if</span> (currencyDigits.match(/[^,.\d]/) != null) &#123;  </span><br><span class="line"> 	alert(<span class="string">"Invalid characters in the input string!"</span>);  </span><br><span class="line"> 	<span class="built_in">return</span> <span class="string">""</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">if</span> ((currencyDigits).match(/^((\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(,\d&#123;<span class="number">3</span>&#125;)*(.((\d&#123;<span class="number">3</span>&#125;,)*\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;))?)|(\d+(.\d+)?))$/) == null) &#123;  </span><br><span class="line">	alert(<span class="string">"Illegal format of digit number!"</span>);  </span><br><span class="line"> 	<span class="built_in">return</span> <span class="string">""</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line">// Normalize the format of input digits:  </span><br><span class="line"> currencyDigits = currencyDigits.replace(/,/g, <span class="string">""</span>); // Remove comma delimiters.  </span><br><span class="line"> currencyDigits = currencyDigits.replace(/^<span class="number">0</span>+/, <span class="string">""</span>); // Trim zeros at the beginning.  </span><br><span class="line"> // Assert the number is not greater than the maximum number.  </span><br><span class="line"> <span class="keyword">if</span> (Number(currencyDigits) &gt; MAXIMUM_NUMBER) &#123;  </span><br><span class="line"> 	alert(<span class="string">"Too large a number to convert!"</span>);  </span><br><span class="line"> 	<span class="built_in">return</span> <span class="string">""</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line">// Process the coversion from currency digits to characters:  </span><br><span class="line"> // Separate integral and decimal parts before processing coversion:  </span><br><span class="line"> parts = currencyDigits.split(<span class="string">"."</span>);  </span><br><span class="line"> <span class="keyword">if</span> (parts.length &gt; <span class="number">1</span>)&#123;  </span><br><span class="line"> 	integral = parts[<span class="number">0</span>];  </span><br><span class="line"> 	decimal = parts[<span class="number">1</span>];  </span><br><span class="line"> 	// Cut down redundant decimal digits that are after the second.  </span><br><span class="line">	decimal = decimal.substr(<span class="number">0</span>, <span class="number">2</span>);  </span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line"> 	integral = parts[<span class="number">0</span>];  </span><br><span class="line"> 	decimal = <span class="string">""</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> // Prepare the characters corresponding to the digits:  </span><br><span class="line"> digits = new Array(CN_ZERO, CN_ONE, CN_TWO, CN_THREE, CN_FOUR, CN_FIVE, CN_SIX, CN_SEVEN, CN_EIGHT, CN_NINE);  </span><br><span class="line"> radices = new Array(<span class="string">""</span>, CN_TEN, CN_HUNDRED, CN_THOUSAND);  </span><br><span class="line"> bigRadices = new Array(<span class="string">""</span>, CN_TEN_THOUSAND, CN_HUNDRED_MILLION);  </span><br><span class="line"> decimals = new Array(CN_TEN_CENT, CN_CENT);  </span><br><span class="line"> // Start processing:  </span><br><span class="line"> outputCharacters = <span class="string">""</span>;  </span><br><span class="line"> // Process integral part <span class="keyword">if</span> it is larger than <span class="number">0</span>:  </span><br><span class="line"> <span class="keyword">if</span> (Number(integral) &gt; <span class="number">0</span>) &#123;  </span><br><span class="line"> 	zeroCount = <span class="number">0</span>;  </span><br><span class="line"> 	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; integral.length; i++) &#123;  </span><br><span class="line"> 		p = integral.length - i - <span class="number">1</span>;  </span><br><span class="line"> 		d = integral.substr(i, <span class="number">1</span>);  </span><br><span class="line"> 		quotient = p / <span class="number">4</span>;  </span><br><span class="line"> 		modulus = p % <span class="number">4</span>;  </span><br><span class="line">		<span class="keyword">if</span> (d == <span class="string">"0"</span>) &#123;  </span><br><span class="line">			zeroCount++;  </span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">			<span class="keyword">if</span> (zeroCount &gt; <span class="number">0</span>)&#123;  </span><br><span class="line">				outputCharacters += digits[<span class="number">0</span>];  </span><br><span class="line">			&#125;  </span><br><span class="line">			zeroCount = <span class="number">0</span>;  </span><br><span class="line">			outputCharacters += digits[Number(d)] + radices[modulus];  </span><br><span class="line">		&#125;  </span><br><span class="line">		<span class="keyword">if</span> (modulus == <span class="number">0</span> &amp;&amp; zeroCount&lt;<span class="number">4</span>) &#123;  </span><br><span class="line">			outputCharacters += bigRadices[quotient];  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;  </span><br><span class="line"> 	outputCharacters += CN_DOLLAR;  </span><br><span class="line"> &#125;  </span><br><span class="line">	// Process decimal part <span class="keyword">if</span> there is:  </span><br><span class="line">	<span class="keyword">if</span> (decimal != <span class="string">""</span>) &#123;  </span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; decimal.length; i++) &#123;  </span><br><span class="line">			d = decimal.substr(i, <span class="number">1</span>);  </span><br><span class="line">			<span class="keyword">if</span> (d != <span class="string">"0"</span>) &#123;  </span><br><span class="line">				outputCharacters += digits[Number(d)] + decimals[i];  </span><br><span class="line">			&#125;  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;  </span><br><span class="line">	// Confirm and <span class="built_in">return</span> the final output string:  </span><br><span class="line">	<span class="keyword">if</span> (outputCharacters == <span class="string">""</span>) &#123;  </span><br><span class="line">		outputCharacters = CN_ZERO + CN_DOLLAR;  </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="keyword">if</span> (decimal == <span class="string">""</span>)&#123;  </span><br><span class="line">		outputCharacters += CN_INTEGER;  </span><br><span class="line">	&#125;  </span><br><span class="line">	outputCharacters = CN_SYMBOL + outputCharacters;  </span><br><span class="line">	<span class="built_in">return</span> outputCharacters;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=<span class="string">"Digits"</span> <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"Digits"</span> size=<span class="string">"20"</span> /&gt;  </span><br><span class="line">&lt;input id=<span class="string">"Convert"</span> <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"Convert"</span> name=<span class="string">"Convert"</span> onclick=<span class="string">"Result.value = convertCurrency(Digits.value);"</span> /&gt;  </span><br><span class="line">&lt;input id=<span class="string">"Result"</span> <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"Result"</span> size=<span class="string">"60"</span> /&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class=]]>
    </summary>
    
      <category term="代码研究" scheme="http://fire17643.github.io/blog/tags/%E4%BB%A3%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[原型对象问题]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/17/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://fire17643.github.io/blog/2015/06/17/原型对象的问题/</id>
    <published>2015-06-17T06:11:04.417Z</published>
    <updated>2015-06-17T06:11:04.417Z</updated>
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123;&#125;</span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">    name:<span class="string">"wenbin"</span>,</span><br><span class="line">    age:<span class="number">29</span>,</span><br><span class="line">    job:<span class="string">"software engineer"</span>,</span><br><span class="line">    friends:[<span class="string">"Shelby"</span>,<span class="string">"Court"</span>],</span><br><span class="line">    sayName:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var person1=new Person();</span><br><span class="line">var person2=new Person();</span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>);</span><br><span class="line"> </span><br><span class="line">console.log(person1.friends);//Shelby,Court,Van</span><br><span class="line">console.log(person2.friends);//Shelby,Court,Van</span><br><span class="line">console.log(person1.friends===person2.friends);//<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>对person1.friends的修改也会反映到person2.friends中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> Person(name,age,job)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.age=age;</span><br><span class="line">    this.job=job;</span><br><span class="line">    this.friends=[<span class="string">"Shelby"</span>,<span class="string">"Court"</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">    constructor:Person,</span><br><span class="line">    sayName:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var person1=new Person(<span class="string">"Nicholas"</span>,<span class="number">29</span>,<span class="string">"Software Engineer"</span>);</span><br><span class="line">var person2=new Person(<span class="string">"Greg"</span>,<span class="number">27</span>,<span class="string">"Doctor"</span>);</span><br><span class="line"> </span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>);</span><br><span class="line">console.log(person1.friends);//Shelby,Court,Van</span><br><span class="line">console.log(person2.friends);//Shelby,Court</span><br><span class="line">console.log(person1.friends===person2.friends);//flase</span><br><span class="line">console.log(person1.sayName===person2.sayName);//<span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>组合使用构造函数模式和原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性</p>
<p></p><h3>继承</h3><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>()&#123;</span><br><span class="line">    this.colors=[<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>()&#123;&#125;</span><br><span class="line"> </span><br><span class="line">SubType.prototype=new SuperType();</span><br><span class="line"> </span><br><span class="line">var instance1=new SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">console.log(instance1.colors);//red,blue,green,black</span><br><span class="line"> </span><br><span class="line">var instance2=new SubType();</span><br><span class="line">console.log(instance2.colors);//red,blue,green,black</span><br></pre></td></tr></table></figure><p></p>
<p>在创建子类型的实例时，不能向超类型的构造函数中传递参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> SuperType(name)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.colors=[<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">SuperType.prototype.sayName=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> SubType(name,age)&#123;</span><br><span class="line">    SuperType.call(this,name);</span><br><span class="line">    this.age=age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">SubType.prototype=new SuperType();</span><br><span class="line">SubType.prototype.construtor=SubType;</span><br><span class="line">SubType.prototype.sayAge=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.age);</span><br><span class="line">&#125;;</span><br><span class="line">var instance1=new SubType(<span class="string">"wenbin"</span>,<span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">console.log(instance1.colors);//red,blue,green,black</span><br><span class="line">instance1.sayName();//wenbin</span><br><span class="line">instance1.sayAge();//<span class="number">29</span></span><br><span class="line"> </span><br><span class="line">var instance2=new SubType(<span class="string">"greg"</span>,<span class="number">27</span>);</span><br><span class="line">console.log(instance2.colors);//red,blue,green</span><br><span class="line">instance2.sayName();//greg</span><br><span class="line">instance2.sayAge();//<span class="number">27</span></span><br></pre></td></tr></table></figure></p>
<p>组合继承使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> object(o)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>()&#123;&#125;</span><br><span class="line">    F.prototype=o;</span><br><span class="line">    <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> inheritPrototype(subType,superType)&#123;</span><br><span class="line">    var prototype=object(superType.prototype);</span><br><span class="line">    prototype.constructor=subType;</span><br><span class="line">    subType.prototype=prototype;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> SuperType(name)&#123;</span><br><span class="line">    this.name=name;</span><br><span class="line">    this.colors=[<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">SuperType.prototype.sayName=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> SubType(name,age)&#123;</span><br><span class="line">    SuperType.call(this,name);</span><br><span class="line">    this.age=age;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SubType,SuperType);</span><br><span class="line">SubType.prototype.sayAge=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    console.log(this.age);</span><br><span class="line">&#125;</span><br><span class="line">var instance=new SubType(<span class="string">"wenbin"</span>,<span class="number">29</span>);</span><br><span class="line">console.log(instance.name);//wenbin</span><br><span class="line">console.log(instance.age);//<span class="number">29</span></span><br></pre></td></tr></table></figure></p>
<p>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class=]]>
    </summary>
    
      <category term="原型" scheme="http://fire17643.github.io/blog/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些难解的JavaScript语法特性1]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/17/%E4%B8%80%E4%BA%9B%E9%9A%BE%E8%A7%A3%E7%9A%84javascript%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A72/"/>
    <id>http://fire17643.github.io/blog/2015/06/17/一些难解的javascript语法特性2/</id>
    <published>2015-06-17T06:05:49.208Z</published>
    <updated>2015-06-17T06:05:49.208Z</updated>
    <content type="html"><![CDATA[<p>一些难解的javascript语法特性2<br>1.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> a(x) &#123;</span><br><span class="line">    <span class="built_in">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">var a;</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure></p>
<p>2.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>() &#123;</span><br><span class="line">    alert(this);</span><br><span class="line">&#125;</span><br><span class="line">a.call(null)</span><br></pre></td></tr></table></figure></p>
<p>3.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"Why am I a "</span> + typeof + <span class="string">""</span>);</span><br></pre></td></tr></table></figure></p>
<p>4.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(++[[]][+[]]);//<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>5.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="number">1234</span>[<span class="string">'toString'</span>][<span class="string">'length'</span>]);//<span class="number">1</span></span><br><span class="line">console.log(&#123;<span class="number">1</span>:<span class="number">2</span>&#125;.toString().length);//<span class="number">15</span></span><br><span class="line">console.log([<span class="number">1</span>].toString().length);//<span class="number">1</span></span><br><span class="line">console.log([<span class="number">1</span>,<span class="number">4</span>].toString().length);//<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>6.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">	console.log(typeof arguments);</span><br><span class="line">	<span class="built_in">return</span> typeof arguments;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>不能显式创建 arguments 对象。arguments 对象只有函数开始时才可用。函数的 arguments 对象并不是一个数组，访问单个参数的方式与访问数组元素的方式相同。索引 n 实际上是 arguments 对象的 0…n 属性的其中一个参数。</p>
<p>由上面可以知道arguments不是一个数组，只不过元素的访问方式与数组相同，它是一个使用于函数体中的对象，用来管理函数的实际参数。</p>
<p>所以这道题目的答案是 object ；<br>7.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var x=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">var foo = &#123;</span><br><span class="line">    x:<span class="number">20</span>,</span><br><span class="line">    bar:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var x = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">return</span> this.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = foo.bar();</span><br><span class="line">var b = (foo.bar)();</span><br><span class="line">var c = (foo.bar=foo.bar)();</span><br><span class="line">var d = (foo.bar,foo.bar)();</span><br><span class="line"></span><br><span class="line">console.log(a,b,c,d);//<span class="number">20</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<p>(foo.bar=foo.bar) 这是一个表达式，得出的是返回的值 value，即foo.bar的函数对象，而不是引用 Reference，就像这样一个写法：</p>
<p>var x = 10; (function() { return this.x; })();</p>
<p>，括号里面是函数的值，this指向是window（可以通过上面的ECMA语言规范链接查看原理），所以打印出来的是 10；<br>8.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;&#125;;</span><br><span class="line">var key1 = <span class="number">2</span>;</span><br><span class="line">var key2 = &#123; toString : <span class="function"><span class="title">function</span></span>() &#123; <span class="built_in">return</span> <span class="number">2</span> &#125; &#125;;</span><br><span class="line">var key3 = &#123; x : <span class="number">1</span> &#125;;</span><br><span class="line">var key4 = &#123; y : <span class="number">2</span> &#125;;</span><br><span class="line"> </span><br><span class="line">o[key1] = <span class="number">1</span>;</span><br><span class="line">o[key2] = <span class="number">2</span>;</span><br><span class="line">o[key3] = <span class="number">3</span>;</span><br><span class="line">o[key4] = <span class="number">4</span>;</span><br><span class="line">// o : Object &#123;<span class="number">2</span>: <span class="number">2</span>, [object Object]: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>9.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> a(x,y,z) &#123;</span><br><span class="line">    arguments[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">    console.log(z);</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);// <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> a(x,y,z) &#123;</span><br><span class="line">    z = <span class="number">4</span>;</span><br><span class="line">    console.log(arguments[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); // <span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<p>10.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">a</span></span>()&#123;</span><br><span class="line">    var x = y = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line">console.log(y);// <span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<p>11.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], b =a,a = [];</span><br><span class="line">        console.log(b);// [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], b =a,a.length = <span class="number">0</span>;</span><br><span class="line">        console.log(b);// []</span><br></pre></td></tr></table></figure></p>
<p>当对a重新赋值时，a的指针发生变化，而b的指针仍然指向[1,2,3],设置length时，2者都指向同样的块<br>12.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = new RegExp(<span class="string">"123"</span>,<span class="string">"g"</span>);</span><br><span class="line">var b = <span class="string">"abc#123"</span>;</span><br><span class="line"></span><br><span class="line">console.log(a.test(b));//<span class="literal">true</span></span><br><span class="line">console.log(a.test(b));//<span class="literal">false</span></span><br><span class="line">console.log(a.test(b));//<span class="literal">true</span></span><br><span class="line">console.log(a.test(b));//<span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p>为什么会输出true，false，true，false？</p>
<p>原来正则表达式中g标记有个lastIndex属性，该属性存放一个整数，它声明的是上一次匹配文本之后的第一个字符的位置。上次匹配的结果是由方法 RegExp.exec() 和RegExp.test() 找到的，它们都以 lastIndex 属性所指的位置作为下次检索的起始点。这样，就可以通过反复调用这两个方法来遍历一个字符串中的所有匹配文本。该属性是可读可写的。只要目标字符串的下一次搜索开始，就可以对它进行设置。当方法 exec() 或 test() 再也找不到可以匹配的文本时，它们会自动把 lastIndex 属性重置为 0。<br>如下面js代码输出RegExp的lastIndex，就可以很清楚的说明这个问题了：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = new RegExp(<span class="string">"123"</span>,<span class="string">"g"</span>);</span><br><span class="line">var b = <span class="string">"abc#123"</span>;</span><br><span class="line">console.log(a.test(b));//<span class="literal">true</span></span><br><span class="line">console.log(a.lastIndex);//<span class="number">7</span></span><br><span class="line">console.log(a.test(b));//<span class="literal">false</span></span><br><span class="line">console.log(a.lastIndex);//<span class="number">0</span></span><br><span class="line">console.log(a.test(b));//<span class="literal">true</span></span><br><span class="line">console.log(a.lastIndex);//<span class="number">7</span></span><br><span class="line">console.log(a.test(b));//<span class="literal">false</span></span><br><span class="line">console.log(a.lastIndex);//<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>13.<br>parseInt(‘   12’, 10);  // 12<br>parseInt(0.0000008) === 8<br>String(0.0000008); // ‘8e-7’<br>parseInt(1/0, 19);      // 18<br>parseInt(false, 16);    // 250<br>parseInt(parseInt, 16); // 15<br>parseInt(“0x10”);       // 16<br>parseInt(“10”, 2);      // 2</p>
<p>14.[“1”, “2”, “3”].map(parseInt)//[1, NaN, NaN]</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一些难解的javascript语法特性2<br>1.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span cla]]>
    </summary>
    
      <category term="issue" scheme="http://fire17643.github.io/blog/tags/issue/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些难解的JavaScript语法特性1]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/17/%E4%B8%80%E4%BA%9B%E9%9A%BE%E8%A7%A3%E7%9A%84JavaScript%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A71/"/>
    <id>http://fire17643.github.io/blog/2015/06/17/一些难解的JavaScript语法特性1/</id>
    <published>2015-06-17T06:02:11.205Z</published>
    <updated>2015-06-17T06:02:11.205Z</updated>
    <content type="html"><![CDATA[<p>一些蛋疼的JavaScript语法特性,有解释。</p>
<p>逐个来看</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    alert(typeof arguments);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>因为typeof能返回的值只有 object string number function undefined boolean 这6种，而且arguments是个类数组（不是真正的数组），数组、类数组的typeof都会返回object。所以答案：object。</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var f = <span class="keyword">function</span> <span class="function"><span class="title">g</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="number">23</span>;</span><br><span class="line">&#125;;</span><br><span class="line">typeof g();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这个呢，可以参考这里。因为这个函数表达式中的 g() 对外是不可见的  所以typeof g() 会系统出错。答案：Error</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (x) &#123;</span><br><span class="line">    delete x;</span><br><span class="line">    <span class="built_in">return</span> x;</span><br><span class="line">&#125;)(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这个也很简单，delete不能删除 变量 参数，  只能删除一个对象下面的属性。所以x的值不会变化 ，返回值：1</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var foo = &#123;</span><br><span class="line">    bar: <span class="function"><span class="title">function</span></span> () &#123;<span class="built_in">return</span> this.baz;&#125;,</span><br><span class="line">    baz: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> typeof arguments[<span class="number">0</span>]();</span><br><span class="line">&#125;)(foo.bar);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>首先呢，foo是个json对象，foo.bar这个属性就是一个函数定义，foo.bar作为参数，arguments接受这个整体单做函数来执行。(foo.bar只能看做一个函数名)</p>
<p>所以arguments<a href="">0</a>就相当于 (function () {return this.baz;})();此时的this是window，window没有baz这个属性，自然返回就是 “undefined”。<br>看这段代码就懂了</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var foo = &#123;</span><br><span class="line">    bar: <span class="keyword">function</span> (xx) &#123;console.log(this == xx);<span class="built_in">return</span> this;&#125;,</span><br><span class="line">    baz: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line">(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    console.log(arguments)</span><br><span class="line">    <span class="built_in">return</span>  arguments[<span class="number">0</span>](arguments);</span><br><span class="line">&#125;)(foo.bar);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>// 打印结果 true<br>所以this就是arguments,然后就明了了</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = &#123;</span><br><span class="line">    bar: <span class="function"><span class="title">function</span></span> () &#123;<span class="built_in">return</span> this.baz;&#125;,</span><br><span class="line">    baz: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">typeof (f = foo.bar)();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这个和上题一样foo.bar作为一个整体赋值给f，函数执行时this还是指向window。答案：undefined。</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;&#125;) &#123;   </span><br><span class="line">    x += typeof f;</span><br><span class="line">&#125;</span><br><span class="line">x;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>首先呢，函数声明是不能写在运算符的运算过程中，所以f是找不到的，那typeof f 就是undefined   然后字符串再连接，结果就是：”1undefined” 。</p>
<p>虽然上面的程序写法不对，但还是会返回为true。（因为返回为fasle就那么几种情况，其余的都是true）</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x = [typeof x, typeof y][<span class="number">1</span>];</span><br><span class="line">typeof typeof x;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>只看最后一行就行了 ，typeof返回的那几个值都是字符串 ，再把他们typeof一次，那就是string了。</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (foo) &#123;</span><br><span class="line">    <span class="built_in">return</span> typeof foo.bar;</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">        bar: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这个闭包自执行里面的实参:json对象foo和形参foo其实没有任何关系，那个形参foo就是整个实参json对象。所以json对象里面第一层没有bar属性，肯定就是返回 undefined 了</p>
<p>如果改为foo.foo.bar的话  那就能返回 “number”了。</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;<span class="built_in">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="built_in">return</span> f();</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;<span class="built_in">return</span> <span class="number">2</span>;&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这个就是预编译，后面的f会覆盖前面的f 然后就返回 2 。</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">new f() instanceof f;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这个题目的关键是那个  “ return f ”。</p>
<p>因为在构造函数中，如果return一个函数或者对象的话，那这个函数或者对象就会把这个构造函数给覆盖掉。也就是说，new f()之后变成了 f instanceof f，返回的自然是false。</p>
<p>如果是 function f(){return 1;}  那就返回true了</p>
<p>12.with (function(x, undefined){}) length;<br>with里面是一个函数，函数也是有长度的，而函数的长度呢就是函数形参的集合（arguments是实参的集合）。连个参数  返回2。</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">myfunc</span></span>()&#123;</span><br><span class="line">    alert(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line">myfunc();//输出world</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">myfunc</span></span>()&#123;</span><br><span class="line">    alert(<span class="string">'world'</span>);//输出world</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>首先看上面的代码，最终都是输出world。原因在于，javascript的引擎不是一行一行的分析执行代码的，而是一段一段的分析执行的，定义式的函数语句会被提取出来优先执行。函数定义执行完毕后，才会按顺序执行其他语句代码。所以第一次调用myfunc()之前，第一个函数语句定义的代码已经被下面的定义给覆盖掉了。所以才会执行输出“world”的那个函数。</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var myName = <span class="string">'cc'</span>;</span><br><span class="line">name = <span class="string">'chenchen'</span>;</span><br><span class="line">output();</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">output</span></span>() &#123;</span><br><span class="line">     alert(myName); //undefined</span><br><span class="line">     alert(name); //chenchen</span><br><span class="line">     var myName = <span class="string">'ccking'</span>;</span><br><span class="line">     name = <span class="string">'javascript'</span>;</span><br><span class="line">     alert(myName); //ccking</span><br><span class="line">     alert(name); //javascript</span><br><span class="line">&#125;</span><br><span class="line">alert(myName); //cc</span><br><span class="line">alert(name); //javascript</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>第一个输出的myName，是在一个子作用域中（output函数）输出，js的执行引擎会在当前作用域查找变量，由于预编译时已经把myName初始化为undefined，自然输出为undefined。</p>
<p>而name不是var定义的，相当于window对象的属性，全局使用，不会出错。</p>
<p>再重新定义了myName 和name 所以输出了ccking 和 javascript</p>
<p>在output函数外面，myName的作用域回到根作用域window 依然输出cc;而name属性在output函数中被更改所以输出javascript。</p>
<p>很显然，使用var修饰的myName标识符在函数内外是两个东西外面的‘cc’不会因为output函数内的改为‘ccking’而变化，回到外面依然是cc；name没有var修饰所以就是一个东西，在函数内修改，函数外就会表现出来了。<br>15.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alert(Function instanceof Object); // <span class="literal">true</span></span><br><span class="line">alert(Object instanceof Function); // <span class="literal">true</span></span><br><span class="line">alert(Object.forEach); // undefined</span><br><span class="line">Function.prototype.forEach = <span class="keyword">function</span>(object, block, context) &#123;</span><br><span class="line">    <span class="keyword">for</span> (var key <span class="keyword">in</span> object) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeof this.prototype[key] == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">            block.call(context, object[key], key, object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>给 Function 设置的原型方法 forEach，“有趣”的是 Object 也能够获取。<br>16.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Foo</span></span>() &#123;&#125;;</span><br><span class="line">var foo = new Foo();</span><br><span class="line"></span><br><span class="line">alert(foo instanceof Foo); // <span class="literal">true</span></span><br><span class="line">alert(foo instanceof Object); // <span class="literal">true</span></span><br><span class="line">alert(foo instanceof Function); // <span class="literal">false</span></span><br><span class="line">alert(Foo instanceof Function); // <span class="literal">true</span></span><br><span class="line">alert(Foo instanceof Object); // <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://fireboy.sinaapp.com/?attachment_id=" rel="external" target="_blank"><img src="http://fireboy-wordpress.stor.sinaapp.com/uploads/2014/09/javascript_object_layout.jpg" alt="" title="javascript_object_layout" width="611" height="760" class="alignnone size-full wp-image-160"></a><br>17.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()&#123;</span><br><span class="line">        foo.abc = <span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'def'</span>)&#125;</span><br><span class="line">        this.abc = <span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'xyz'</span>)&#125;</span><br><span class="line">        abc = <span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'@@@@@'</span>)&#125;;</span><br><span class="line">        var abc = <span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'$$$$$$'</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line">foo.prototype.abc = <span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'456'</span>);&#125;</span><br><span class="line">foo.abc = <span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'123'</span>);&#125;</span><br><span class="line">var f = new foo();</span><br><span class="line">f.abc();</span><br><span class="line">foo.abc();</span><br><span class="line">abc();</span><br></pre></td></tr></table></figure></p>
<p>18.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> ()&#123;</span><br><span class="line">	   alert(<span class="number">5</span>)</span><br><span class="line">	&#125;,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> ()&#123;</span><br><span class="line">   alert(<span class="number">3</span>)</span><br><span class="line">&#125;,<span class="number">10</span>);</span><br><span class="line">alert(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> ()&#123;</span><br><span class="line">   alert(<span class="number">4</span>)</span><br><span class="line">&#125;,<span class="number">10</span>);</span><br><span class="line">//<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<p>19.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var 弹框 = alert, 函数 = Function;</span><br><span class="line"><span class="keyword">function</span> 贤心(行为)&#123;</span><br><span class="line">	弹框(<span class="string">'此人正在'</span>+ 行为);</span><br><span class="line">&#125;;</span><br><span class="line">函数(<span class="string">'贤心("发呆")'</span>)();</span><br></pre></td></tr></table></figure></p>
<p>20.<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="string">"a"</span> <span class="keyword">in</span> window)) &#123;</span><br><span class="line">    var a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(a)//undefined</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一些蛋疼的JavaScript语法特性,有解释。</p>
<p>逐个来看</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1<]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>