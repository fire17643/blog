<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[firestfly]]></title>
  
  <link href="/blog/atom.xml" rel="self"/>
  <link href="http://fire17643.github.io/blog//"/>
  <updated>2015-07-07T01:42:29.931Z</updated>
  <id>http://fire17643.github.io/blog//</id>
  
  <author>
    <name><![CDATA[黃志文]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[z-index 应用简单总结]]></title>
    <link href="http://fire17643.github.io/blog/2015/07/07/z-index%E5%BA%94%E7%94%A8%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
    <id>http://fire17643.github.io/blog/2015/07/07/z-index应用简单总结/</id>
    <published>2015-07-07T01:42:29.931Z</published>
    <updated>2015-07-07T01:42:29.931Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>做过页面布局的同学对z-index属性应该是很熟悉了，z-index是针对网页显示中的一个特殊属性。因为显示器是显示的图案是一个二维平面，拥有x轴和y轴来表示位置属性。为了表示三维立体的概念如显示元素的上下层的叠加顺序引入了z-index属性来表示z轴的区别。表示一个元素在叠加顺序上的上下立体关系。</p>
</blockquote>
<p>z-index值较大的元素将叠加在z-index值较小的元素之上。对于未指定此属性的定位对象，z-index 值为正数的对象会在其之上，而 z-index 值为负数的对象在其之下。</p>
<p>简单演示</p>
<div style="width:200px;height:200px;background-color:#0e0;"></div><br><div style="position:relative; top:-50px; width:100px;height:100px;background-color:#00e;"></div>

<p>两个DIV，第二个向上移动50px，正常情况应该是这样的</p>
<p>第二个div遮住了第一个div，对第二个添加z-index属性</p>
<div style="width:200px;height:200px;background-color:#0e0;"></div><br><div style="position:relative; top:-50px; width:100px;height:100px;background-color:#00e;z-index:-5;"></div>

<p>结果就会变成这个样子，z-index 最简单的应用就是这样</p>
<p>只对定位元素有效<br>z-index属性适用于定位元素（position属性值为 relative 或 absolute 或 fixed的对象），用来确定定位元素在垂直于显示屏方向（称为Z轴）上的层叠顺序，也就是说如果元素是没有定位的，对其设置的z-index会是无效的。</p>
<div style="width:200px;height:200px;background-color:#0e0;z-index:30"></div><br><div style="position:relative; top:-50px; width:100px;height:100px;background-color:#00e;z-index:10;"></div>

<p>虽然第一个div的z-index比第二个div大，但是由于第一个div未定位，其z-index属性未起作用，所以仍然会被第二个div覆盖。</p>
<p>相同z-index谁上谁下<br>相同的z-index其实有两种情况</p>
<p>1.如果两个元素都没有定位发生位置重合现象或者两个都已定位元素且z-index相同发生位置重合现象，那么按文档流顺序，后面的覆盖前面的。</p>
<div style="position:relative;width:200px;height:200px;background-color:#0e0;"></div><br><div style="position:relative; top:-50px; width:100px;height:100px;background-color:#00e;"></div>

<p>2.如果两个元素都没有设置z-index，使用默认值，一个定位一个没有定位，那么定位元素覆盖未定位元素</p>
<div style="position:relative;top:50px;width:200px;height:200px;background-color:#0e0;"></div><br><div style=" width:100px;height:100px;background-color:#00e;"></div>

<p>父子关系处理<br>如果父元素z-index有效，那么子元素无论是否设置z-index都和父元素一致，会在父元素上方</p>
<div style="position:relative;width:200px;height:200px;background-color:#0e0;z-index:10;"><br><div style="position:relative;width:100px;height:100px;background-color:#00e;z-index:-5;"></div></div>

<p>虽然子元素设置z-index比父元素小，但是子元素仍然出现在父元素上方</p>
<p>如果父元素z-index失效（未定位或者使用默认值），那么定位子元素的z-index设置生效</p>
<div style="position:relative;width:200px;height:200px;background-color:#0e0;"><br>    <div style="position:relative;width:100px;height:100px;background-color:#00e;z-index:-5;"></div><br></div>

<p>子元素z-index=-5生效，被父元素覆盖</p>
<p>兄弟之间子元素<br>如果兄弟元素的z-index生效，那么其子元素覆盖关系有父元素决定</p>
<div style="position:relative;width:100px;height:100px;background-color:#0e0;z-index:5;"><br>    <div style="position:relative;width:50px;height:250px;background-color:#00e;z-index:50;"></div><br></div><br><div style="position:relative;width:100px;height:100px;background-color:#0e0;z-index:10;margin-top:4px;"><br>    <div style="position:relative;width:30px;height:150px;background-color:#e0e;z-index:-10;"></div><br></div>

<p>虽然第一个div的子元素的z-index比较高，但是由于其父元素z-index比第二个div低，所以第一个div子元素会被第二个div及其子元素覆盖</p>
<p>应用<br>经常会有这样一种错误在table中最后各行一个td放一个div，点击弹出子菜单做一些删除、修改什么的操作，但是每次弹出的菜单都会被下面各行的div覆盖,像下面这张图一样，弹出的菜单没有在页面最上方。</p>
<p>本文的例子都是以符合W3C的Chrome浏览器做验证，但在IE6，7 z-index的默认值并不是auto而是0，这样会导致很多奇怪现象，这时候就需要考虑这点了。</p>
<p>推荐阅读文章：<a href="http://www.qianduan.net/that-thing-on-the-z-index/" target="_blank" rel="external">关于z-index的那些事儿</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>做过页面布局的同学对z-index属性应该是很熟悉了，z-index是针对网页显示中的一个特殊属性。因为显示器是显示的图案是一个二维平面，拥有x轴和y轴来表示位置属性。为了表示三维立体的概念如显示元素的上下层的叠加顺序引入了z-index属性来表示]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[运算符的优先级总结]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/24/sum/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://fire17643.github.io/blog/2015/06/24/sum/运算符优先级总结/</id>
    <published>2015-06-24T07:59:47.030Z</published>
    <updated>2015-06-24T07:59:47.030Z</updated>
    <content type="html"><![CDATA[<table width="100%"><tr><th>&nbsp;</th><th>运算符</th><th>描述</th></tr><tr><th>1</th><td>. [] ()</td><td>字段访问、数组下标、函数调用以及表达式分组</td></tr><tr><th>2</th><td>++ &#8212; &#8211; ~ ! delete new typeof void</td><td>一元运算符、返回数据类型、对象创建、未定义值</td></tr><tr><th>3</th><td>* / %</td><td>乘法、除法、取模<em>(左结合L)</em></td></tr><tr><th>4</th><td>+ &#8211; +</td><td>加法、减法、字符串连接<em>(左结合L)</em></td></tr><tr><th>5</th><td>&lt; &lt; &gt;&gt; &gt;&gt;&gt;</td><td>移位</td></tr><tr><th>6</th><td>&lt; &lt;= &gt; &gt;= instanceof</td><td>小于、小于等于、大于、大于等于、instanceof<em>(左结合L)</em></td></tr><tr><th>7</th><td>== != === !==</td><td>等于、不等于、严格相等、非严格相等<em>(左结合L)</em></td></tr><tr><th>8</th><td>&amp;</td><td>按位与</td></tr><tr><th>9</th><td>^</td><td>按位异或</td></tr><tr><th>10</th><td>|</td><td>按位或</td></tr><tr><th>11</th><td>&amp;&amp;</td><td>逻辑与<em>(左结合L)</em></td></tr><tr><th>12</th><td>||</td><td>逻辑或<em>(左结合L)</em></td></tr><tr><th>13</th><td>?:</td><td>条件</td></tr><tr><th>14</th><td>= += -=</td><td>赋值、运算赋值</td></tr><tr><th>15</th><td>,</td><td>多重求值</td></tr></table>     

<p>先做个简单的例子<br><code>++&#39;52&#39;.split(&#39;&#39;)[0]</code><br>结果是多少？</p>
<p>看了这个题目才知道自己对运算符优先级掌握的程度不够，先总结下:</p>
<p>从上表可以看出点.以及[]要比++的优先级高。因此，这里的问题等同于：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">result</span>;</span><br><span class="line"><span class="literal">result</span> = <span class="string">"52"</span>.split(<span class="string">""</span>);  // [<span class="string">"5"</span>, <span class="string">"2"</span>]</span><br><span class="line"><span class="literal">result</span> = <span class="literal">result</span>[<span class="number">0</span>]; // <span class="string">"5"</span></span><br><span class="line"><span class="literal">result</span> = ++<span class="literal">result</span>;  // <span class="number">6</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">2</span>*<span class="number">3</span>;<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">typeof</span> (<span class="number">2</span>*<span class="number">3</span>);<span class="comment">//"number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">2</span>+<span class="number">3</span>;<span class="comment">// "number3"</span></span><br></pre></td></tr></table></figure>
<p>注意：<br>    虽然说<code>++[&quot;5&quot;, &quot;2&quot;][0]</code>的返回值是6, 但是直接++”5”或者++5却是会报错的（FireBug控制台显示“invalid increment operand”错误），据说是因为只有变量才能++ 而’5’只是一个字符串。</p>
]]></content>
    <summary type="html">
    <![CDATA[<table width="100%"><tr><th>&nbsp;</th><th>运算符</th><th>描述</th></tr><tr><th>1</th><td>. [] ()</td><td>字段访问、数组下标、函数调用以及表达式分组</td></tr><tr><th>]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iframe高度自适应内容]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/24/iframe%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%86%85%E5%AE%B9/"/>
    <id>http://fire17643.github.io/blog/2015/06/24/iframe高度自适应内容/</id>
    <published>2015-06-24T06:17:01.359Z</published>
    <updated>2015-06-24T06:17:01.359Z</updated>
    <content type="html"><![CDATA[<p>演示一（如果在同个顶级域名下，不同子域名之间互通信息，设置document.domain=”caibaojian.com”<br>只要修改以上的iframe的ID即可了。或者你可以直接在iframe里面写代码，我们一般为了不污染HTML代码，建议使用上面的代码。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="variable">src=</span><span class="string">"backtop.html"</span> <span class="variable">frameborder=</span><span class="string">"0"</span> <span class="variable">scrolling=</span><span class="string">"no"</span> <span class="variable">id=</span><span class="string">"external-frame"</span> <span class="variable">onload=</span><span class="string">"setIframeHeight(this)"</span>&gt;&lt;/iframe&gt;;</span><br></pre></td></tr></table></figure></p>
<p>演示二<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">language</span>=<span class="value">"javascript"</span>&gt;</span><span class="javascript">;</span><br><span class="line"><span class="comment">//输入你希望根据页面高度自动调整高度的iframe的名称的列表</span></span><br><span class="line"><span class="comment">//用逗号把每个iframe的ID分隔. 例如: ["myframe1", "myframe2"]，可以只有一个窗体，则不用逗号。</span></span><br><span class="line"><span class="comment">//定义iframe的ID</span></span><br><span class="line"><span class="keyword">var</span> iframeids=[<span class="string">"test"</span>];</span><br><span class="line"><span class="comment">//如果用户的浏览器不支持iframe是否将iframe隐藏 yes 表示隐藏，no表示不隐藏</span></span><br><span class="line"><span class="keyword">var</span> iframehide=<span class="string">"yes"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dyniframesize</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> dyniframe=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;iframeids.length; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line">			<span class="comment">//自动调整iframe高度</span></span><br><span class="line">			dyniframe[dyniframe.length] = <span class="built_in">document</span>.getElementById(iframeids[i]);</span><br><span class="line">			<span class="keyword">if</span> (dyniframe[i] &amp;&amp; !<span class="built_in">window</span>.opera)&#123;</span><br><span class="line">				dyniframe[i].style.display=<span class="string">"block"</span>;</span><br><span class="line">				<span class="keyword">if</span> (dyniframe[i].contentDocument &amp;&amp; dyniframe[i].contentDocument.body.offsetHeight)&#123; <span class="comment">//如果用户的浏览器是NetScape</span></span><br><span class="line">					dyniframe[i].height = dyniframe[i].contentDocument.body.offsetHeight;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dyniframe[i].Document &amp;&amp; dyniframe[i].Document.body.scrollHeight)&#123; <span class="comment">//如果用户的浏览器是IE</span></span><br><span class="line">					dyniframe[i].height = dyniframe[i].Document.body.scrollHeight;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//根据设定的参数来处理不支持iframe的浏览器的显示问题</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="built_in">document</span>.all || <span class="built_in">document</span>.getElementById) &amp;&amp; iframehide==<span class="string">"no"</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> tempobj=<span class="built_in">document</span>.all? <span class="built_in">document</span>.all[iframeids[i]] : <span class="built_in">document</span>.getElementById(iframeids[i]);</span><br><span class="line">			tempobj.style.display=<span class="string">"block"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line">	<span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, dyniframesize, <span class="literal">false</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent)&#123;</span><br><span class="line">	<span class="built_in">window</span>.attachEvent(<span class="string">"onload"</span>, dyniframesize);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="built_in">window</span>.onload=dyniframesize;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script &gt;;</span></span></span><br></pre></td></tr></table></figure></p>
<p>演示三<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iframeAutoFit</span><span class="params">(iframeObj)</span></span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!iframeObj) <span class="keyword">return</span>;</span><br><span class="line">		iframeObj.height=(iframeObj.Document?iframeObj.Document.body.scrollHeight:iframeObj.contentDocument.body.offsetHeight);</span><br><span class="line">	&#125;,<span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>演示四<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="variable">src=</span><span class="string">"backtop.html"</span> <span class="variable">frameborder=</span><span class="string">"0"</span> <span class="variable">scrolling=</span><span class="string">"no"</span> <span class="variable">id=</span><span class="string">"test"</span> <span class="variable">onload=</span><span class="string">"this.height=100"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reinitIframe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> bHeight = iframe.contentWindow.document.body.scrollHeight;</span><br><span class="line">		<span class="keyword">var</span> dHeight = iframe.contentWindow.document.documentElement.scrollHeight;</span><br><span class="line">		<span class="keyword">var</span> height = <span class="built_in">Math</span>.max(bHeight, dHeight);</span><br><span class="line">		iframe.height = height;</span><br><span class="line">		<span class="built_in">console</span>.log(height);</span><br><span class="line">	&#125;<span class="keyword">catch</span> (ex)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.setInterval(<span class="string">"reinitIframe()"</span>, <span class="number">200</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>演示五<br>打开调试运行窗口可以看到运行。</p>
<p>跨域的时候，由于js的同源策略，父页面内的js不能获取到iframe页面的高度。需要一个页面来做代理。<br>方法如下：假设www.a.com下的一个页面a.html要包含www.b.com下的一个页面c.html。<br>我们使用www.a.com下的另一个页面agent.html来做代理，通过它获取iframe页面的高度，并设定iframe元素的高度。</p>
<p>a.html中包含iframe:<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="variable">src=</span><span class="string">"http://www.b.com/c.html"</span> <span class="variable">id=</span><span class="string">"Iframe"</span> <span class="variable">frameborder=</span><span class="string">"0"</span> <span class="variable">scrolling=</span><span class="string">"no"</span> <span class="variable">style=</span><span class="string">"border:0px;"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">在c.html中加入如下代码：</span><br><span class="line"></span><br><span class="line">&lt;iframe <span class="variable">id=</span><span class="string">"c_iframe"</span>  <span class="variable">height=</span><span class="string">"0"</span> <span class="variable">width=</span><span class="string">"0"</span>  <span class="variable">src=</span><span class="string">"http://www.a.com/agent.html"</span> <span class="variable">style=</span><span class="string">"display:none"</span> &gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">autoHeight</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> b_width = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollWidth,<span class="built_in">document</span>.body.clientWidth);</span><br><span class="line">	<span class="keyword">var</span> b_height = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.body.scrollHeight,<span class="built_in">document</span>.body.clientHeight);</span><br><span class="line">	<span class="keyword">var</span> c_iframe = <span class="built_in">document</span>.getElementById(<span class="string">"c_iframe"</span>);</span><br><span class="line">	c_iframe.src = c_iframe.src + <span class="string">"#"</span> + b_width + <span class="string">"|"</span> + b_height;  <span class="comment">// 这里通过hash传递b.htm的宽高</span></span><br><span class="line">&#125;)();</span><br><span class="line">&amp;lt/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后，agent.html中放入一段js:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="stata"></span><br><span class="line"><span class="keyword">var</span> b_iframe = <span class="keyword">window</span>.parent.parent.document.getElementById(<span class="string">"Iframe"</span>);</span><br><span class="line"><span class="keyword">var</span> hash_url = <span class="keyword">window</span>.location.hash;</span><br><span class="line"><span class="keyword">if</span>(hash_url.indexOf(<span class="string">"#"</span>)&gt;=0)&#123;</span><br><span class="line">	<span class="keyword">var</span> hash_width = hash_url.<span class="keyword">split</span>(<span class="string">"#"</span>)[1].<span class="keyword">split</span>(<span class="string">"|"</span>)[0]+<span class="string">"px"</span>;</span><br><span class="line">	<span class="keyword">var</span> hash_height = hash_url.<span class="keyword">split</span>(<span class="string">"#"</span>)[1].<span class="keyword">split</span>(<span class="string">"|"</span>)[1]+<span class="string">"px"</span>;</span><br><span class="line">	b_iframe.style.width = hash_width;</span><br><span class="line">	b_iframe.style.height = hash_height;</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>agent.html从URL中获得宽度值和高度值，并设置iframe的高度和宽度（因为agent.html在www.a.com下，所以操作a.html时不受JavaScript的同源限制）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>演示一（如果在同个顶级域名下，不同子域名之间互通信息，设置document.domain=”caibaojian.com”<br>只要修改以上的iframe的ID即可了。或者你可以直接在iframe里面写代码，我们一般为了不污染HTML代码，建议使用上面的代码。<br><f]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[左栏固定，右栏自适应布局的几种方式]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/24/%E5%B7%A6%E6%A0%8F%E5%9B%BA%E5%AE%9A%EF%BC%8C%E5%8F%B3%E6%A0%8F%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://fire17643.github.io/blog/2015/06/24/左栏固定，右栏自适应布局的几种方式/</id>
    <published>2015-06-24T06:14:33.576Z</published>
    <updated>2015-06-24T06:14:33.576Z</updated>
    <content type="html"><![CDATA[<h3 id="一、使用margin实现左固定右自适应">一、使用margin实现左固定右自适应</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#left &#123;</span></span><br><span class="line">  width: <span class="number">250</span>px;</span><br><span class="line">  height: <span class="number">250</span>px;</span><br><span class="line">  background: rgb(<span class="number">0</span>, <span class="number">214</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="built_in">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#right &#123;</span></span><br><span class="line">  height: <span class="number">200</span>px;</span><br><span class="line">  background: rgb(<span class="number">76</span>, <span class="number">129</span>, <span class="number">207</span>);</span><br><span class="line">  margin-left:<span class="number">110</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二、使用position:absolute实现的左固定右自适应">二、使用position:absolute实现的左固定右自适应</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#left &#123;</span></span><br><span class="line">  width: <span class="number">250</span>px;</span><br><span class="line">  height: <span class="number">250</span>px;</span><br><span class="line">  background: rgb(<span class="number">0</span>, <span class="number">214</span>, <span class="number">255</span>);</span><br><span class="line">  position:absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#right &#123;</span></span><br><span class="line">  height: <span class="number">200</span>px;</span><br><span class="line">  background: rgb(<span class="number">76</span>, <span class="number">129</span>, <span class="number">207</span>);</span><br><span class="line">  margin-left:<span class="number">110</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三、使用overflow:hidden实现的左固定右自适应">三、使用overflow:hidden实现的左固定右自适应</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#left &#123;</span></span><br><span class="line">  <span class="built_in">float</span>:left;</span><br><span class="line">  width: <span class="number">250</span>px;</span><br><span class="line">  height: <span class="number">250</span>px;</span><br><span class="line">  background: rgb(<span class="number">0</span>, <span class="number">214</span>, <span class="number">255</span>);</span><br><span class="line">  margin-right:<span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#right &#123;</span></span><br><span class="line">  height: <span class="number">200</span>px;</span><br><span class="line">  background: rgb(<span class="number">76</span>, <span class="number">129</span>, <span class="number">207</span>);</span><br><span class="line">  overflow:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、使用margin实现左固定右自适应">一、使用margin实现左固定右自适应</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1<]]>
    </summary>
    
      <category term="页面布局" scheme="http://fire17643.github.io/blog/tags/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/23/hello-world/"/>
    <id>http://fire17643.github.io/blog/2015/06/23/hello-world/</id>
    <published>2015-06-23T06:08:00.778Z</published>
    <updated>2015-06-23T06:08:00.778Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[其实，你不懂代码]]>
    
    </summary>
    
      <category term="markdown" scheme="http://fire17643.github.io/blog/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[几种方式判断页面是否加载完成的执行顺序]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/23/%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%88%A4%E6%96%AD%E9%A1%B5%E9%9D%A2%E6%98%AF%E5%90%A6%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://fire17643.github.io/blog/2015/06/23/几种方式判断页面是否加载完成的执行顺序/</id>
    <published>2015-06-23T06:06:29.091Z</published>
    <updated>2015-06-23T06:06:29.091Z</updated>
    <content type="html"><![CDATA[<p>如下有几种判断页面加载完成的方式：</p>
<h3 id="window-onload">window.onload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="document-readyState">document.readyState</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">f</span>)</span>&#123;/<span class="keyword">in</span>/.test(<span class="built_in">document</span>.readyState)?setTimeout(<span class="string">'r('</span>+f+<span class="string">')'</span>,<span class="number">9</span>):f()&#125;</span><br><span class="line">r(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="DOMContentLoaded">DOMContentLoaded</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span> , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">3</span>); </span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="$(function(){})">$(function(){})</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://cdn.bootcss.com/jquery/2.1.4/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    console.log(<span class="number">4</span>);    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// $(document).ready</span></span><br></pre></td></tr></table></figure>
<h3 id="$()-bind">$().bind</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">"load"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// $(window).load同上</span></span><br></pre></td></tr></table></figure>
<p>打印结果为：4，3，1，5，2<br>执行顺序为：$(function(){}) —&gt; DOMContentLoaded —&gt; window onload —&gt; $().on(“load”) —&gt; document.readyState</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如下有几种判断页面加载完成的方式：</p>
<h3 id="window-onload">window.onload</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><s]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript自定义事件]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/23/javascript%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    <id>http://fire17643.github.io/blog/2015/06/23/javascript自定义事件/</id>
    <published>2015-06-23T06:06:02.033Z</published>
    <updated>2015-06-23T06:06:02.033Z</updated>
    <content type="html"><![CDATA[<h2 id="如何自定义事件">如何自定义事件</h2><p>　　关于实现自定义事件的方式，我搜索中文的网页大概也就两种方式，而且就是那么几篇文章被抄来抄去，实在是乏味。总结一下：</p>
<p>　　第一种方式是自己模拟一个事件结构，其原理是这样的，我们平时监听事件的时候其实就是一种观察者模式，举个例子吧更明确些。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="variable">type=</span><span class="string">"button"</span> <span class="variable">value=</span><span class="string">"点我"</span> <span class="variable">onclick=</span><span class="string">"clickhandler()"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickhandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">    alert(<span class="string">'点你怎么了！'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里被观察的主体就是这个button，有一个handler订阅了它的点击事件，当被点击时，button会发布自己被点击的消息，handler接收到消息便开始执行处理函数。是相当标准的一个观察者模式。</p>
<p>　　照着这个思路，我们可以把整个过程用代码模拟出来，而不使用浏览器的事件机制，让这个button发布一点其他的消息，比如我们霸气的“三击”，然后写一个handler来监听这个三击事件即可。具体的实现例子我就不写了，因为我觉得这个模拟的办法简直是太土了，根本拿不上台面，想研究的可以看下这篇文章<a href="http://www.jb51.net/article/33697.htm" target="_blank" rel="external">http://www.jb51.net/article/33697.htm</a> 尽管我很恶心脚本之家这种随便剽窃别人文章的行为，但抱歉我真的找不到出处了。。。</p>
<p>　　看过了第一种土的掉渣的方式，我们再来看看高端洋气的写法。说白了，其实w3c已经定义了标准的自定义事件写法了。</p>
<h3 id="第二种方式如下：">第二种方式如下：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="built_in">document</span>.createEvent(<span class="string">'Event'</span>);<span class="comment">//创建一个Event对象e</span></span><br><span class="line">e.initEvent(<span class="string">'myevent'</span>,<span class="literal">true</span>,<span class="literal">true</span>);<span class="comment">//进行事件初始化</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>);<span class="comment">//获取DOM元素</span></span><br><span class="line">d1.addEventListener(<span class="string">'myevent'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'我监听到了自定义事件'</span>+event.type);</span><br><span class="line">&#125;,<span class="literal">false</span>);<span class="comment">//绑定监听器</span></span><br><span class="line">d1.dispatchEvent(e);<span class="comment">//触发该事件</span></span><br></pre></td></tr></table></figure>
<p>使用标准方法还是相当简单的，首先利用document的createEvent方法可以创建一个事件对象，createEvent接收一个参数表示事件的构造器，如Event、MouseEvent、UIEvent、CustomEvent，至于这些事件类都有哪些这里就不详细讲了，你可以查看我之前写的系列，有提到相关内容可以追踪链接。然后使用initEvent函数进行事件的初始化，接收的参数分别表示事件的类型、是否冒泡、是否可以用preventDefault()函数禁止默认行为，在这里你就可以为自定义事件起名字了。然后我们注册监听器并触发事件，这样d1便能监听到自己定义的事件了，ok，就这么简单！</p>
<p>本来自定义事件的方式就该到此结束了，一个小小的意外，我搜到了一篇国外的文章，看到了如下字样：<br><img src="http://images.cnitblog.com/blog/520134/201309/11233722-34f43b4dc2b6448db285847b0bb94717.png" alt="d"><br>来自mozilla开发者官网，说的就是上面的第二种方式。deprecated？啥意思？google之，藐视的意思！这种方式已经被藐视了哇！竟然还在国内的各网站中被转来转去，国外的同仁正在藐视我们。。。不能忍！赶快看看现在都用什么方式了。</p>
<p>第三种：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(<span class="string">'build'</span>, &#123; <span class="string">'detail'</span>: elem.dataset.time &#125;);<span class="comment">//区别就在这里~</span></span><br><span class="line">elem.addEventListener(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123; ... &#125;, <span class="literal">false</span>);</span><br><span class="line">elem.dispatchEvent(event);</span><br></pre></td></tr></table></figure></p>
<p>原来是直接创建Event对象，取代了原来的document.createEvent()，而且事件的初始化工作也在这里完成了，不必调用initEvent()了。嗯~不错，是能省一行代码。探讨为什么要这么写也没什么意义，咱跟着国际潮流走就是了。现在已经越来越明显，这个所谓的自定义事件，其实与其他事件是同宗同源，只是名字（类型）不同罢了。</p>
<h2 id="自定义事件实例">自定义事件实例</h2><p>了解了这么多，你肯定也和我一样还在困惑，上面的东西都是纸上兵法，这自定义事件到底怎么用我还是不知道。比如我就想要一个tripleclick（三击）事件，具体该如何实现呢？下面就来实践一下，GO~</p>
<p>自定义事件的步骤我总结为“三板斧”，下面开始操练：</p>
<p>①   创建自定义事件<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建自定义事件tripleclick</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> CustomEvent(<span class="string">'tripleclick'</span>,&#123;<span class="string">'detail'</span>:<span class="string">'somemsg'</span>&#125;);</span><br></pre></td></tr></table></figure></p>
<p>②　在合适的时机触发事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>);</span><br><span class="line">d1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;counter=<span class="number">0</span>;&#125;,<span class="number">500</span>);</span><br><span class="line">    <span class="keyword">if</span>(++counter==<span class="number">3</span>)&#123;</span><br><span class="line">        d1.dispatchEvent(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其实这第二步才是实现tripleclick事件的核心，首先声明一个计数器，每次元素点击便自增，当累计点击三次的时候将事件派发出去，即触发事件。为了防止每次点击之间的间隔时间过长，每次点击后由一个延时函数进行清零，保证只有是连续点击才触发。代码不难理解。我也想在这里说说我的看法，自定义事件不单单是起个自定义名字，还要给这个事件加以描述，定义好它是在什么样的情况下发生。</p>
<p>　　在这里，tripleclick是依赖于click的，看上去更像是一个逻辑事件，非真正的事件。但由于我们的对象确实是CustomEvent的实例，那它便无疑是一个货真价实的自定义事件。你可能会担心难道我们的自定义事件都要依赖于现有的事件？其实也未必，稍后会写另外一个例子来说明。</p>
<p>③   为事件注册监听函数<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d1.addEventListener(<span class="string">'tripleclick'</span>,<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span><br><span class="line">    alert(<span class="string">'我被三击了~'</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="如何自定义事件">如何自定义事件</h2><p>　　关于实现自定义事件的方式，我搜索中文的网页大概也就两种方式，而且就是那么几篇文章被抄来抄去，实在是乏味。总结一下：</p>
<p>　　第一种方式是自己模拟一个事件结构，其原理是这样的，我们平时监听事件的时候其实就]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Firebug 控制台指令]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/23/FireBug%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8C%87%E4%BB%A4/"/>
    <id>http://fire17643.github.io/blog/2015/06/23/FireBug控制台指令/</id>
    <published>2015-06-23T02:21:52.809Z</published>
    <updated>2015-06-23T02:21:52.809Z</updated>
    <content type="html"><![CDATA[<p>FireBug 是一个非常实用的JavaScript以及DOM查看调试工具，是 Firefox 的一个插件。</p>
<p>使用 FireBug 调试 AJAX 应用非常方便，终于可以告别 alert 时代了！<br>Console Logging 函数FireBug 为所有 Web 页面提供了一个 console 对象。</p>
<p>接下来我们就学习一下这个对象所包含的函数：</p>
<p>Logging 基础<br><code>console.log(&quot;message&quot; [,objects])</code> – 将一个字符串打印到控制台。</p>
<p>字符串可以包含任何“String Formatting”小节描述的模式。</p>
<p>字符串后面的对象应该用来取代之前字符串中的模式。（译者注：大家用过C里面 printf 吧，效果基本是一样的。）</p>
<p>Logging 等级通常根据不同的等级来区分Logging的严重程度是很有帮助的。</p>
<p>FireBug 提供了4个等级。</p>
<p>为了达到视觉分离的效果，这些函数与 log 不同的地方就是它们在被调用的时候会自动包含一个指向代码行数的链接。</p>
<p><code>console.debug(&quot;message&quot; [,objects])</code> – 记录一个 debug 消息。</p>
<p><code>console.info(&quot;message&quot; [,objects])</code> – 记录一个信息.</p>
<p><code>console.warn(&quot;message&quot; [,objects])</code> – 记录一个警告.</p>
<p><code>console.error(&quot;message&quot; [,objects])</code> – 记录一个错误.</p>
<p>断言断言是一条确保代码规则的非常好的途径.<br>console 对象包含了一系列各种类型的断言函数，并且允许你编写自己的断言函数。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="function"><span class="title">assert</span><span class="params">(a, <span class="string">"message"</span> [,objects])</span></span>` – Asserts that an <span class="tag">a</span> is true.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertEquals</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is equal to <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNotEquals</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is not equal to <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertGreater</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is greater than <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNotGreater</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is not greater than <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertLess</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is less than <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNotLess</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is not less than <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertContains</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is <span class="keyword">in</span> the array <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNotContains</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is not <span class="keyword">in</span> the array <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertTrue</span><span class="params">(a, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is equal to true.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertFalse</span><span class="params">(a, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is equal to false.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNull</span><span class="params">(a, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is equal to null.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNotNull</span><span class="params">(a, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is not equal to null.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertUndefined</span><span class="params">(a, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is equal to undefined.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNotUndefined</span><span class="params">(a, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is not equal to undefined.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertInstanceOf</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is an instance of type <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNotInstanceOf</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that <span class="tag">a</span> is not an instance of type <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertTypeOf</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that the type of <span class="tag">a</span> is equal to the string <span class="tag">b</span>.</span><br><span class="line"></span><br><span class="line">console.<span class="function"><span class="title">assertNotTypeOf</span><span class="params">(a, b, <span class="string">"message"</span> [,objects])</span></span> – Asserts that the type of <span class="tag">a</span> is not equal to the string <span class="tag">b</span>.</span><br></pre></td></tr></table></figure></p>
<p>测量（Measurement）下面的一些函数可以让你方便的测量你的一些代码。<br><code>console.trace()</code> – 记录执行点的堆栈信息。</p>
<p><code>console.time(&quot;name&quot;)</code> – 根据 name 创建一个唯一的计时器。</p>
<p><code>console.timeEnd(&quot;name&quot;)</code> – 根据 name 停止计时器，并且记录消耗的时间，以毫秒为单位。</p>
<p><code>console.count(&quot;name&quot;)</code> – 记录该行代码执行的次数。</p>
<p>字符串格式化所有 console 的 logging 函数都可以通过以下模式格式化字符串：<br>%s – 将对象格式化为字符串。</p>
<p>%d, %i, %l, %f – 将对象格式化为数字。</p>
<p>%o – 将对象格式化成一个指向 inspector 的超链接。</p>
<p>%1.o, %2.0, etc.. – 将对象格式化成包含自己属性的可交互的表格。</p>
<p>%.o – 将对象格式化成具有自身属性的一个数组。</p>
<p>%x – 将对象格式化成一个可交互的 XML 树形结构。</p>
<p>%1.x, %2.x, etc.. – 将对象格式化成一个可交互的 XML 数型结构，并且展开 n 层节点。</p>
<p>如果你需要一个真实的 % 符号，你可以通过一个转移符号就像这样 “\%”。</p>
<p>命令行函数内建的命令行函数可以通过以下命令行使用：<br>$(“id”) – document.getElementById() 的简写。（译者注：跟 prototype.js 学来的吧？）</p>
<p>$$(“css”) – 返回一个符合 CSS 选择器的元素数组。</p>
<p>$x(“xpath”) – 返回一个符合 XPath 选择器的元素数组。</p>
<p>$0 – 返回最近被检查（inspected）的对象。</p>
<p>$1 – 返回最近被检查（inspected）的下一个对象。</p>
<p>$n(5) – 返回最近被检查的第n个对象。</p>
<p>inspect(object) – 将对象显示在 Inspector 中。</p>
<p>dir(object) – 返回一个对象的属性名数组。（译者注：跟 Python 学的？）</p>
<p>clear() – 清除控制台信息。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>FireBug 是一个非常实用的JavaScript以及DOM查看调试工具，是 Firefox 的一个插件。</p>
<p>使用 FireBug 调试 AJAX 应用非常方便，终于可以告别 alert 时代了！<br>Console Logging 函数FireBug 为所]]>
    </summary>
    
      <category term="工具" scheme="http://fire17643.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP 状态码解释]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/23/HTTP%20%E7%8A%B6%E6%80%81%E7%A0%81%E8%A7%A3%E9%87%8A/"/>
    <id>http://fire17643.github.io/blog/2015/06/23/HTTP 状态码解释/</id>
    <published>2015-06-23T02:18:12.268Z</published>
    <updated>2015-06-23T02:18:12.268Z</updated>
    <content type="html"><![CDATA[<p>在介绍各种代码之前，首先科普一下，上面的各种代码，是 HTTP 状态码，用以表示网页服务器 HTTP 响应状态的3位数字代码，包含五种状态状态， 1xx 代表消息， 2xx 代表成功， 3xx 代表重定向， 4xx 代表请求错误， 5xx 代表服务器错误。下面 Kayo 为大家详细介绍各个状态码的意义。其中下面各行开头的数字代表各状态码，括号内的内容表示状态信息及其中文翻译，接着是代码含义。</p>
<p>100 (Continue/继续)：请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。HTTP 1.1 中新加入。</p>
<p>101 (Switching Protocols/切换协议)：服务器已经理解了客户端的请求，并将通过 Upgrade 消息头通知客户端采用不同的协议来完成这个请求。HTTP 1.1 中新加入。</p>
<p>200 (OK/正常)：请求已成功，请求所希望的响应头或数据体将随此响应返回。</p>
<p>201 (Created/已创建)：表示服务器在请求的响应中建立了新文档；应在定位头信息中给出它的URL。</p>
<p>202 (Accepted/接受)：已经接受请求，但处理尚未完成。</p>
<p>203 (Non-Authoritative Information/非官方信息)：表示文档被正常的返回，但是由于正在使用的是文档副本所以某些响应头信息可能不正确。 HTTP 1.1 中新加入。</p>
<p>204 (No Content/无内容)：在并没有新文档的情况下，确保浏览器继续显示先前的文档。</p>
<p>205 (Reset Content/重置内容)：意思是虽然没有新文档但浏览器要重置文档显示。这个状态码用于强迫浏览器清除表单域。 HTTP 1.1 中新加入。</p>
<p>206 (Partial Content/局部内容)：在服务器完成了一个包含Range头信息的局部请求时被发送的。 HTTP 1.1 中新加入。</p>
<p>300 (Multiple Choices/多重选择)：表示被请求的文档可以在多个地方找到，并将在返回的文档中列出来。如果服务器有首选设置，首选项将会被列于定位响应头信息中。</p>
<p>301 (Moved Permanently)：指所请求的文档在别的地方；文档新的URL会在定位响应头信息中给出。浏览器会自动连接到新的URL。</p>
<p>302 (Found/找到)：与301有些类似，只是定位头信息中所给的URL应被理解为临时交换地址而不是永久的。注意：在 HTTP 1.0 中，消息是临时移动(Moved Temporarily)的而不是被找到，因此HttpServletResponse中的常量是SC_MOVED_TEMPORARILY不是我们以为的SC_FOUND。</p>
<p>303 (See Other/参见其他信息)：这个状态码和 301、302 相似，只是如果最初的请求是 POST，那么新文档（在定位头信息中给出）药用 GET 找回。 HTTP 1.1 中新加入。</p>
<p>304 (Not Modified/为修正)：客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。</p>
<p>305 (Use Proxy/使用代理)：表示所请求的文档要通过定位头信息中的代理服务器获得。 HTTP 1.1 中新加入。</p>
<p>307 (Temporary Redirect/临时重定向)：和 302 （Found/找到）相同。许多浏览器会错误地响应 302 应答进行重定向，即使原来的请求是 POST ，即使它实际上只能在 POST 请求的应答是 303 时才能重定向。由于这个原因， HTTP 1.1 新增了 307 ，以便更加清除地区分几个状态代码：当出现 303 应答时，浏览器可以跟随重定向的 GET 和 POST 请求；如果是 307 应答，则浏览器只 能跟随对GET请求的重定向。 HTTP 1.1 中新加入。</p>
<p>400 (Bad Request/错误请求)：指出客户端请求中的语法错误。</p>
<p>401 (Unauthorized/未授权)：表示客户端在授权头信息中没有有效的身份信息时访问受到密码保护的页面。这个响应必须包含一个WWW-Authenticate的授权信息头。例如，在本书4.5部分中的“Restricting Access to Web Pages./限制访问Web页。”</p>
<p>403 (Forbidden/禁止)：意思是除非拥有授权否则服务器拒绝提供所请求的资源。这个状态经常会由于服务器上的损坏文件或目录许可而引起。</p>
<p>404 (Not Found/未找到)：无法找到指定位置的资源，相信有一定经验的网络使用者对此都不陌生，它是表示“没有所访问页面”的标准方式。相对于setStatus使用sendError得好处是：服务器会自动生成一个错误页来显示错误信息，也就是我们常说的 404 页面。</p>
<p>熟悉 WordPress 主题开发的童鞋都会知道，在 WordPress 的模板中有专门设计给 404 的页面模板，由此可见设计 404 页面对于一个网站来说有种“标配”的意味了。</p>
<p>405 (Method Not Allowed/方法未允许)：指出请求方法(GET, POST, HEAD, PUT, DELETE, 等)对某些特定的资源不允许使用。 HTTP 1.1 中新加入。</p>
<p>406 (Not Acceptable/无法访问)：表示请求资源的MIME类型与客户端中Accept头信息中指定的类型不一致。 HTTP 1.1 中新加入。</p>
<p>407 (Proxy Authentication Required/代理服务器认证要求)：与401状态有些相似，表示客户必须先经过代理服务器的授权。</p>
<p>408 (Request Timeout/请求超时)：指服务端等待客户端发送请求的时间过长。 HTTP 1.1 中新加入。</p>
<p>409 (Conflict/冲突)：常被用于试图上传版本不正确的文件时。 HTTP 1.1 中新加入。</p>
<p>410 (Gone/已经不存在)：请求的文档已经不存在并且没有更新的地址。 410 状态不同于 404 ， 410 是在指导文档已被移走的情况下使用，而404则用于未知原因的无法访问。 HTTP 1.1 中新加入。</p>
<p>411 (Length Required/需要数据长度)：表示服务器不能处理请求（假设为带有附件的POST请求），除非客户端发送 Content-Length 头信息指出发送给服务器的数据的大小。 HTTP 1.1 中新加入。</p>
<p>412 (Precondition Failed/先决条件错误)：该状态指出请求头信息中的某些先决条件是错误的。 HTTP 1.1 中新加入。</p>
<p>413 (Request Entity Too Large/请求实体过大)：告诉客户端现在所请求的文档比服务器现在想要处理的要大。如果服务器认为能够过一段时间处理，则会包含一个 Retry-After 的响应头信息。 HTTP 1.1 中新加入。</p>
<p>414 (Request URI Too Long/请求URI过长)：用于在URI过长的情况时。这里所指的“URI”是指URL中主机、域名及端口号之后的内容。例如： <a href="http://kayosite.com:8080/aaa/bbb/ccc" target="_blank" rel="external">http://kayosite.com:8080/aaa/bbb/ccc</a> ，其中“URL”是指/aaa/bbb/ccc。 HTTP 1.1 中新加入。</p>
<p>415 (Unsupported Media Type/不支持的媒体格式)：意味着请求所带的附件的格式类型服务器不知道如何处理。 HTTP 1.1 中新加入。</p>
<p>416 (Requested Range Not Satisfiable/请求范围无法满足)：表示服务器不能满足客户在请求中指定的Range头。 HTTP 1.1 中新加入。</p>
<p>417 (Expectation Failed/期望失败)：如果服务器得到一个带有100-continue值的Expect请求头信息，这是指客户端正在询问是否可以在后面的请求中发送附件。在这种情况下，服务器也会用该状态(417)告诉浏览器服务器不接收该附件或用100 (SC_CONTINUE)状态告诉客户端可以继续发送附件。 HTTP 1.1 中新加入。</p>
<p>500 (Internal Server Error/内部服务器错误)：这是常见的“服务器错误”状态。表示服务器遇到了意料不到的情况，不能完成客户的请求。</p>
<p>501 (Not Implemented/未实现)：告诉客户端服务器不支持请求中要求的功能。</p>
<p>502 (Bad Gateway/错误的网关)：用于充当代理或网关的服务器；该状态指出接收服务器接收到远端服务器的错误响应。</p>
<p>503 (Service Unavailable/服务无法获得)：表示服务器由于在维护或已经超载而无法响应。</p>
<p>504 (Gateway Timeout/网关超时)：由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。 HTTP 1.1 中新加入。</p>
<p>505 (HTTP Version Not Supported/不支持的 HTTP 版本)：该状态码是说服务器并不支持在请求中所标明 HTTP 版本。 HTTP 1.1 中新加入。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在介绍各种代码之前，首先科普一下，上面的各种代码，是 HTTP 状态码，用以表示网页服务器 HTTP 响应状态的3位数字代码，包含五种状态状态， 1xx 代表消息， 2xx 代表成功， 3xx 代表重定向， 4xx 代表请求错误， 5xx 代表服务器错误。下面 Kayo 为]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Map 对象 (JavaScript)]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/23/js-Map%E5%AF%B9%E8%B1%A1/"/>
    <id>http://fire17643.github.io/blog/2015/06/23/js-Map对象/</id>
    <published>2015-06-23T02:14:06.139Z</published>
    <updated>2015-06-23T00:51:54.612Z</updated>
    <content type="html"><![CDATA[<p>键/值对的集合。<br>mapObj = new Map()<br>下表列出了 Map 对象的方法。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">m</span> = new Map();</span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">set</span>(1, <span class="string">"black"</span>);</span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">set</span>(2, <span class="string">"red"</span>);</span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">set</span>(<span class="string">"colors"</span>, 2);</span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">set</span>(&#123;x:1&#125;, 3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">forEach</span>(function (item, key, mapObj) &#123;</span><br><span class="line">    document.write(item.<span class="keyword">toString</span>() + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">document.write(<span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">document.write(<span class="keyword">m</span>.<span class="literal">get</span>(2));</span><br><span class="line"><span class="keyword">m</span>.size; <span class="comment">//4</span></span><br></pre></td></tr></table></figure></p>
<p><code>mapObj.clear()</code>从映射中移除所有元素<br><code>mapObj.delete(key)</code> 从映射中移除指定的元素。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">m</span> = new Map();</span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">set</span>(1, <span class="string">"black"</span>);</span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">set</span>(2, <span class="string">"red"</span>);</span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">set</span>(<span class="string">"colors"</span>, 2);</span><br><span class="line"><span class="keyword">m</span>.delete(1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">m</span>.<span class="keyword">forEach</span>(function (item) &#123;</span><br><span class="line">    document.write(item.<span class="keyword">toString</span>() + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>mapObj.has(key)</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.<span class="literal">set</span>(<span class="number">2</span>, <span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(m.has(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>键/值对的集合。<br>mapObj = new Map()<br>下表列出了 Map 对象的方法。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="lin]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端性能优化]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/前端优化总结/</id>
    <published>2015-06-19T07:37:00.478Z</published>
    <updated>2015-06-19T07:37:00.478Z</updated>
    <content type="html"><![CDATA[<p>目录：<br>[TOC]</p>
<blockquote>
<p>前端性能优化是一个很需要注重的问题，前端性能直接影响着用户体验！下面是我工作中“踩在巨人的肩膀上”总结的优化方式</p>
</blockquote>
<h3 id="1-字符串拼接">1.字符串拼接</h3><p>第一种，直接使用+进行字符串连接<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">	str += i+<span class="string">"&lt;br&gt;"</span>+<span class="string">"str"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种方式使用比较广泛，但是很多人会提倡下面这种写法<br>第二种，使用数组缓存字符串<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strBuffer = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;  </span><br><span class="line">	strBuffer[i]=i+<span class="string">"&lt;br&gt;"</span>+<span class="string">"str"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = strBuffer.<span class="keyword">join</span>(<span class="string">''</span>);</span><br></pre></td></tr></table></figure></p>
<p>经测试，在 IE8+下，2种方式执行速度相当，并没有差别。<br>Firefox、Chrome及webkit内核的浏览器都对字符串拼接操作进行了优化；在 Firefox和IE下，使用Array的join方式执行速度约比直接字符串拼接快30%。而webkit内核的浏览器上使用Array的join方式执行速度约比直接字符串拼接慢10%。<br>总结，移动端浏览器推荐使用+连接字符串。</p>
<h3 id="2-数组的遍历">2.数组的遍历</h3><p>对于数组的遍历，大家都会在for循环中对数组长度进行缓存，如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = 0,<span class="keyword">l</span>=<span class="keyword">list</span>.length; i &lt; <span class="keyword">l</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">list</span>[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面这种确实比较快，但是测试发现，较先进的浏览器中比如Chrome、opera和火狐中的表现和下面的速度相当甚至更差，不过推荐使用上面的那种<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">list</span> = <span class="keyword">new</span> <span class="keyword">Array</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">list</span>.length; i++) &#123;</span><br><span class="line">	<span class="keyword">list</span>[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-while和for循环">3.while和for循环</h3><p>IE中使用while更快(30%)，而其他浏览器(包括IE内核的QQ和360)使用for循环比较快(20%)<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> sum</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable"><span class="keyword">var</span> i</span> = <span class="number">0</span>;i <span class="type">&lt; 1000; i++) &#123;</span><br><span class="line">	sum += arr[i];</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
 <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">sum</span> = 0, </span><br><span class="line">	<span class="keyword">l</span> = 1000;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">l</span>--) &#123;</span><br><span class="line">	<span class="keyword">sum</span> += 1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-_3目运算符">4. 3目运算符</h3><p>IE8+下使用3目运算符相对慢30%，其他浏览器速度相当，可自由选择<br>`num = a &gt; b ? a : b;<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">a</span> &gt; b) &#123;</span><br><span class="line">    num = <span class="literal">a</span><span class="comment">;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    num = b<span class="comment">;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-setTimeout和setInterval">5.setTimeout和setInterval</h3><p>使用setInterval比setTimeout慢40%，在各个浏览器上表现基本相同，而移动端相差也比较明显，运行过多的话setInterval会使得页面崩溃，推荐使用setTimeout<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var timeoutTimes = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span><span class="params">()</span> &#123;</span></span><br><span class="line">  timeoutTimes++;</span><br><span class="line">  <span class="keyword">if</span> <span class="params">(timeoutTimes &lt; <span class="number">100</span>)</span> &#123;</span><br><span class="line">    setTimeout<span class="params">(timeout, <span class="number">10</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">timeout<span class="params">()</span>;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var intervalTimes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interval</span><span class="params">()</span> &#123;</span></span><br><span class="line">  intervalTimes++;</span><br><span class="line">  <span class="keyword">if</span> <span class="params">(intervalTimes &gt;= <span class="number">100</span>)</span> &#123;</span><br><span class="line">    clearInterval<span class="params">(interv)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var interv = setInterval<span class="params">(interval, <span class="number">10</span>)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="6-缓存重复的使用的变量值,速度提高50%">6.缓存重复的使用的变量值,速度提高50%</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> h1</span> = element1.clientHeight + num1;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> h2</span> = element1.clientHeight + num2;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> eleHeight</span> = element1.clientHeight;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> h1</span> = eleHeight + num1;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> h2</span> = eleHeight + num2;</span><br></pre></td></tr></table></figure>
<h3 id="7-使用直接量">7.使用直接量</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Array<span class="function"><span class="params">(param,param,...)</span> -&gt;</span> <span class="keyword">var</span> a = []</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Object<span class="function"><span class="params">()</span> -&gt;</span> <span class="keyword">var</span> foo = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> RegExp<span class="function"><span class="params">()</span> -&gt;</span> <span class="keyword">var</span> reg = <span class="pi">/.../</span></span><br></pre></td></tr></table></figure>
<h3 id="8-闭包中的循环引用导致内存泄露">8.闭包中的循环引用导致内存泄露</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'dom'</span>);</span><br><span class="line">	el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// el = null; 解决方法，质空el</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>
<p>init 在执行的时候，当前上下文我们叫做 context 。这个时候，context引用了 el，el 引用了 function，function 引用了 context。这时候形成<br>了一个循环引用。</p>
<p>第二种方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elClickHandler</span>(<span class="params"></span>) </span>&#123;……&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'MyElement'</span>);</span><br><span class="line">	el.onclick = elClickHandler;</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>
<p>把 function 抽到新的 context 中，这样， function 的 context 就不包含对 el 的引用，从而打断循环引用<br>使用闭包几种方式<br>1).</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> &#123;</span></span><br><span class="line">    var <span class="built_in">count</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">next</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">count</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">count</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">next</span>(); // <span class="number">1</span></span><br><span class="line"><span class="keyword">next</span>(); // <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>2).<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++count;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = next(); <span class="comment">// 1</span></span><br><span class="line">n(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<p>3).<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">	add:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ++count;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> n = next(); <span class="comment">// 1</span></span><br><span class="line">n.add(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<h3 id="9-判断数组">9.判断数组</h3><p>到目前位置，见过网上判断数组大致有如下几种方法<br>1).使用构造器constructor<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArr</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> o.constructor === <span class="built_in">Array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2).使用比较新的方法<code>Array.isArray(o);</code><br>3).调用Object的原型中的方法<code>toString</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArr</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在网上看各位大牛力推第三种方法，javascript模式也用的第3种方法.可见过测试发现，第一种方法是最快的，比第三种快了将近60倍，而第二种也比第三种快了10倍</p>
<h3 id="10-高频执行事件/方法的防抖">10.高频执行事件/方法的防抖</h3><blockquote>
<p>通常，开发人员会在有用户交互参与的地方添加事件，而往往这种事件会被频繁触发。<br>想象一下窗口的resize事件或者是一个元素的onmouseover事件,他们触发时，执行的非常迅速，并且触发很多次。如果你的回调过重，你可能使浏览器死掉。 这就是为什么我们要引入防抖。 </p>
</blockquote>
<p>防抖可以限制一个方法在一定时间内执行的次数。以下代码是防抖示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取自 UnderscoreJS 实用框架  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> timeout;  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>;  </span><br><span class="line">        <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">            timeout = <span class="literal">null</span>;  </span><br><span class="line">            <span class="keyword">if</span> (!immediate) func.apply(context, args);  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;  </span><br><span class="line">        clearTimeout(timeout);  </span><br><span class="line">        timeout = setTimeout(later, wait);  </span><br><span class="line">        <span class="keyword">if</span> (callNow) func.apply(context, args);  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 添加resize的回调函数，但是只允许它每300毫秒执行一次  </span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, debounce(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 这里写resize过程  </span></span><br><span class="line">&#125;, <span class="number">300</span>));</span><br></pre></td></tr></table></figure></p>
<p>debounce方法返回一个方法，用来包住你的回调函数，限制他的执行频率。使用这个防抖方法，就可以让你写的频繁回调的方法不会妨碍用户的浏览器</p>
<h3 id="11-CSS动画">11.CSS动画</h3><p>很多的CSS动画是用GPU处理的，因此动画本身很流畅，当然你可以使用下面这个简单的CSS强制使你的硬件加速<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.myAnimation</span> <span class="rules">&#123;  </span><br><span class="line">    <span class="rule"><span class="attribute">animation</span>:<span class="value"> someAnimation <span class="number">1s</span></span></span>;  </span><br><span class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>; <span class="comment">/* 强制硬件加速 */</span>  </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><code>tansform:transform(0,0,0)</code>在不会影响其他动画的同时将通话送入硬件加速</p>
<h3 id="12-使用事件委托">12.使用事件委托</h3><p>事件委托是在父级元素上添加一个事件监听，来替代在每一个子元素上添加事件监听。当事件被触发时，event.target会评估相应的措施是否需要被执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取元素，添加事件监听  </span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#parent-list'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// e.target 是一个被点击的元素!  </span></span><br><span class="line">    <span class="comment">// 如果它是一个列表元素  </span></span><br><span class="line">    <span class="keyword">if</span>(e.target &amp;&amp; e.target.tagName == <span class="string">'LI'</span>) &#123;  </span><br><span class="line">        <span class="comment">// 我们找到了这个元素，对他的操作可以写在这里。  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>当事件发生的时候，它没有轮询父节点去寻找匹配的元素或选择器，且它不支持基于选择器的查询（例如用class name，或者id来查询）。所有的JavaScript框架提供了委托选择器匹配。重点是，你避免了为每一个元素加载事件监听，而是在父元素上加一个事件监听。这样大大的增加了效率，并且减少了很多维护！</p>
<h3 id="13-使用索引对象">13.使用索引对象</h3><p>当我们想要获取一个用户时，我们就要遍历一次数组。那么更好的方法是创建一个新的对象，对每一个唯一的值建立一个索引，在上面这个例子中，用username作为索引，这个数组对象可以写成：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">user</span>Store = &#123;&#125;;  </span><br><span class="line">ajaxResult.users.<span class="keyword">for</span>Each(function(<span class="keyword">user</span>) &#123;  </span><br><span class="line">    <span class="keyword">user</span>Store[<span class="keyword">user</span>.username] = <span class="keyword">user</span>;  </span><br><span class="line">&#125;);  </span><br><span class="line">// 现在当你想要找一个用户对象时，我们可以直接通过索引找到这个对象</span><br><span class="line">var davidwalsh = <span class="keyword">user</span>Store.davidwalsh;  </span><br><span class="line">var techpro = <span class="keyword">user</span>Store[<span class="string">"tech-pro"</span>];</span><br></pre></td></tr></table></figure></p>
<p>这样的代码写起来更好一些，也很简便，通过索引搜索比起遍历整个数组更加快捷</p>
<h3 id="14-不要使用_eval">14.不要使用 eval</h3><p>eval 函数会在当前作用域中执行一段 JavaScript 代码字符串。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'foo = 3'</span>);</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 3</span></span><br><span class="line">foo; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>// 但是 eval 只在被直接调用并且调用函数就是 eval 本身时，才在当前作用域中执行。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="built_in">eval</span>;</span><br><span class="line">    bar(<span class="string">'foo = 3'</span>);</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 2</span></span><br><span class="line">foo; <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 译者注：上面的代码等价于在全局作用域中调用 eval，和下面两种写法效果一样：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一：直接调用全局作用域下的 foo 变量</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">window</span>.foo = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 2</span></span><br><span class="line">foo; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>绝对不要使用 eval，任何使用它的代码都会在它的工作方式，性能和安全性方面受到质疑。<br>同样，不要在setTimeout和setInterval中使用字符串形式</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span><span class="params">(<span class="number">1</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> &#123;</span></span><br><span class="line">        console.<span class="built_in">log</span><span class="params">(<span class="number">2</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout<span class="params">('foo<span class="params">()</span>', <span class="number">1000</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">bar<span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="15-命名空间（Namespaces）">15.命名空间（Namespaces）</h3><p>只有一个全局作用域导致的常见错误是命名冲突。在 JavaScript中，这可以通过 匿名包装器 轻松解决。<br>有一些其他的调用函数表达式的方法，比如下面的两种方式语法不同，但是效果一模一样。</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;&#125;</span><span class="params">()</span>);</span></span><br></pre></td></tr></table></figure>
<p>推荐使用匿名包装器（译者注：也就是自执行的匿名函数）来创建命名空间。这样不仅可以防止命名冲突， 而且有利于程序的模块化。</p>
<p>另外，使用全局变量被认为是不好的习惯。这样的代码倾向于产生错误和带来高的维护成本。</p>
<h3 id="16-处理_undefined_值的改变">16.处理 undefined 值的改变</h3><p>了避免可能对 undefined 值的改变，一个常用的技巧是使用一个传递到匿名包装器的额外参数。 在调用时，这个参数不会获取任何值。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="reserved">var</span> <span class="literal">undefined</span> = <span class="number">123</span>;</span><br><span class="line">(<span class="reserved">function</span>(something, foo, <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="regexp">//</span> 局部作用域里的 <span class="literal">undefined</span> 变量重新获得了 `<span class="javascript"><span class="literal">undefined</span></span>` 值</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="string">'Hello World'</span>, <span class="number">42</span>);</span><br></pre></td></tr></table></figure>
<p>另外一种达到相同目的方法是在函数内使用变量声明。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="number">123</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">(something, foo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;)(<span class="string">'Hello World'</span>, <span class="number">42</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="17-减少作用域链查找">17.减少作用域链查找</h3><p>前文谈到了作用域链查找问题，这一点在循环中是尤其需要注意的问题。如果在循环中需要访问非本作用域下的变量时请在遍历之前用局部变量缓存该变量，并在遍历结束后再重写那个变量，这一点对全局变量尤其重要，因为全局变量处于作用域链的最顶端，访问时的查找次数是最多的。<br>低效率的写法：<br> <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span><span class="params">(info)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">100000</span>; i--;)&#123;</span><br><span class="line">		<span class="comment">//每次访问globalVar都需要查找到作用域链最顶端，本例中需要访问100000次</span></span><br><span class="line">		globalVar += i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCallback</span><span class="params">(info)</span></span>&#123;</span><br><span class="line">	<span class="comment">//局部变量缓存全局变量</span></span><br><span class="line">	<span class="keyword">var</span> localVar = globalVar;</span><br><span class="line">	<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">100000</span>; i--;)&#123;</span><br><span class="line">		<span class="comment">//访问局部变量是最快的</span></span><br><span class="line">		localVar += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//本例中只需要访问2次全局变量</span></span><br><span class="line">	globalVar = localVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此外，要减少作用域链查找还应该减少闭包的使用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>目录：<br>[TOC]</p>
<blockquote>
<p>前端性能优化是一个很需要注重的问题，前端性能直接影响着用户体验！下面是我工作中“踩在巨人的肩膀上”总结的优化方式</p>
</blockquote>
<h3 id="1-字符串拼接">1.字符串拼接</h3>]]>
    </summary>
    
      <category term="性能优化" scheme="http://fire17643.github.io/blog/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown语法总结]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/markdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/markdown语法总结/</id>
    <published>2015-06-19T07:35:35.700Z</published>
    <updated>2015-06-19T07:35:35.700Z</updated>
    <content type="html"><![CDATA[<h1 id="h1">h1</h1><h2 id="h1-1">h1</h2><p>h2<br>=</p>
<blockquote>
<p>blockquote 快注释<br>   This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>sdf</p>
</blockquote>
<p><em>斜体</em>  *斜体<em><br><em>斜体</em><br><em>*粗体</em></em><br><strong>粗体</strong></p>
<p>Use the <code>printf()</code>function.<br><code>There is a literal backtick (`) here.</code><br><a href="http://example.com/" target="_blank" rel="external">http://example.com/</a><br><a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x61;&#x64;&#100;&#x72;&#x65;&#115;&#115;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#x6d;">&#x61;&#x64;&#100;&#x72;&#x65;&#115;&#115;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#x6d;</a></p>
<ol>
<li>item 1</li>
<li>item 2</li>
<li>item 3</li>
</ol>
<ul>
<li>item 4</li>
<li>item 4</li>
<li>item 4</li>
<li><ul>
<li>item 4</li>
</ul>
</li>
</ul>
<ul>
<li>1</li>
<li>2</li>
</ul>
<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>
<p>4 &lt; 5<br>&copy;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span>pppp<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span> ##pp <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>表格：<br>| Tables        | Are           | Cool  |<br>| ——————- |:——————-:| ——-:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>
<p><code>function fn(){
}</code></p>
<ul>
<li><p>A list item with a blockquote:</p>
<blockquote>
<p>This is a blockquote<br> inside a list item.</p>
</blockquote>
</li>
</ul>
<p>1986. What a great season.</p>
<pre><code>这是一个代码区块
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"footer"</span>&gt;
    &amp;<span class="keyword">copy</span>; <span class="number">2004</span> Foo Corporation
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p><a href="http://google.com/" target="_blank" rel="external">Google</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="h1">h1</h1><h2 id="h1-1">h1</h2><p>h2<br>=</p>
<blockquote>
<p>blockquote 快注释<br>   This is the first level of quoting.</p>
<blockqu]]>
    </summary>
    
      <category term="markdown" scheme="http://fire17643.github.io/blog/tags/markdown/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些常用的正则表达式]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/一些常用的正则表达式/</id>
    <published>2015-06-19T07:33:38.844Z</published>
    <updated>2015-06-19T07:33:38.844Z</updated>
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"^\d+$"</span>　　<span class="comment">//非负整数（正整数 + 0） </span></span><br><span class="line"><span class="string">"^[0-9]*[1-9][0-9]*$"</span>　　<span class="comment">//正整数 </span></span><br><span class="line"><span class="string">"^((-\d+)|(0+))$"</span>　　<span class="comment">//非正整数（负整数 + 0） </span></span><br><span class="line"><span class="string">"^-[0-9]*[1-9][0-9]*$"</span>　　<span class="comment">//负整数 </span></span><br><span class="line"><span class="string">"^-?\d+$"</span>　　　　<span class="comment">//整数 </span></span><br><span class="line"><span class="string">"^\d+(\.\d+)?$"</span>　　<span class="comment">//非负浮点数（正浮点数 + 0） </span></span><br><span class="line"><span class="string">"^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$"</span>　　<span class="comment">//正浮点数 </span></span><br><span class="line"><span class="string">"^((-\d+(\.\d+)?)|(0+(\.0+)?))$"</span>　　<span class="comment">//非正浮点数（负浮点数 + 0） </span></span><br><span class="line"><span class="string">"^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$"</span>　　<span class="comment">//负浮点数 </span></span><br><span class="line"><span class="string">"^(-?\d+)(\.\d+)?$"</span>　　<span class="comment">//浮点数 </span></span><br><span class="line">^<span class="comment">//w+((-//w+)|(//.//w+))*//@[A-Za-z0-9]+((//.|-)[A-Za-z0-9]+)*//.[A-Za-z0-9]+$ </span></span><br><span class="line">^#[a-fA-F0-<span class="number">9</span>]&#123;<span class="number">6</span>&#125;          <span class="comment">//颜色</span></span><br><span class="line">^http[s]?:<span class="comment">//////([//w-]+//.)+[//w-]+([//w-./?%&amp;=]*)?$ //链接</span></span><br><span class="line">^[<span class="comment">//u4E00-//u9FA5//uF900-//uFA2D]+$    //仅中文</span></span><br><span class="line">^[<span class="comment">//x00-//xFF]+$          //仅ACSII字符</span></span><br><span class="line">^<span class="comment">//d&#123;6&#125;$           //邮编</span></span><br><span class="line">^<span class="number">0</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;<span class="number">13</span>[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">9</span>&#125;$         <span class="comment">//手机^//d&#123;1,3&#125;//.//d&#123;1,3&#125;//.//d&#123;1,3&#125;.//d&#123;1,3&#125;$    //ip地址</span></span><br><span class="line">n^<span class="comment">//S+$           //非空</span></span><br><span class="line">(.*)<span class="comment">//.(jpg|bmp|gif|ico|pcx|jpeg|tif|png|raw|tga)$ //图片</span></span><br><span class="line">(.*)<span class="comment">//.(rar|zip|7zip|tgz)$        //压缩文件</span></span><br><span class="line">^<span class="comment">//d&#123;4&#125;(//-|///|/.)//d&#123;1,2&#125;//1//d&#123;1,2&#125;$"        //日期</span></span><br><span class="line"><span class="string">"^[A-Za-z]+$"</span>　　<span class="comment">//由26个英文字母组成的字符串 </span></span><br><span class="line"><span class="string">"^[A-Z]+$"</span>　　<span class="comment">//由26个英文字母的大写组成的字符串 </span></span><br><span class="line"><span class="string">"^[a-z]+$"</span>　　<span class="comment">//由26个英文字母的小写组成的字符串 </span></span><br><span class="line"><span class="string">"^[A-Za-z0-9]+$"</span>　　<span class="comment">//由数字和26个英文字母组成的字符串 </span></span><br><span class="line"><span class="string">"^\w+$"</span>　　<span class="comment">//由数字、26个英文字母或者下划线组成的字符串 </span></span><br><span class="line"><span class="string">"^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$"</span>　　　　<span class="comment">//email地址 </span></span><br><span class="line"><span class="string">"^[a-zA-z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$"</span>　　<span class="comment">//url </span></span><br><span class="line">/^(d&#123;<span class="number">2</span>&#125;|d&#123;<span class="number">4</span>&#125;)-((<span class="number">0</span>([<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">1</span>[<span class="number">1</span>|<span class="number">2</span>]))-(([<span class="number">0</span>-<span class="number">2</span>]([<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">3</span>[<span class="number">0</span>|<span class="number">1</span>]))$/ <span class="comment">// 年-月-日 </span></span><br><span class="line">/^((<span class="number">0</span>([<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">1</span>[<span class="number">1</span>|<span class="number">2</span>]))/(([<span class="number">0</span>-<span class="number">2</span>]([<span class="number">1</span>-<span class="number">9</span>]&#123;<span class="number">1</span>&#125;))|(<span class="number">3</span>[<span class="number">0</span>|<span class="number">1</span>]))/(d&#123;<span class="number">2</span>&#125;|d&#123;<span class="number">4</span>&#125;)$/ <span class="comment">// 月/日/年 </span></span><br><span class="line"><span class="string">"^([w-.]+)@(([[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.)|(([w-]+.)+))([a-zA-Z]&#123;2,4&#125;|[0-9]&#123;1,3&#125;)(]?)$"</span> <span class="comment">//Emil </span></span><br><span class="line"><span class="string">"(d+-)?(d&#123;4&#125;-?d&#123;7&#125;|d&#123;3&#125;-?d&#123;8&#125;|^d&#123;7,8&#125;)(-d+)?"</span> <span class="comment">//电话号码 </span></span><br><span class="line"><span class="string">"^(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5]).(d&#123;1,2&#125;|1dd|2[0-4]d|25[0-5])$"</span> <span class="comment">//IP地址</span></span><br></pre></td></tr></table></figure>
<p>匹配中文字符的正则表达式： <code>[\u4e00-\u9fa5]</code><br>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code><br>匹配空行的正则表达式：<code>\n[\s| ]*\r</code><br>匹配HTML标记的正则表达式：<code>/&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;/</code><br>匹配首尾空格的正则表达式：<code>(^\s*)|(\s*$)</code><br>匹配Email地址的正则表达式：<code>\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</code><br>匹配网址URL的正则表达式：<code>^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$</code><br>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code><br>匹配国内电话号码：<code>(\d{3}-|\d{4}-)?(\d{8}|\d{7})?</code><br>匹配腾讯QQ号：<code>^[1-9]*[1-9][0-9]*$</code></p>
<p>```</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="l]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="正则" scheme="http://fire17643.github.io/blog/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[高亮显示搜索到的关键字]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA%E6%90%9C%E7%B4%A2%E5%88%B0%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/高亮显示搜索到的关键字/</id>
    <published>2015-06-19T07:22:00.556Z</published>
    <updated>2015-06-19T07:22:00.556Z</updated>
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高亮显示搜索到的关键字</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeightLight</span>(<span class="params">Keyword</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//文本选择器</span></span><br><span class="line">  <span class="keyword">var</span> TextRange;</span><br><span class="line">  <span class="comment">//是否找到</span></span><br><span class="line">  <span class="keyword">var</span> Found=<span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//找到的次数</span></span><br><span class="line">  <span class="keyword">var</span> Count = <span class="number">0</span>;</span><br><span class="line">  TextRange = <span class="built_in">document</span>.body.createTextRange();</span><br><span class="line">  Found = TextRange.findText(Keyword);</span><br><span class="line">  <span class="keyword">if</span> (Found)&#123;</span><br><span class="line">  	Count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (Found &amp;&amp; Count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  	TextRange.pasteHTML(<span class="string">'&lt;span style="background:yellow"&gt;'</span> + Keyword + <span class="string">'&lt;/span&gt;'</span>);</span><br><span class="line">  	<span class="comment">//将滚动条定位到第一次查到的视口范围内</span></span><br><span class="line">  	<span class="keyword">if</span>(Count==<span class="number">1</span>)&#123;</span><br><span class="line">  		TextRange.scrollIntoView();</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="comment">//继续查找</span></span><br><span class="line">  	Found = TextRange.findText(Keyword);</span><br><span class="line">  	<span class="keyword">if</span> (!Found)&#123;</span><br><span class="line">  		Count = <span class="number">0</span>;</span><br><span class="line">  	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  		Count++;</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正则式法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highLight</span>(<span class="params">ele,keys</span>) </span>&#123; </span><br><span class="line">	<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + keys.replace(<span class="regexp">/,/</span>,<span class="string">"|"</span>) + <span class="string">")"</span>,<span class="string">"g"</span>); </span><br><span class="line">	ele.innerHTML = ele.innerHTML.replace(reg,<span class="string">"&lt;font color=\"red\"&gt;$1&lt;/font&gt;"</span>); </span><br><span class="line">&#125; 	 </span><br><span class="line">highLight(<span class="built_in">document</span>.body,keys);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="代码研究" scheme="http://fire17643.github.io/blog/tags/%E4%BB%A3%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mobile safari 下overflow:auto的解决方法]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/19/mobile-safari%E4%B8%8Boverflow-auto%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://fire17643.github.io/blog/2015/06/19/mobile-safari下overflow-auto的解决方法/</id>
    <published>2015-06-19T06:58:33.488Z</published>
    <updated>2015-06-19T06:58:33.488Z</updated>
    <content type="html"><![CDATA[<p>这次有个项目需要完全支持ipad，中间还是遇到了不少的问题。今天有个div需要滚动条在ipad的safari下面失效，mobile safari因为多点触摸的缘故取消了局部区域的滚动条（为了防止和默认的拖动行为冲突）。首先排除了是不是本身布局问题造成的，为此建了一个简单的页面进行测试依然失效，google发现还真是有这样的问题，google reader上也是失效的，mobile safari为此需要使用两个手指才能完成滚动局部的行为。<br>为了解决这样的问题继续google，最后发现了上述的一篇文章，使用mobile safari的touchmove事件模拟滚动条的效果。废话不多说代码如下：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">isTouchDevice</span></span>()&#123;</span><br><span class="line"> try&#123;</span><br><span class="line">   document.createEvent(<span class="string">"TouchEvent"</span>);</span><br><span class="line">   <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;catch(e)&#123;</span><br><span class="line">   <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> touchScroll(id)&#123;</span><br><span class="line">  <span class="keyword">if</span>(isTouchDevice())&#123; </span><br><span class="line">    //<span class="keyword">if</span> touch events exist...</span><br><span class="line">    var el=document.getElementById(id);</span><br><span class="line">    var scrollStartPos=<span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    document.getElementById(id).addEventListener(<span class="string">"touchstart"</span>, <span class="keyword">function</span>(event) &#123;</span><br><span class="line">    	scrollStartPos=this.scrollTop+event.touches[<span class="number">0</span>].pageY;</span><br><span class="line">    	event.preventDefault();</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">     </span><br><span class="line">    document.getElementById(id).addEventListener(<span class="string">"touchmove"</span>, <span class="keyword">function</span>(event) &#123;</span><br><span class="line">    	this.scrollTop=scrollStartPos-event.touches[<span class="number">0</span>].pageY;</span><br><span class="line">    	event.preventDefault();</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//最后使用</span><br><span class="line">touchScroll(<span class="string">"MyElement"</span>); //将你需要overflow:auto的元素id调用这个方法即可。</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这次有个项目需要完全支持ipad，中间还是遇到了不少的问题。今天有个div需要滚动条在ipad的safari下面失效，mobile safari因为多点触摸的缘故取消了局部区域的滚动条（为了防止和默认的拖动行为冲突）。首先排除了是不是本身布局问题造成的，为此建了一个简单的页]]>
    </summary>
    
      <category term="mobile" scheme="http://fire17643.github.io/blog/tags/mobile/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[完美的全背景图片]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%85%A8%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/完美的全背景图片/</id>
    <published>2015-06-18T08:56:48.928Z</published>
    <updated>2015-06-18T08:56:48.928Z</updated>
    <content type="html"><![CDATA[<p>我们的目标是创建一张背景图，而且它能一直覆盖整个浏览器的窗口。我们看看它有什么特点：</p>
<blockquote>
<p>图片覆盖整个页面，没有白边<br>按需要缩放图片<br>保留图片比例（方向 比例）<br>图片居中<br>不产生滚动条<br>尽可能保证浏览器的兼容性<br>不使用Flash这样的小把戏</p>
</blockquote>
<h2 id="强劲_简单_先进的CSS3方式">强劲 简单 先进的CSS3方式</h2><p>鉴于css3中已经有了background-size 这个属性，那我们完全就可以使用css来实现了。使用html元素（不用body是因为至少html的height总是浏览器窗口的高度）。我们设置background为fixed和center，再使用background-size来适应大小<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123; </span><br><span class="line">	<span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(images/bg.jpg) no-repeat center center fixed</span></span>; </span><br><span class="line">	<span class="rule"><span class="attribute">-webkit-background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-moz-background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">-o-background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>可用于：<br>Safari 3+<br>Chrome Whatever+<br>IE 9+<br>Opera 10+ (Opera 9.5 支持background-size 但不是这个关键字)<br>Firefox 3.6+ (Firefox 4 支持没有前缀的版本)<br>更新：<br>感谢Goltzman 在评论中提出了IE的兼容方式：<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">filter</span>:<span class="value"> progid:DXImageTransform.Microsoft.<span class="function">AlphaImageLoader</span>(src=<span class="string">'.myBackground.jpg'</span>, sizingMethod=<span class="string">'scale'</span>)</span></span>; <span class="rule"><span class="attribute">-ms-filter</span>:<span class="value"> <span class="string">"progid:DXImageTransform.Microsoft.AlphaImageLoader(src='myBackground.jpg', sizingMethod='scale')"</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure></p>
<p>注意，读者 Pierre Orsander提出他们尝试使用这种方式时候发现页面在关闭时会出现一些问题。<br>更新：Matt Litherland任何人尝试使用上述IE的filter，在滚动条、死链、或其他地方出现问题时，就不该在html或body元素上添加样式，而是使用一个position为fixed的，width、height均为100%的div代替。</p>
<h2 id="纯CSS方式_#1">纯CSS方式 #1</h2><p>同样，非常感谢<a href="http://dougneiner.com/" target="_blank" rel="external">Doug Neiner</a> 提供的另一个版本。这里我们使用一个inline的img标签，这就可以在任何浏览器里都能改变大小。设置一个min-height来保证能够在垂直方向上填充浏览器，设置width 100%保证水平填充。同时给img设置min-width来保证图片永远不会比它本身还小。<br>这里可用到的特殊技巧就是使用media query来检查是否浏览器比图片还要小，使用left和margin-left的组合来保证图片居中。<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">img</span><span class="class">.bg</span> <span class="rules">&#123;</span><br><span class="line"> <span class="comment">/* Set rules to fill background */</span></span><br><span class="line"> <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">1024px</span></span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Set up proportionate scaling */</span></span><br><span class="line"> <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">height</span>:<span class="value"> auto</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Set up positioning */</span></span><br><span class="line"> <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line"> <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line">	</span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (max-width: <span class="number">1024px</span>) </span>&#123; <span class="comment">/* Specific to this particular image */</span></span><br><span class="line">  <span class="tag">img</span><span class="class">.bg</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">512px</span></span></span>;   <span class="comment">/* 50% */</span></span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="纯CSS方式_#2">纯CSS方式 #2</h2><p>另一种简单的实现方式是在页面上放一个inline的img标签，通过position:fixed定位于左上角,ming-width和min-height为100%，保留其长宽比</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/bg.jpg"</span> <span class="attribute">id</span>=<span class="value">"bg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#bg</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Preserve aspet ratio */</span></span><br><span class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然而，这样没有使图片居中。那我们就把它设为fixed，同时包裹于div内，而且这个div是浏览器窗口宽高的200%。那么图片就能居中定位，同时保留长宽比。<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"bg"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/bg.jpg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#bg</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> -<span class="number">50%</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">50%</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200%</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200%</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="id">#bg</span> <span class="tag">img</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>; </span><br><span class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>可用于：<br>Safari / Chrome / Firefox (最近版本都是可行的)<br>IE 8+<br>Opera (任何版本) 以及 IE 都以相同方式崩溃(定位错误，具体原因不明)[最新的webkit内核的可行]<br>Peter VanWylen 提到：如果你是通过js添加的图片，那么在IE8 9 10 中img需要设置 width: auto; and height: auto;</p>
<h2 id="绝对定位方式">绝对定位方式</h2> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/bg.jpg"</span> <span class="attribute">id</span>=<span class="value">"bg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#bg</span><span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0.2</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="jQuery方式">jQuery方式</h2><p>如果我们知道一张图品的宽高比是大于还是小于浏览器的窗口，那事情就变得容易多了。若果小，那我们只需要设置width 100%，那它就能把宽高填充。如果图片要高我们只需要设置height 100%就能达到同样效果。<br>上述想法可以通过js实现，我更倾向于jQuery。<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/bg.jpg"</span> <span class="attribute">id</span>=<span class="value">"bg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#bg</span> <span class="rules">&#123; <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>; <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.bgwidth</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.bgheight</span> <span class="rules">&#123; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> theWindow = $(<span class="built_in">window</span>),</span><br><span class="line">        $bg = $(<span class="string">"#bg"</span>),</span><br><span class="line">	aspectRatio = $bg.width() / $bg.height();			    		</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resizeBg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( (theWindow.width() / theWindow.height()) &lt; aspectRatio ) &#123;</span><br><span class="line">	    $bg.removeClass().addClass(<span class="string">'bgheight'</span>);</span><br><span class="line">	 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             $bg.removeClass().addClass(<span class="string">'bgwidth'</span>);</span><br><span class="line">	&#125;				</span><br><span class="line">     &#125;</span><br><span class="line">     theWindow.resize(resizeBg).trigger(<span class="string">"resize"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>我们的目标是创建一张背景图，而且它能一直覆盖整个浏览器的窗口。我们看看它有什么特点：</p>
<blockquote>
<p>图片覆盖整个页面，没有白边<br>按需要缩放图片<br>保留图片比例（方向 比例）<br>图片居中<br>不产生滚动条<br>尽可能保证浏览器的兼容]]>
    </summary>
    
      <category term="技巧" scheme="http://fire17643.github.io/blog/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Hack代码与浏览兼容总结]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/CSS-Hack%E4%BB%A3%E7%A0%81%E4%B8%8E%E6%B5%8F%E8%A7%88%E5%85%BC%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/CSS-Hack代码与浏览兼容总结/</id>
    <published>2015-06-18T08:54:27.201Z</published>
    <updated>2015-06-18T08:54:27.201Z</updated>
    <content type="html"><![CDATA[<h3 id="IE条件注释法，微软官方推荐的hack方式。">IE条件注释法，微软官方推荐的hack方式。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只在IE下生效 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span><br><span class="line">这段文字只在IE浏览器上显示</span><br><span class="line">&lt;!--[endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只在IE6下生效 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span><br><span class="line">这段文字只在IE6浏览器上显示</span><br><span class="line">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只在IE6以上版本生效--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gt IE 6]&gt;</span><br><span class="line">这段文字只在IE6以上版本IE浏览器上显示</span><br><span class="line">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只在IE7上不生效 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if ! IE 7]&gt;</span><br><span class="line">这段文字在非IE7浏览器上显示</span><br><span class="line">&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 非IE浏览器生效 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if !IE]&gt;</span><br><span class="line">这段文字只在非IE浏览器上显示</span><br><span class="line">&lt;!--&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.常用的IE hack<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.csshack</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>:blue;</span><br><span class="line">	<span class="attribute">background</span>:blue\<span class="number">9</span>; <span class="comment">/*all ie*/</span></span><br><span class="line">	<span class="attribute">background</span>:blue\<span class="number">0</span>/; <span class="comment">/*ie8-ie9*/</span></span><br><span class="line">	<span class="attribute">background<span class="comment">/*\**/</span></span>: blue\<span class="number">9</span>; <span class="comment">/* ie7-ie8*/</span></span><br><span class="line">	*<span class="attribute">background</span>:blue;<span class="comment">/* or #background: blue */</span> <span class="comment">/*ie6-ie7*/</span>    </span><br><span class="line">	+<span class="attribute">background</span>:blue; <span class="comment">/*ie7*/</span></span><br><span class="line">	<span class="attribute">_background</span>:blue; <span class="comment">/*ie6*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="pseudo">:root</span> <span class="class">.csshack</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>:blue; <span class="comment">/*大于等于ie9*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* IE9, IE10 */</span></span><br><span class="line"><span class="at_rule">@media</span> screen and (<span class="attribute">min-width</span>:<span class="number">0</span>\<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="class">.csshack</span> &#123; <span class="tag">color</span>: <span class="tag">red</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* IE 10+ */</span></span><br><span class="line">@<span class="tag">media</span> <span class="tag">screen</span> <span class="tag">and</span> (<span class="attribute">-ms-high-contrast</span>: active), (<span class="attribute">-ms-high-contrast</span>: none) &#123;</span><br><span class="line">   <span class="id">#veintiun</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* saf3+, chrome1+ */</span></span><br><span class="line"><span class="at_rule">@media</span> screen and (<span class="attribute">-webkit-min-device-pixel-ratio</span>:<span class="number">0</span>) &#123;</span><br><span class="line">   <span class="id">#diez</span>  &#123; <span class="tag">color</span>: <span class="tag">red</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iPhone / mobile webkit */</span></span><br><span class="line">@<span class="tag">media</span> <span class="tag">screen</span> <span class="tag">and</span> (<span class="attribute">max-device-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="id">#veintiseis</span> &#123; <span class="tag">color</span>: <span class="tag">red</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Firefox only. 1+ */</span></span><br><span class="line"><span class="id">#veinticuatro</span>,  <span class="tag">x</span><span class="pseudo">:-moz-any-link</span>  &#123; <span class="tag">color</span>: <span class="tag">red</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Firefox 3.0+ */</span></span><br><span class="line"><span class="id">#veinticinco</span>,  <span class="tag">x</span><span class="pseudo">:-moz-any-link</span>, <span class="tag">x</span><span class="pseudo">:default</span>  &#123; <span class="tag">color</span>: <span class="tag">red</span>  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* FF 3.5+ */</span></span><br><span class="line"><span class="tag">body</span><span class="pseudo">:not</span>(<span class="pseudo">:-moz-handler-blocked</span>) <span class="id">#cuarenta</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure></p>
<p>3.IE CSS Media，来自这里<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @media hacks */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE6/7 only (via Keith Clarke) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen\<span class="number">9</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE6/7/8 (via Keith Clarke) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> \<span class="number">0s</span>creen\,screen\<span class="number">9</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE8 (via Keith Clarke) */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> \<span class="number">0s</span>creen </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE8/9/10 */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen\<span class="number">0</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE9/10 */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">0</span>\<span class="number">0</span>) </span>&#123;</span><br><span class="line">    <span class="tag">body</span> <span class="rules">&#123; <span class="rule"><span class="attribute">background</span>:<span class="value"> yellow</span></span>; &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="IE条件注释法，微软官方推荐的hack方式。">IE条件注释法，微软官方推荐的hack方式。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="li]]>
    </summary>
    
      <category term="browser" scheme="http://fire17643.github.io/blog/tags/browser/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[放弃jQuery改用原生JS编程]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/remove-jQuery/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/remove-jQuery/</id>
    <published>2015-06-18T08:44:03.079Z</published>
    <updated>2015-06-18T08:44:03.079Z</updated>
    <content type="html"><![CDATA[<h2 id="一-Ajax请求">一.Ajax请求</h2><h3 id="1-get请求">1.get请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.getJSON(<span class="string">'/my/url'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">'GET'</span>, <span class="string">'/my/url'</span>, <span class="literal">true</span>);</span><br><span class="line">request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">    <span class="comment">// Success!</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(request.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// We reached our target server, but it returned an error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// There was a connection error of some sort</span></span><br><span class="line">&#125;;</span><br><span class="line">request.send();</span><br></pre></td></tr></table></figure>
<h3 id="2-POST请求">2.POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'/my/url'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">'POST'</span>, <span class="string">'/my/url'</span>, <span class="literal">true</span>);</span><br><span class="line">request.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>);</span><br><span class="line">request.send(data);</span><br></pre></td></tr></table></figure>
<h2 id="二-Class操作">二.Class操作</h2><h3 id="1-添加">1.添加</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).addClass(className);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">if</span> (el.classList)</span><br><span class="line">  el.classList.add(className);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  el.className += <span class="string">' '</span> + className;</span><br></pre></td></tr></table></figure>
<h3 id="2-删除">2.删除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).removeClass(className);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">if</span> (el.classList)</span><br><span class="line">  el.classList.remove(className);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  el.className = el.className.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\b)'</span> + className.split(<span class="string">' '</span>).join(<span class="string">'|'</span>) + <span class="string">'(\\b|$)'</span>, <span class="string">'gi'</span>), <span class="string">' '</span>);</span><br></pre></td></tr></table></figure>
<h3 id="3-检查">3.检查</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).hasClass(className);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">if</span> (el.classList)</span><br><span class="line">  el.classList.contains(className);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| )'</span> + className + <span class="string">'( |$)'</span>, <span class="string">'gi'</span>).test(el.className);</span><br></pre></td></tr></table></figure>
<h2 id="三-DOM操作">三.DOM操作</h2><h3 id="1-插入节点before,after,append">1.插入节点before,after,append</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).after(htmlString);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.insertAdjacentHTML(<span class="string">'afterend'</span>, htmlString);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(parent).append(el);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">parent.appendChild(el);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).before(htmlString);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.insertAdjacentHTML(<span class="string">'beforebegin'</span>, htmlString);</span><br></pre></td></tr></table></figure>
<h3 id="2-查找、遍历、筛选、删除、替换节点">2.查找、遍历、筛选、删除、替换节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).children();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">el.children||el.childNodes</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).siblings();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.filter.call(el.parentNode.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> child !== el;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.contains(el, child);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el !== child &amp;&amp; el.contains(child);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(elements, <span class="function"><span class="keyword">function</span>(<span class="params">el, i</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(selector).filter(filterFn);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.filter.call(<span class="built_in">document</span>.querySelectorAll(selector), filterFn);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).parent();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.parentNode</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(parent).prepend(el);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">parent.insertBefore(el, parent.firstChild);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).remove();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.parentNode.removeChild(el)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).replaceWith(string);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.outerHTML = string;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).next();</span><br><span class="line">$(el).prev();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">el.nextElementSibling</span><br><span class="line">el.previousElementSibling</span><br></pre></td></tr></table></figure>
<h3 id="3-复制节点">3.复制节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).clone();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.cloneNode(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h3 id="4-属性节点读写">4.属性节点读写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).attr(<span class="string">'tabindex'</span>);</span><br><span class="line">$(el).attr(<span class="string">'tabindex'</span>, <span class="string">""</span>);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.getAttribute(<span class="string">'tabindex'</span>);</span><br><span class="line">el.setAttribute(<span class="string">'tabindex'</span>, <span class="string">""</span>);</span><br></pre></td></tr></table></figure>
<h3 id="5-CSS样式读写">5.CSS样式读写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).css(ruleName);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">getComputedStyle(el)[ruleName];</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).toggleClass(className);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">if</span> (el.classList) &#123;</span><br><span class="line">  el.classList.toggle(className);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> classes = el.className.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">var</span> existingIndex = classes.indexOf(className);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (existingIndex &gt;= <span class="number">0</span>)</span><br><span class="line">    classes.splice(existingIndex, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    classes.push(className);</span><br><span class="line"></span><br><span class="line">  el.className = classes.join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-获取节点值">6.获取节点值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).text();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">el.textContent</span><br></pre></td></tr></table></figure>
<h3 id="7-节点判断">7.节点判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).is($(otherEl));</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el === otherEl</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).is(<span class="string">'.my-class'</span>);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> matches = <span class="function"><span class="keyword">function</span>(<span class="params">el, selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);</span><br><span class="line">&#125;;</span><br><span class="line">matches(el, <span class="string">'.my-class'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="8-节点坐标定位">8.节点坐标定位</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).offset();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">var</span> rect = el.getBoundingClientRect()</span><br><span class="line">&#123;</span><br><span class="line">  top: rect.top + <span class="built_in">document</span>.body.scrollTop,</span><br><span class="line">  left: rect.left + <span class="built_in">document</span>.body.scrollLeft</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).offsetParent();</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.offsetParent || el</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).outerHeight();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.offsetHeight</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).position();</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">&#123;left: el.offsetLeft, top: el.offsetTop&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四-事件监听">四.事件监听</h2><h3 id="1-绑定事件">1.绑定事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).on(eventName, eventHandler);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line">el.addEventListener(eventName, eventHandler,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-触发事件">2.触发事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).trigger(<span class="string">'my-event'</span>, &#123;some: <span class="string">'data'</span>&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.CustomEvent) &#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(<span class="string">'my-event'</span>, &#123;detail: &#123;some: <span class="string">'data'</span>&#125;&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'CustomEvent'</span>);</span><br><span class="line">  event.initCustomEvent(<span class="string">'my-event'</span>, <span class="literal">true</span>, <span class="literal">true</span>, &#123;some: <span class="string">'data'</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">el.dispatchEvent(event);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.proxy(fn, context);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">fn.bind(context);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(el).trigger(<span class="string">'change'</span>);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="comment">// For a full list of event types: https://developer.mozilla.org/en-US/docs/Web/API/document.createEvent</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'HTMLEvents'</span>);</span><br><span class="line">event.initEvent(<span class="string">'change'</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">el.dispatchEvent(event);</span><br></pre></td></tr></table></figure>
<h2 id="五-数组和对象操作">五.数组和对象操作</h2><h3 id="1-遍历数组">1.遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.each(array, <span class="function"><span class="keyword">function</span>(<span class="params">i, item</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, i</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.map(array, <span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="2-扩展对象">2.扩展对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.extend(<span class="literal">true</span>, &#123;&#125;, objA, objB);</span><br><span class="line"><span class="comment">// IE8+</span></span><br><span class="line"><span class="keyword">var</span> deepExtend = <span class="function"><span class="keyword">function</span>(<span class="params">out</span>) </span>&#123;</span><br><span class="line">  out = out || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (!obj)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span>)</span><br><span class="line">          deepExtend(out[key], obj[key]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          out[key] = obj[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">deepExtend(&#123;&#125;, objA, objB);</span><br></pre></td></tr></table></figure>
<h3 id="3-数组判断和值检测">3.数组判断和值检测</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.inArray(item, array);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">array.indexOf(item)</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.isArray(arr);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr)</span><br></pre></td></tr></table></figure>
<h3 id="4-对象判断和检测">4.对象判断和检测</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.type(obj);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj).replace(<span class="regexp">/^\[object (.+)\]$/</span>, <span class="string">"$1"</span>).toLowerCase();</span><br></pre></td></tr></table></figure>
<h2 id="六-其他">六.其他</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.now();</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="built_in">Date</span>.now()</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.parseHTML(htmlString);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line"><span class="keyword">var</span> parseHTML = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="built_in">document</span>.implementation.createHTMLDocument();</span><br><span class="line">  tmp.body.innerHTML = str;</span><br><span class="line">  <span class="keyword">return</span> tmp.body.children;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">parseHTML(htmlString);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$.trim(string);</span><br><span class="line"><span class="comment">// IE9+</span></span><br><span class="line">string.trim();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一-Ajax请求">一.Ajax请求</h2><h3 id="1-get请求">1.get请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="lin]]>
    </summary>
    
      <category term="js" scheme="http://fire17643.github.io/blog/tags/js/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript在IE和Firefox中的不同语法]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/javascript%E5%9C%A8IE%E5%92%8CFirefox%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%90%8C%E8%AF%AD%E6%B3%95/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/javascript在IE和Firefox中的不同语法/</id>
    <published>2015-06-18T08:34:13.082Z</published>
    <updated>2015-06-18T08:34:13.082Z</updated>
    <content type="html"><![CDATA[<h2 id="一-元素查找问题">一.元素查找问题</h2><ol>
<li><p>document.all[name]<br>(1)现有问题：Firefox不支持<code>document.all[name]</code><br>(2)解决方法：使用getElementsByName(name)，getElementById(id)等来替代。</p>
</li>
<li><p>集合类对象问题<br>(1)现有问题：IE中对许多集合类对象取用时可以用 ()，但在Firefox只能用[]。<br>   如：IE中可以使用<code>document.forms(&quot;formName&quot;)</code>来返回名字为”formName”的Form，但在Firefox却行不通。<br>(2)解决方法：使用[]，上例中可以改为<code>document.forms[&quot;formName&quot;]</code></p>
</li>
<li><p>HTML元素的ID在JavaScript可见<br>(1)现有问题：IE中HTML元素中的ID可以作为document的下属对象变量名直接使用。在Firefox中不能。<br>(2)解决方法：使用<code>getElementById(&quot;idName&quot;)</code>代替idName作为对象变量使用。</p>
</li>
<li><p>eval(idName)取得对象<br>(1)现有问题：在IE中，利用<code>val(idName)</code>可以取得ID为idName的HTML对象，在Firefox中不能。<br>(2)解决方法：用 <code>getElementById(idName)</code> 代替 <code>eval(idName)</code>。</p>
</li>
<li><p>变量名与某HTML对象ID相同<br>(1)现有问题：在Firefox中，因为对象ID不作为HTML对象的名称，所以可以使用与HTML对象id相同的变量名，IE中不能。<br>(2)解决方法：在声明变量时，一律加上var，以避免歧义，这样在IE中亦可正常运行。此外，最好不要取与HTML对象id相同的变量名，以减少错误。</p>
<p>注：3、4和5都属于同一类的问题。</p>
</li>
<li><p>Frame<br>(1)现有问题：在IE中可以用<code>window.top.frameId</code>和<code>window.top</code>.frameName来得到该Frame所代表的Window，Firefox中只能用<code>window.top.frameName</code>。<br>(2)解决方法：将Frame的Id和Name设置成相同，使用<code>window.top.frameName</code>来访问Frame。</p>
</li>
</ol>
<h2 id="二、DOM操作">二、DOM操作</h2><ol>
<li><p>设置元素的文本内容。<br>(1)现有问题：IE使用innerText，而Firefox使用textContent来设置元素文本内容。<br>(2)解决方法：如果文本内容不包含”&lt;”和”&gt;;”等特殊字符，可以使用innerHTML。否则，可以使用：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var child = elem.firstChild;</span><br><span class="line"><span class="keyword">if</span> <span class="params">(child != null)</span> elem.removeChild<span class="params">(child)</span>;</span><br><span class="line">   elem.appendChild<span class="params">(document.createTextNode<span class="params">(content)</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>parentElement，parent.children<br>(1)现有问题：IE可以使用parentElement获得父结点，parent.children得到结点的所有孩子结点。Firefox不支持。<br>(2)解决方法：使用parentNode和parent.childNodes。</p>
</li>
<li><p>对childNodes的解释。<br>(1)现有问题：IE和Firefox中对childNodes的解释不同，IE不会包含空白文本结点，而Firefox会包含。<br>(2)解决方法：使用childNodes过滤文本结点，如下：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">children</span> = elem.childNodes;</span><br><span class="line">    <span class="keyword">for</span> <span class="params">(i = <span class="number">0</span>; i &lt; children.length; i++)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="params">(children[i].nodeType != <span class="number">3</span>)</span> &#123; </span><br><span class="line">         <span class="comment">// 过滤文本结点</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对<code>document.getElementsByName</code>的解释。<br>(1)现有问题：IE中getElementsByName只会检查<code>&lt;input&gt;</code>;和<code>&lt;img&gt;</code>;元素，而在Firefox下会检查所有元素。<br>(2)解决方法：不要使用getElementsByName检查除<code>&lt;input&gt;</code>;和<code>&lt;img&gt;</code>之外的元素，如果要获得单个元素，尽量使用<code>getElementById</code>。</p>
</li>
<li><p>对<code>document.getElementById</code>的解释。<br>(1)现有问题：IE中getElementById不仅检查Id属性，也会检查Name属性，当Name属性匹配参数时也会返回该元素。而在Firefox中只会检查Id属性。<br>(2)解决方法：尽量保持Id和Name相同，不要让一个元素name属性和另一个元素的id属性相同。</p>
</li>
</ol>
<h2 id="三、事件">三、事件</h2><ol>
<li><p>event.x与event.y问题<br>(1)现有问题：在IE中，event对象有x,y 属性，Firefox中没有。<br>(2)解决方法：在Firefox中，与event.x 等效的是 event.pageX。可以使用：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mX = <span class="keyword">event</span>.x ? <span class="keyword">event</span>.x : <span class="keyword">event</span>.pageX;</span><br></pre></td></tr></table></figure>
</li>
<li><p>window.event<br>(1)现有问题：使用window.event无法在Firefox上运行<br>(2)解决方法： </p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evt = evt ? evt : (<span class="keyword">window</span>.<span class="keyword">event</span> ? <span class="keyword">window</span>.<span class="keyword">event</span> : null);</span><br></pre></td></tr></table></figure>
</li>
<li><p>attachEvent和addEventListener<br>(1)现有问题：IE中使用attachEvent来添加事件，Firefox中使用addEventListener。<br>(2)解决方法：如下，注意事件参数的区别，一个是click，一个是onclick。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) <span class="built_in">document</span>.attachEvent(<span class="string">"onclick"</span>, clickHandler);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>,clickHandler,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>四、语法</p>
<ol>
<li><p>const<br>(1)现有问题：在IE中不能使用const关键字。如<code>const constVar = 32;</code>在IE中这是语法错误。<br>(2)解决方法：不使用const，以var代替。</p>
</li>
<li><p>多余的逗号<br>(1)现有问题：firefox中对象文字常量容许多余的逗号，在IE中不允许。下面语句在IE中非法。<br>   <code>var obj = { &#39;key&#39; : &#39;aaa&#39;, }</code><br>(2)解决方法：去掉多余逗号。</p>
</li>
</ol>
<p>五、XML</p>
<ol>
<li>创建XMLHttpRequest<br>(1)现有问题：Firefox使用XMLHttpRequest，IE使用ActiveXObject。<br>(2)解决方法:<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">  req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</span><br><span class="line">	req = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>创建DOM<br>(1)现有问题：Firefox和IE创建DOM的方式不同。<br>(2)解决方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXmlDom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> oXmlDom;</span><br><span class="line">	<span class="keyword">if</span> (Window.ActiveXObject) &#123; <span class="comment">// IE</span></span><br><span class="line">	  oXmlDom = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XmlDom"</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;  <span class="comment">// Firefox</span></span><br><span class="line">	  oXmlDom = <span class="built_in">document</span>.implementation.createDocument(<span class="string">""</span>, <span class="string">""</span>, <span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载XML<br>(1)现有问题：如果要加载外部文件IE和Firefox都可以用:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oXmlDom.<span class="keyword">async</span>=<span class="keyword">false</span>;      <span class="comment">// 这在Firefox中是必须的</span></span><br><span class="line">oXmlDom.load(<span class="string">"test.xml"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>但是它们加载xml字符串的方式不一样，IE中直接可以使用<code>oXmlDom.loadXML(&quot;&lt;root&gt;;&lt;child/&gt;;&lt;/root&gt;;&quot;)</code>，而Firefox要使用<code>DOMParser</code>:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> oParser</span> = new DOMParser();</span><br><span class="line"><span class="variable"><span class="keyword">var</span> oXmlDom</span> = oParser.parseFromString(<span class="string">"&lt;root/&gt;;"</span>, <span class="string">"text/xml"</span>);</span><br></pre></td></tr></table></figure></p>
<p>  (2)解决方法：比较好的方法是给Firefox产生的XMLDom加上loadXML方法：<br>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFirefox) &#123; <span class="comment">// 需要浏览器检测</span></span><br><span class="line">    Document.prototype.loadXML = <span class="function"><span class="keyword">function</span><span class="params">(sXml)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> oParser = <span class="keyword">new</span> DOMParser();</span><br><span class="line">      <span class="keyword">var</span> oXmlDom = oParser.parseFromString(sXml, <span class="string">"text/xml"</span>);</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">this</span>.firstChild) <span class="keyword">this</span>.removeChild(<span class="keyword">this</span>.firstChild); </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oXmlDom.childNodes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> oNewNode = <span class="keyword">this</span>.importNode(oXmlDom.childNodes[i], <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.appendChild(oNewNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>  这样在IE和Firefox就可以调用loadXML方法了。 </p>
<ol>
<li><p>XPath支持<br>(1)现有问题：IE中可以直接用XmlDOM的selectNodes来根据XPath表示式来选择结点，Firefox则比较复杂，需要使用XPathEvaluator。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IE: </span></span><br><span class="line"><span class="keyword">var</span> lstNodes = oXmlDom.documentElement.selectNodes(<span class="string">"employee/name"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lstNodes.length; i++) &#123;</span><br><span class="line">  alert(lstNodes[i].firstChild.nodeValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Firefox: </span></span><br><span class="line"><span class="keyword">var</span> oEvaluator = <span class="keyword">new</span> XPathEvaluator();</span><br><span class="line"><span class="keyword">var</span> oResult = oEvaluator.evaluate(<span class="string">"employee/name"</span>, oXmlDom.documentElement, <span class="literal">null</span>, XPathResult.ORDERED_NODE_ITERATOR_TYPE, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> oElement = oResult.iterateNext();</span><br><span class="line"><span class="keyword">while</span> (oElement) &#123;</span><br><span class="line">  alert(oElement.firstChild.nodeValue);</span><br><span class="line">  oElement = oResult.iterateNext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2)解决方法：比较好的方法给Firefox的Element添加selectNodes方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (isFirefox) &#123; <span class="comment">// 需要浏览器检测</span></span><br><span class="line">    Element.prototype.selectNodes = <span class="function"><span class="keyword">function</span>(<span class="params">sXPath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oEvaluator = <span class="keyword">new</span> XPathEvaluator();</span><br><span class="line">      <span class="keyword">var</span> oResult = oEvaluator.evaluate(sXPath, <span class="keyword">this</span>, <span class="literal">null</span>, XPathResult.ORDERED_NODE_ITERATOR_TYPE,<span class="literal">null</span>); </span><br><span class="line">      <span class="keyword">var</span> aNodes = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">      <span class="keyword">if</span> (oResult != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> oElement = oResult.iterateNext();</span><br><span class="line">        <span class="keyword">while</span> (oElement) &#123;</span><br><span class="line">          aNodes.push(oElement);</span><br><span class="line">          oElement = oResult.iterateNext();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> aNodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这样在IE和Firefox中就都可以调用selectNodes方法了。 </p>
<ol>
<li><p>XSLT支持<br>(1)现有问题：IE中可以使用XmlDOM的transferNode方法将其转换成html，而Firefox需要使用XSLTProcessor。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IE:</span></span><br><span class="line">oXmlDom.load(<span class="string">"employee.xml"</span>);</span><br><span class="line">oXslDom.load(<span class="string">"employee.xslt"</span>);</span><br><span class="line"><span class="variable"><span class="keyword">var</span> sResult</span>=oXmlDom.transformNode(oXslDom);</span><br><span class="line"><span class="comment">//Firefox:</span></span><br><span class="line"><span class="variable"><span class="keyword">var</span> oProcessor</span> = new XSLTProcessor();</span><br><span class="line">oProcessor.importStylesheet(oXslDom);</span><br><span class="line"><span class="variable"><span class="keyword">var</span> oResultDom</span> = oProcessor.transformToDocument(oXmlDom);        </span><br><span class="line"><span class="variable"><span class="keyword">var</span> oSerializer</span> = new XMLSerializer();</span><br><span class="line"><span class="variable"><span class="keyword">var</span> sXml</span> = oSerializer.serializeToString(oResultDom, <span class="string">"text/xml"</span>);</span><br><span class="line">alert(sXml);</span><br></pre></td></tr></table></figure>
<p>(2)解决方法：比较好的方法给Firefox的Node添加transferNode方法。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isFirefox) &#123; </span><br><span class="line">	<span class="comment">// 需要浏览器检测</span></span><br><span class="line">	Node.prototype.transformNode = <span class="function"><span class="keyword">function</span><span class="params">(oXslDom)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> oProcessor = <span class="keyword">new</span> XSLTProcessor();</span><br><span class="line">	  oProcessor.importStylesheet(oXslDom);</span><br><span class="line">	  <span class="keyword">var</span> oResultDom = oProcessor.transformToDocument(oXmlDom);</span><br><span class="line">	  </span><br><span class="line">	  <span class="keyword">var</span> oSerializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line">	  <span class="keyword">var</span> sXml = oSerializer.serializeToString(oResultDom, <span class="string">"text/xml"</span>);</span><br><span class="line">	  </span><br><span class="line">	  <span class="keyword">return</span> sXml;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在IE和Firefox中就都可以调用transferNode方法了。</p>
</li>
</ol>
<h2 id="其他：">其他：</h2><p>1.窗体的高度和宽度    </p>
<p>IE：<code>document.body.offsetWidth</code>和<code>document.body.offsetHeight</code>。注意：此时页面一定要有body标签。<br>FF：<code>window.innerWidth和window.innerHegiht</code>，<br>以及<code>document.documentElement.clientWidth</code>和<code>document.documentElement.clientHeight</code>。<br>通用：<code>document.body.clientWidth</code>和<code>document.body.clientHeight</code>。    </p>
<p>2.标签的自定义属性   </p>
<p>IE：如果给标签div1定义了一个属性value，可以div1.value和div1[“value”]取得该值。<br>FF：不能用div1.value和div1[“value”]取。<br>通用：div1.getAttribute(“value”)。    </p>
<p>3.用idName字符串取得对象的问题<br>(1)现有问题<br>     在IE中，利用 eval(idName) 可以取得 id 为 idName 的 HTML 对象，在MF 中不能。<br>(2)解决方法<br>     用 getElementById(idName) 代替 eval(idName)。   </p>
<p>4.变量名与某 HTML 对象 id 相同的问题<br>(1)现有问题<br>    在 MF 中，因为对象 id 不作为 HTML 对象的名称，所以可以使用与 HTML 对象 id 相同的变量名，IE 中不能。<br>(2)解决方法<br>    在声明变量时，一律加上 var ，以避免歧义，这样在 IE 中亦可正常运行。<br>    此外，最好不要取与 HTML 对象 id 相同的变量名，以减少错误。   </p>
<p>5.<code>document.getElementsByName()</code> 和 <code>document.all[name]</code> 的问题<br>现有问题：在 IE 中，getElementsByName()、document.all[name] 均不能用来取得 div 元素<br>（是否还有其它不能取的元素还不知道）。<br>//document.all<br>Firefox可以兼容document.all， 但会生成一条警告。可以用getElementById(“<em>“)<br>或者 getElementByTagName(“</em>“)来代替<br>不过对于document.all.length等属性，则完全不兼容   </p>
<p>6.input.type属性问题<br>说明:IE下input.type属性为只读;但是Firefox下input.type属性为读写   </p>
<p>7.frame问题<br>以下面的frame为例：<br><code>&lt;frame src=&quot;xxx.html&quot; mce_src=&quot;xxx.html&quot; id=&quot;frameId&quot; name=&quot;frameName&quot; /&gt;</code><br>(1)访问frame对象:<br>IE:使用window.frameId或者window.frameName来访问这个frame对象. frameId和frameName可以同名。<br>FF:只能使用window.frameName来访问这个frame对象.<br>另外，在IE和Firefox中都可以使用window.document.getElementById(“frameId”)来访问这个frame对象.<br>(2)切换frame内容:<br>在IE和Firefox中都可以使用<code>window.document.getElementById(&quot;testFrame&quot;).src = &quot;xxx.html&quot;</code><br>或<code>window.frameName.location = &quot;xxx.html&quot;</code>来切换frame的内容.<br>如果需要将frame中的参数传回父窗口(注意不是opener,而是parent frame)，可以在frme中使用parent来访问父窗口。<br>例如：<code>window.parent.document.form1.filename.value=&quot;Aqing&quot;</code>;    </p>
<p>8.事件委托方法<br>IE：<code>document.body.onload = inject; //Function inject()</code>在这之前已被实现<br>FF：<code>document.body.onload = inject();</code>    </p>
<p>9.innerText在IE中能正常工作，但是innerText在FireFox中却不行. 需用textContent   </p>
<p>10.父节点、子节点和删除节点<br>IE：<code>parentElement</code>、<code>parement.children</code>，<code>element.romoveNode(true)</code>。<br>FF：<code>parentNode</code>、<code>parentNode.childNodes</code>，<code>node.parentNode.removeChild(node)</code>。    </p>
<p>11.对select的options集合操作<br>枚举元素除了[]外，<code>SelectName.options.item()</code>也是可以的, 另外<code>SelectName.options.length</code>,<br><code>SelectName.options.add/remove</code>都可以在两种浏览器上使用。<br>注意在add后赋值元素，否则会失败<br>动态删除select中的所有options：<br>       <code>document.getElementById(&quot;ddlResourceType&quot;).options.length=0;</code><br>动态删除select中的某一项option：<br>       <code>document.getElementById(&quot;ddlResourceType&quot;).options.remove(indx);</code><br>动态添加select中的项option:<br>       <code>document.getElementById(&quot;ddlResourceType&quot;).options.add(new Option(text,value));</code><br>IE FF 动态删除通用方法：<br><code>document.getElementById(&quot;ddlResourceType&quot;).options[indx] = null;</code>  </p>
<p>12.捕获事件<br>问题：<br>FF没有setCapture()、releaseCapture()方法<br>解决方法：<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE:    </span></span><br><span class="line">obj.setCapture<span class="params">()</span>;    </span><br><span class="line">obj.releaseCapture<span class="params">()</span>;    </span><br><span class="line"><span class="comment">// FF:    </span></span><br><span class="line">window.captureEvents<span class="params">(Event.MOUSEMOVE|Event.MOUSEUP)</span>;    </span><br><span class="line">window.releaseEvents<span class="params">(Event.MOUSEMOVE|Event.MOUSEUP)</span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="params">(!window.captureEvents)</span> &#123;    </span><br><span class="line">	o.setCapture<span class="params">()</span>;    </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;    </span><br><span class="line">	window.captureEvents<span class="params">(Event.MOUSEMOVE|Event.MOUSEUP)</span>;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">if</span> <span class="params">(!window.captureEvents)</span> &#123;    </span><br><span class="line">	o.releaseCapture<span class="params">()</span>;    </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;    </span><br><span class="line">	window.releaseEvents<span class="params">(Event.MOUSEMOVE|Event.MOUSEUP)</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>13.禁止选取网页内容<br>问题：<br>FF需要用CSS禁止，IE用JS禁止<br>解决方法：<br>IE: <code>obj.onselectstart = function() {return false;}</code><br>FF: <code>-moz-user-select:none;</code><br>1４. CSS “float” 值<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"header"</span>).style.styleFloat = <span class="string">"left"</span>; <span class="comment">//IE</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"header"</span>).style.cssFloat = <span class="string">"left"</span>; <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１５. 元素的推算样式<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"header"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myStyle</span> = myObject.currentStyle.backgroundColor; <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"header"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myComputedStyle</span> = document.defaultView.getComputedStyle(myObject, <span class="literal">null</span>); </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myStyle</span> = myComputedStyle.backgroundColor;  <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１６. 访问元素的”class”<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"header"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myAttribute</span> = myObject.getAttribute(<span class="string">"className"</span>); <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"header"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myAttribute</span> = myObject.getAttribute(<span class="string">"class"</span>); <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１７. 访问<code>&lt;label&gt;</code>标签中的”for”<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = document.getElementById(<span class="string">"myLabel"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myAttribute</span> = myObject.getAttribute(<span class="string">"htmlFor"</span>); <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span></span> = document.getElementById(<span class="string">"myLabel"</span>);   </span><br><span class="line"><span class="variable"><span class="keyword">var</span> myAttribute</span> = myObject.getAttribute(<span class="string">"for"</span>); <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１８. 获取鼠标指针的位置<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCursorPosition = [<span class="number">0</span>, <span class="number">0</span>];   </span><br><span class="line">myCursorPosition[<span class="number">0</span>] = <span class="keyword">event</span>.clientX;   </span><br><span class="line">myCursorPosition[<span class="number">1</span>] = <span class="keyword">event</span>.clientY; <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myCursorPosition = [<span class="number">0</span>, <span class="number">0</span>];   </span><br><span class="line">myCursorPosition[<span class="number">0</span>] = <span class="keyword">event</span>.pageX;   </span><br><span class="line">myCursorPosition[<span class="number">1</span>] = <span class="keyword">event</span>.pageY; <span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
<p>１９. 获取可见区域、窗口的大小<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBrowserSize = [<span class="number">0</span>, <span class="number">0</span>];   </span><br><span class="line">myBrowserSize[<span class="number">0</span>] = <span class="built_in">document</span>.documentElement.clientWidth;   </span><br><span class="line">myBrowserSize[<span class="number">1</span>] = <span class="built_in">document</span>.documentElement.clientHeight; <span class="comment">//IE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myBrowserSize = [<span class="number">0</span>, <span class="number">0</span>];   </span><br><span class="line">myBrowserSize[<span class="number">0</span>] = <span class="built_in">window</span>.innerWidth;   </span><br><span class="line">myBrowserSize[<span class="number">1</span>] = <span class="built_in">window</span>.innerHeight;<span class="comment">//Firefox</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一-元素查找问题">一.元素查找问题</h2><ol>
<li><p>document.all[name]<br>(1)现有问题：Firefox不支持<code>document.all[name]</code><br>(2)解决方法：使用getElementsB]]>
    </summary>
    
      <category term="browser" scheme="http://fire17643.github.io/blog/tags/browser/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript定义类的几种方式]]></title>
    <link href="http://fire17643.github.io/blog/2015/06/18/JavaScript%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://fire17643.github.io/blog/2015/06/18/JavaScript定义类的几种方式/</id>
    <published>2015-06-18T08:20:41.145Z</published>
    <updated>2015-06-18T08:20:41.145Z</updated>
    <content type="html"><![CDATA[<h2 id="1-工厂方式">1.工厂方式</h2><p>javaScript中创建自己的类和对象，我们应该是必须掌握的，我们都知道javaScript中对象的属性可以在对象创建后动态定义，比如下面的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oCar = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">oCar.color = <span class="string">"red"</span>;</span><br><span class="line">oCar.doors = <span class="number">4</span>;</span><br><span class="line">oCar.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">oCar.showColor();</span><br></pre></td></tr></table></figure></p>
<p>我们很容易使用oCar对象，但是我们创就是想创建多个Car实例。我们可以使用一个函数来封装上面的代码来实现<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oCar = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    oCar.color = <span class="string">"red"</span>;</span><br><span class="line">    oCar.doors = <span class="number">4</span>;</span><br><span class="line">    oCar.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oCar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ocar1 = createCar();</span><br><span class="line"><span class="keyword">var</span> ocar2 = createCar();</span><br><span class="line">ocar1.color = <span class="string">"black"</span>;</span><br><span class="line">ocar1.showColor();</span><br><span class="line">ocar2.showColor();</span><br></pre></td></tr></table></figure></p>
<p>顺便说一下，javaScript对象默认成员属性都是public 的。这种方式我们称为工厂方式，我们创造了能创建并返回特定类型的对象的工厂。这样做有点意思了，但是在面向对象中我们经常使用创建对象的方法是：Car car=new Car();使用new 关键字已经深入人心，因此我们使用上面的方法去定义总感觉别扭，并且每次调用时都去创建新的属性以及函数，功能上也不实际。下来我们看看构造函数的形式定义类。</p>
<h2 id="2．构造函数">2．构造函数</h2><p>这种方式看起来有点象工厂函数。具体表现如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color, doors</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.doors = doors;</span><br><span class="line">    <span class="keyword">this</span>.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.color);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car(<span class="string">"red"</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> car2 = <span class="keyword">new</span> Car(<span class="string">"blue"</span>, <span class="number">4</span>);</span><br><span class="line">car1.showColor();</span><br><span class="line">car2.showColor();</span><br></pre></td></tr></table></figure></p>
<p>看起来效果很明显，有差别了吧。感觉有点意思了。在构造函数内部创造对象使用this 关键字，使用new 运算符创建对象感觉非常亲切。但是也有点问题：每次new 对象时都会创建所有的属性，包括函数的创建，也就是说多个对象完全独立，我们定义类的目的就是为了共享方法以及数据，但是car1对象与car2对象都是各自独立的属性与函数，最起码我们应该共享方法。这就是原形方式的优势所在。</p>
<h2 id="3．原型方式">3．原型方式</h2><p>利用对象的prototype属性，可把它看出创建新对象所依赖的原型。方法如下：<br> <figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span><span class="params">()</span> &#123;</span>&#125;;</span><br><span class="line">Car.prototype.<span class="built_in">color</span> = <span class="string">"red"</span>;</span><br><span class="line">Car.prototype.doors = <span class="number">4</span>;</span><br><span class="line">Car.prototype.drivers = new Array<span class="params">(<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>)</span>;</span><br><span class="line">Car.prototype.showColor = <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    alert<span class="params">(this.color)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line">var car1 = new Car<span class="params">()</span>;</span><br><span class="line">var car2 = new Car<span class="params">()</span>;</span><br><span class="line">car1.showColor<span class="params">()</span>;</span><br><span class="line">car2.showColor<span class="params">()</span>;</span><br><span class="line">alert<span class="params">(car1.drivers)</span>;</span><br><span class="line">car1.drivers.push<span class="params">(<span class="string">"stephen"</span>)</span>;</span><br><span class="line">alert<span class="params">(car1.drivers)</span>; <span class="comment">//结果：Tom,Jerry,stephen</span></span><br><span class="line">alert<span class="params">(car2.drivers)</span>; <span class="comment">//结果：Tom,Jerry,stephen</span></span><br><span class="line"><span class="comment">//可以用json方式简化prototype的定义:</span></span><br><span class="line">Car.prototype = &#123;</span><br><span class="line">    <span class="built_in">color</span>: <span class="string">"red"</span>,</span><br><span class="line">    doors: <span class="number">4</span>,</span><br><span class="line">    drivers: [<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>,'safdad'],</span><br><span class="line">    showColor: <span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">        alert<span class="params">(this.color)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>首先这段代码的构造函数，其中没有任何代码，接下来通过对象的prototype属性添加属性定义Car对象的属性。这种方法很好，但是问题是Car的对象指向的是Array指针，Car的两个对象都指向同一个Array数组，其中一个对象car1改变属性对象的引用（数组Array）时，另一个对象car2也同时改变，这是不允许的。同时该问题也表现在原型不能带任何初始化参数，导致构造函数无法正常初始化。这需要另一种方式来解决：那就是混合的构造函数/原型模式。</p>
<h2 id="4-_混合的构造函数/原型模式">4. 混合的构造函数/原型模式</h2><p>联合使用构造函数和原型方式，定义类就非常方便。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color,doors</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color=color;</span><br><span class="line">    <span class="keyword">this</span>.doors=doors;</span><br><span class="line">    <span class="keyword">this</span>.drivers=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Tom"</span>,<span class="string">"Jerry"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Car.prototype.showColor=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line"><span class="keyword">var</span> car1=<span class="keyword">new</span> Car(<span class="string">'red'</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> car2=<span class="keyword">new</span> Car(<span class="string">'blue'</span>,<span class="number">4</span>);</span><br><span class="line">car1.showColor();</span><br><span class="line">car2.showColor();</span><br><span class="line">alert(car1.drivers);</span><br><span class="line">car1.drivers.push(<span class="string">"stephen"</span>);</span><br><span class="line">alert(car1.drivers); <span class="comment">//结果：Tom,Jerry,stephen</span></span><br><span class="line">alert(car2.drivers); <span class="comment">//结果：Tom,Jerry</span></span><br><span class="line">alert(car1 <span class="keyword">instanceof</span> Car);</span><br></pre></td></tr></table></figure></p>
<p>该方法是把属性放在内部定义，把方法放在外边利用prototype进行定义。解决了第三种方法的问题。<br>这种方法其实应该来说非常友好了，但是比起java的语法来，应该有一些不和谐，感觉比较凌乱，对C++来说，我们就没有那么麻烦的感觉了，可是开发C++的研发人员一般情况下很少涉及javaScript，而对J2EE的研发人员来说，这种方式总有一些别扭。总感觉不是友好的封装，其实只不过是视觉上封装效果不是很好而已，要想达到视觉封装效果而又能达到这种方法的效果的也可以以，个人认为其实比较麻烦。那就是动态原型法。</p>
<h2 id="5-动态原型">5.动态原型</h2><p>对于习惯使用其他语言的开发者来说，使用混合的构造函数/原型方式感觉不那么和谐。毕竟，定义类时，大多数面向对象语言都对属性和方法进行了视觉上的封装。考虑下面的C#类：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> color = <span class="string">"red"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> doors = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mpg = <span class="number">23</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span>(<span class="params"><span class="keyword">string</span> color, <span class="keyword">int</span> doors, <span class="keyword">int</span> mpg</span>) <span class="comment">//constructor</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.doors = doors;</span><br><span class="line">        <span class="keyword">this</span>.mpg = mpg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C#很好的打包了Car类的所有属性和方法，因此看见这段代码就知道它要实现什么功能，它定义了一个对象的信息。批评混合的构造函数/原型方式的人认为，在构造函数内存找属性，在其外部找方法的做法不合逻辑。因此，他们设计了动态原型方法，以提供更友好的编码风格。<br>动态原型方法的基本想法与混合的构造函数/原型方式相同，即在构造函数内定义非函数属性，而函数属性则利用原型属性定义。唯一的区别是赋予对象方法的位置。下面是用动态原型方法重写的Car类：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">"red"</span>;</span><br><span class="line">    <span class="keyword">this</span>.doors = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">this</span>.drivers = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Tom"</span>, <span class="string">"Jerry"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> Car._initialized == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        Car.prototype.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.color);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Car._initialized = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>直到检查typeof Car._initialized是否等于”undefined”之前，这个构造函数都未发生变化。这行代码是动态原型方法中最重要的部分。如果这个值未定义，构造函数将用原型方式继续定义对象的方法，然后把Car._initialized设置为true。如果这个值定义了（它的值为true时，typeof的值为Boolean），那么就不再创建该方法。简而言之，该方法使用标志（_initialized）来判断是否已给原型赋予了任何方法。该方法只创建并赋值一次，为取悦传统的OOP开发者，这段代码看起来更像其他语言中的类定义了。</p>
<h2 id="6_混合工厂方式">6  混合工厂方式</h2><p>这种方式通常是在不能应用前一种方式时的变通方法。它的目的是创建假构造函数，只返回另一种对象的新实例。这段代码看来与工厂函数非常相似：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> oTempCar = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">   oTempCar.color=<span class="string">"red"</span>;</span><br><span class="line">   oTempCar.doors=<span class="number">4</span>;</span><br><span class="line">   oTempCar.mpg=<span class="number">23</span>;</span><br><span class="line">   oTempCar.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       alert(<span class="keyword">this</span>.color);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> oTempCar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>与经典方式不同，这种方式使用new运算符，使它看起来像真正的构造函数：<br>var oCar = new Car();<br>由于在Car()构造函数内部调用了new运算符，所以将忽略第二个new运算符（位于构造函数之外）。在构造函数内部创建的对象被传递回变量var。这种方式在对象方法的内部管理方面与经典方式有着相同的问题。强烈建议：除非万不得已（请参阅第15章），还是避免使用这种方式。<br>总结：（采用哪种方式)<br>目前使用最广泛的是混合的构造函数/原型方式。此外，动态原型方法也很流行，在功能上与构造函数/原型方式等价。可以采用这两种方式中的任何一种。不过不要单独使用经典的构造函数或原型方式，因为这样会给代码引入问题。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static class (1:function)</span></span><br><span class="line">    <span class="keyword">var</span> CarCollection = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _carCollection = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//global,private</span></span><br><span class="line">        <span class="keyword">this</span>.Add = <span class="function"><span class="keyword">function</span>(<span class="params">objCar</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'Add'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.Get = <span class="function"><span class="keyword">function</span>(<span class="params">carid</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'Get'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//static class (2:json)</span></span><br><span class="line">    <span class="keyword">var</span> Car = &#123;</span><br><span class="line">        color: <span class="string">'red'</span>,</span><br><span class="line">        doors: <span class="number">4</span>,</span><br><span class="line">        showColor: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.color); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Car.showColor();</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-工厂方式">1.工厂方式</h2><p>javaScript中创建自己的类和对象，我们应该是必须掌握的，我们都知道javaScript中对象的属性可以在对象创建后动态定义，比如下面的代码<br><figure class="highlight javascri]]>
    </summary>
    
      <category term="原型" scheme="http://fire17643.github.io/blog/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="前端" scheme="http://fire17643.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>